[
  {
    "title": "Localization | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/contributing-guide/l10n/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideLocalization\nVersion: 2.14.0\nLocalization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\nAdding Translations​\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n\n\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. fr is the language code for French.\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Français\" }\n    ]\n}\n\nNOTE\n\nFeel free to reach us on Slack for any help related to Localization.\n\nEdit this page\nPrevious\nTesting\nNext\nEsLint\nAdding Translations"
  },
  {
    "title": "Testing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/contributing-guide/testing/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideTesting\nVersion: 2.14.0\nTesting\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\nSetting up​\nNavigate to the cypress-tests directory and enter the following command:\nnpm install\n\nRunning Tests​\nHeaded mode​\n\nTo run cypress in headed mode, run the following command:\n\nnpm run cy:open\n\n\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\nHeadless mode​\n\nTo run cypress in headless mode, run the following command:\n\nnpm run cy:run\n\n\nFor running specific spec in headless mode, run for specific spec\n\nnpm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js\n\nCAUTION\n\nIf some test specs need the environment variables, the user can pass them similar to the following command:\n\nnpm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'\n\n\nor the user can add env-vars in the cypress.config.js file\n\nINFO\n\nCheck all the Cypress commands here\n\nEdit this page\nPrevious\nToolJet CLI\nNext\nLocalization\nSetting up\nRunning Tests"
  },
  {
    "title": "ToolJet CLI | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/tooljet-cli/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideToolJet CLI\nVersion: 2.14.0\nToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\nINFO\n\nStarting from ToolJet CLI version 0.0.14, the creation of datasource plugins has been deprecated to prioritise marketplace plugins. This change enhances the plugin development experience and aligns with ToolJet's roadmap.\n\nInstallation​\n\nIn order to manage plugins for the ToolJet marketplace, including creating, updating, and deleting, you will need to utilize tooljet-cli. This can be installed via npm by entering the following command:\n\nnpm install -g @tooljet/cli\n\nEnsure the installation was successful​\ntooljet --version\n\nCommands​\ninfo​\n\nThis command returns the information about where tooljet is being run\n\ntooljet info\n\ncreate​\n\nThis command creates a new plugin.\n\ntooljet plugin create PLUGIN_NAME\n\nTIP\n\nRead the detailed guide on creating a marketplace plugin here.\n\ndelete​\n\nThis command deletes a plugin.\n\ntooljet plugin delete PLUGIN_NAME\n\n\nThe CLI will prompt developers to verify if the plugin to be deleted is a marketplace plugin before proceeding with the deletion.\n\ninstall​\n\nInstalls a new npm module inside a tooljet plugin\n\ntooljet plugin install [NPM_MODULE] --plugin <value>\n\nEdit this page\nPrevious\nMarketplace: Creating plugins\nNext\nTesting\nInstallation\nCommands\ninfo\ncreate\ndelete\ninstall"
  },
  {
    "title": "ToolJet Database | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/tooljet-database/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nToolJet Database\nVersion: 2.14.0\nToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\nEnabling the ToolJet Database for your instance​\n\nRequires:\n\nPostgREST server\nAdditional configuration for ToolJet server\n\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to true.\n\nPostgREST server​\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n\nTIP\n\nIf you have openssl installed, you can run the following command openssl rand -hex 32 to generate the value for PGRST_JWT_SECRET.\n\nIf this parameter is not specified then PostgREST refuses authentication requests.\n\nvariable\tdescription\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_DB_URI\tdatabase connection string for tooljet database\nPGRST_LOG_LEVEL\tinfo\nINFO\n\nPlease make sure that DB_URI is given in the format postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]\n\nAdditional ToolJet server configuration​\nvariable\tdescription\nENABLE_TOOLJET_DB\ttrue or false\nTOOLJET_DB\tDefault value is tooljet_db\nTOOLJET_DB_HOST\tdatabase host\nTOOLJET_DB_USER\tdatabase username\nTOOLJET_DB_PASS\tdatabase password\nTOOLJET_DB_PORT\tdatabase port\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_HOST\tpostgrest database host\n\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n\nTIP\n\nWhen this feature is enabled, the database name provided for TOOLJET_DB will be utilized to create a new database during server boot process in all of our production deploy setups. Incase you want to trigger it manually, use the command npm run db:create on ToolJet server.\n\nFeatures​\n\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\nAccessing ToolJet Database​\n\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\n\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\nDatabase Editor​\n\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\nCreate New Table​\n\nFor creating a new table in ToolJet Database, click on the Create New Table button on the top left corner of the Database editor.\n\nWhen the Create New Table button is clicked, a drawer opens up from the right from where you can enter the details of your new table.\n\nFor creating a new table, you'll need to:​\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\nSupported data types​\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\n\nClick on Create button to create a new table.\n\nSearch Table​\n\nYou can enter a search term to search through all tables in the database.\n\nAdd column​\n\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\n\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n\nColumn name: name of the column (key)\nData type: Check available data types here\nDefault Value Any default value for the column (not mandatory)\nFilter​\n\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\n\nAdding a filter on the table data​\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\nAvailable operations are:​\nequals\ngreater than\ngreater than or equal\nless than\nless than or equal\nnot equal\nlike\nilike\nmatch\nimatch\nin\ncontains\ncontained\nnot\nSort​\n\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\nAdd new row​\n\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\nEdit row​\n\nTo edit the rows from the ToolJet database dashboard, click on the Edit row button. A drawer will open from the right from where first you need to select the id of the row to be edited from the dropdown and then you can edit the cell values of the selected row.\n\nDelete records​\n\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\nDelete column​\n\nTo delete a particular column, just click on the column name and the delete button will appear, click on it to delete the column.\n\nEdit or Delete a table​\n\nWhen you click on the kebab menu (three vertical dots icon) on the right of the table name, you'll get two options: Edit and Delete.\n\nEdit will allow you to rename the table\nDelete will allow you to delete the table permanently\nQuerying data from the ToolJet database​\n\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\nGo to the query panel, and click on the +Add button to add a new query, and select Run ToolJetDb query\n\nEnter the Name of the table that you want to query, select an Operation from the dropdown, Create the query, and then Run the query to get the response.\n\nINFO\nPreview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed in JSON or Raw.\nWhen a new query is created, by default the query name is set to tooljetdbN (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\nAvailable operations​\nList rows​\n\nThis operation returns the list of all the records in the table\n\nOptional parameters​\nFilter: Add a filter to the query response by setting a column, operation and value.\nSort: Add a sort to the query response by setting a column and direction.\nLimit: Limit the query response. This parameter expects a numerical value. ex: 5\nCreate row​\n\nThis operation creates a new record in the table\n\nRequired parameters​\nColumns: Choose a column from the dropdown and enter a value for the new record.\nUpdate row​\n\nThis operation updates an existing record in the table\n\nRequired parameter​\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\nDelete row​\n\nThis operation deletes a record from the table\n\nRequired parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\nINFO\n\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community\n\nEdit this page\nPrevious\nLicensing\nNext\nCopilot\nEnabling the ToolJet Database for your instance\nPostgREST server\nFeatures\nAccessing ToolJet Database\nDatabase Editor\nCreate New Table\nSearch Table\nAdd column\nFilter\nSort\nAdd new row\nEdit row\nDelete records\nDelete column\nEdit or Delete a table\nQuerying data from the ToolJet database\nAvailable operations"
  },
  {
    "title": "Architecture | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/contributing-guide/setup/architecture/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideArchitecture\nVersion: 2.14.0\nIntroduction\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n1. ToolJet Server​\n\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more.\n\nDependencies:\n\nPostgreSQL - ToolJet server persists data to a postgres database.\nEmail service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.\nPostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client​\n\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\n\nRequirements​\nNode version 18.3.0\nnpm version 8.11.0\nEdit this page\nPrevious\nContributing Guide\nNext\nMac OS\n1. ToolJet Server\n2. ToolJet Client\nRequirements"
  },
  {
    "title": "How To Guides | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/category/how-to/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nHow To\nVersion: 2.14.0\nHow To Guides\n\nHow To Guides for all the things ToolJet\n\n📄️ Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\n\n📄️ Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n📄️ Change text color in columns of the table\n\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\n📄️ Bulk update multiple rows in table\n\nCurrently, the datasources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query.\n\n📄️ Delete multiple rows in table\n\nThe table component in the ToolJet has the option for bulk selection of rows that can have various use cases such as updating or deleting records. However, the datasources does not support bulk delete or bulk update operations.\n\n📄️ Using server side pagination for efficient data handling in tables\n\nIn this guide we will learn how to use server side pagination in table component. This will be helpful if you have a large data set and you want to load data in chunks. This will also help you to improve the performance of your application. This guide will be helpful if you are using datasources like MySQL, PostgreSQL, MSSQL, MongoDB, etc. in which you can use limit and offset to fetch data in chunks. We have also included an example to load data from Google Sheets in chunks.\n\n📄️ Enable/Disable a component using current user's property\n\nLet's take look at the exposed variables of the current user property:\n\n📄️ Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\n\n📄️ Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query.\n\n📄️ Import external libraries using RunJS\n\nToolJet allows you to utilize external libraries in your app by importing them using the RunJS query.\n\n📄️ Run Actions from RunJS query\n\nNow you can trigger all the actions available in ToolJet from within the RunJS query. This guide includes the syntax for each action along with the example.\n\n📄️ Intentionally fail a RunJS query\n\nIn this how-to guide, we will create a RunJS query that will throw an error.\n\n📄️ Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\n📄️ Use the to_py() Function in RunPy: Converting JavaScript Objects to Python\n\nThis how-to guide will demonstrate the usage of to_py() function in RunPy queries for converting the JavaScript objects to Python.\n\n📄️ Access a user's location\n\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n\n📄️ Use S3 signed URL to upload documents\n\nIn this how-to guide, you'll learn to upload documents to S3 buckets using the S3 signed URL from a ToolJet application.\n\n📄️ Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage.\n\n📄️ REST API authentication using OAuth 2.0\n\nToolJet’s REST API data source supports OAuth 2.0 as the authentication type. In this guide, we’ll learn how to use Google OAuth2 API to delegate authorization and authentication for your ToolJet Application.\n\n📄️ Upload files on AWS S3 bucket\n\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\n\n📄️ Upload files using GCS\n\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\n\n📄️ Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\nPrevious\nPlivo\nNext\nUse Inspector"
  },
  {
    "title": "Copilot | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/tooljet-copilot/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nCopilot\nVersion: 2.14.0\nCopilot\nAvailable on: Paid plans\nBETA\n\nToolJet Copilot is currently in private beta for Business and Enterprise users only.\n\nToolJet Copilot helps you write your queries faster. It uses OpenAI to suggest queries based on your data.\n\nActivating Copilot​\n\nTo gain access to Copilot, all users, including administrators, can individually sign up for the waitlist program. Upon successful sign up, each user will be issued a distinctive API key linked to their account. However, the exclusive authority to activate Copilot within the workspace settings lies solely with administrators. Administrators can proceed to the Copilot section in the workspace settings, where they can utilize their respective API key to set the \"Enable Copilot\" toggle option.\n\nYou can join the waitlist here: https://tooljet.com/copilot\n\nINFO\nCopilot can be used by users who have permissions to edit the app with the copilot setup.\nUsing Copilot​\n\nOnce activated, the Copilot feature can be accessed while editing any query within the transformations section in the query editor.\n\nCopilot's functionality relies on the provision of clear and concise plain English prompts. It possesses the capability to interact with and retrieve information from various components, enabling it to generate code specific to the desired actions associated with those components. This capability is facilitated by Copilot's comprehensive understanding of the application's present state.\n\nToken Limit per Workspace​\n\nA token is a unit of text that language models like ChatGPT process, such as a word or a character. To ensure fair usage and resource allocation among workspaces, a token limit is implemented. Currently, the token limit is set to 400. If the token limit is surpassed, the request is declined with the message \"Unable to process request. Max tokens exceeded.\"\n\nRate-Limiting​\n\nTo prevent abuse or excessive usage of the Copilot API, rate-limiting measures are in place. The following rules apply:\n\nEach user is restricted to a maximum number of requests within a specific time frame.\nThe current rate limit allows for 100 requests per minute per user.\nIf a user surpasses the rate limit, subsequent requests from that user will be rejected.\nINFO\n\nWhen generating an API key, if a workspace has 5 editors, the daily request limit will be 500 (100 requests per editor). Even if the workspace later expands to 10 editors after a week, the maximum number of requests allowed per day will still be 500.\n\nExample: Generating a SQL statement​\n\nThis example demonstrates the usage of copilot by generating a SQL query to fetch the order details from a PostgreSQL database based on the key provided in the REST API data.\n\nCreate a RESTAPI query using this mock api endpoint: https://fakestoreapi.com/users/1\nEnable transformation on the query editor\n\nTo generate a SQL query using Copilot, first enter the desired prompt within comments in the transformations code editor. Once the prompt has been entered, simply click the Generate Code button, and Copilot will generate the corresponding SQL query.\n\nAssuming that a PostgreSQL data source is already connected and there are two tables in it, namely customer and orders, enter the provided prompt in the code editor:\n\n/*\nAssume the data is an object which has email key.\nassume we have a database with two tables: \"customer\" and \"orders.\" The \"customer\" table has columns such as \"customer_id,\" \"customer_name,\" and \"country.\" The \"orders\" table has columns such as \"order_id,\" \"customer_id,\" \"order_date,\" and \"total_amount.\"\nreturn a SQL query to retrieve the total order amounts for customers from the email key retrieved from the data, who have placed more than three orders.*/\n\n\nClick on the \"Generate Code\" button to generate the SQL query.\n\nOnce the code is generated, add a return statement below the code to return the generated SQL query. The variable name for the query might be different in your generated code.\n\nreturn query //the variable might be different in your generated code\n\n\nPreview the returned SQL statement in the preview block to check if it is correct. Then click on the \"Run\" button to trigger the query.\n\nOnce the query is executed, create a new PostgreSQL query in SQL mode and use JavaScript to get the data query data dynamically:\n\n{{queries.restapi1.data}}\n\nCAUTION\n\nWhile using ToolJet Copilot, it is important to note that the accuracy of the output cannot be guaranteed by the platform. Ultimately, it is your responsibility to assess and evaluate any query before executing it.\n\nIf you have feedback or questions about ToolJet Copilot, feel free to join our slack community.\n\nEdit this page\nPrevious\nToolJet Database\nNext\nOverview\nActivating Copilot\nUsing Copilot\nToken Limit per Workspace\nRate-Limiting\nExample: Generating a SQL statement"
  },
  {
    "title": "Contributing Guide | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/category/contributing-guide/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing Guide\nVersion: 2.14.0\nContributing Guide\n\nGuides for contributing to ToolJet\n\n📄️ Architecture\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n🗃️ Setup\n\n4 items\n\n🗃️ Marketplace\n\n2 items\n\n📄️ ToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\n📄️ Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\n📄️ Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\n🗃️ Troubleshooting\n\n2 items\n\n📄️ Contributor Code of Conduct\n\nOur Pledge\n\n📄️ Slack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nPrevious\nLoading image/PDF from base64 string\nNext\nArchitecture"
  },
  {
    "title": "Marketplace | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/category/marketplace/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nMarketplace\nVersion: 2.14.0\nMarketplace\n📄️ Marketplace : Overview\n\nWith ToolJet Marketplace, ToolJet users can conveniently add custom plugins (datasources) to their workspaces. This feature enables users to create plugins that cater to their specific needs and integrate them seamlessly with ToolJet.\n\n🗃️ Marketplace Plugins\n\n5 items\n\nPrevious\nVersioning and Release\nNext\nMarketplace : Overview"
  },
  {
    "title": "Licensing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/licensing/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nLicensing\nVersion: 2.14.0\nLicensing\nAvailable on: Paid plans\nSetting up for Licensing​\n\nThis comprehensive guide aims to assist you in the process of configuring paid plans on your self-hosted platform. We offer three different licenses tailored to your specific requirements. Let's explore how to get the most out of ToolJet's powerful features! 🚀\n\nLet's look into three types of licenses:\n\nTrial License: This is a free license that grants access to premium features for a 14-day trial period. In order to get this, please reach out to our team.\nBusiness License: This is a paid license that you can purchase directly.\nEnterprise License: This is a paid license with customizable options. To obtain this license, you have to contact our sales team.\n\nAfter selecting the appropriate license that aligns with your needs, the next step is to proceed with the purchase. Once you have completed the onboarding process, we will generate a unique license key specifically tailored to your chosen specifications. Keep reading to gain a more comprehensive understanding of this process.\n\nTo update your trial license key, please follow these steps:\n\nSet up the instance and log in as a Super Admin.\nNavigate to the instance settings page.\nIn the license key tab, make the necessary updates to the provided license key.\nWithin the license tab of the instance settings page, you can access the limit tab, which displays the current status of available super admins, builders, and end users.\nNOTE\n\nThe trial license key will be valid for 14 days. To fully enjoy ToolJet, we recommend upgrading to premium plans within this period. If you wish to upgrade from the trial to the business or enterprise edition, you can click the Upgrade or Renew button or contact our team via Slack. Upon expiration, access to premium features like OpenID SSO login and Audit logs will be restricted, ensuring no data loss occurs. However, don't worry! You can still upgrade to any of our premium plans and enjoy the benefits of ToolJet.\n\nRef: Screenshot to update license key\n\nA) Chosen Plan: Business Plan​\n\nIf you decide to proceed with the Business Plan and have made the purchase, please wait for our team to get back to you within 24-48 hours to get you onboarded.\n\nTo update the business license key, follow these steps:\n\nLog in as a Super Admin, ensuring that you are on the correct instance URL.\nGo to the instance settings page.\nIn the license key tab, update the provided license key.\nWithin the license tab of the instance settings page, you can access the limit tab, which provides details about available super admins, builders, and end users.\nNOTE\n\nAs a super admin, you can conveniently view the remaining days of your enterprise edition period on the dashboard. (Refer to screenshots below)\n\nIMPORTANT\n\nThe business license key will be valid for 3 months only. You can renew it to continue using ToolJet to its fullest potential.\n\nB) Chosen Plan: Enterprise Plan​\n\nIf you choose to move forward with the Enterprise Plan and have completed the purchase process with our sales team, kindly anticipate a response from our team within 24-48 hours to facilitate your onboarding process.\n\nTo update the enterprise license key, follow these steps:\n\nLog in as a Super Admin, ensuring that you are on the correct instance URL.\nGo to the instance settings page.\nIn the license key tab, update the provided license key.\nWithin the license tab of the instance settings page, you can access the limit tab, which provides details about available super admins, builders, and end users.\nNOTE\n\nAs a super admin, you can conveniently view the remaining days of your enterprise edition period on the dashboard.\n\nFrequently Asked Questions (FAQs)​\n1) How can I upgrade or renew my license?​\n\nIf your business or enterprise edition license key is nearing expiration, please click the Upgrade or Renew button or contact us via email at hello@tooljet.com to obtain an extended license key. If you intend to increase the number of users, please reach out to us via Slack or review our pricing page at https://www.tooljet.com/pricing before making a request.\n\nRef: Screenshot addressing upgrade/renew CTAs. Note that there are a couple of other pages which will display banners or CTAs, from where you can upgrade/renew.\n\n2) What happens if my license expires?​\n\nIf your business or enterprise license key expires, your instance will revert to operating as a free plan. While you can still create unlimited apps, workspaces, and add users, premium features such as OpenID and Audit logs will no longer be accessible. For further information, please refer to the relevant plans.\n\n3) How can I add more users?​\n\nThere are different methods to do this:\n\na) You can renew directly using the business plan. (Note: Please do check the list of premium features available with this plan)\n\nb) You can directly reach out to us via Slack or email and we will be happy to provide you the support.\n\nLastly, please keep in mind that your license key is private and strictly prohibited from being shared with any third parties.\n\nEdit this page\nPrevious\nV2 migration guide\nNext\nToolJet Database\nSetting up for Licensing\nA) Chosen Plan: Business Plan\nB) Chosen Plan: Enterprise Plan\nFrequently Asked Questions (FAQs)\n1) How can I upgrade or renew my license?\n2) What happens if my license expires?\n3) How can I add more users?"
  },
  {
    "title": "Tracking | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/tracking/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nTracking\nVersion: 2.16.0\nTracking\nTIP\n\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n\nServer​\nTIP\n\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of CHECK_FOR_UPDATES environment variable to 0. This feature is enabled by default.\n\nClient​\n\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.\n\nTracking can be disabled by setting the value environment variable ENABLE_TRACKING to 0.\n\nEdit this page\nPrevious\nSecurity\nServer\nClient"
  },
  {
    "title": "Setup ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/setup/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSetup\nVersion: 2.14.0\nSetup ToolJet\n\nCheck out the different methods you can use to deploy ToolJet on your machine\n\nTry ToolJet\n\nTry out ToolJet with single docker command\n\nDigitalOcean\n\nQuickly deploy ToolJet using the Deploy to DigitalOcean button\n\nDocker\n\nDeploy ToolJet on a server using docker-compose\n\nHeroku\n\nDeploy ToolJet on Heroku using the one-click-deployment button\n\nAWS EC2\n\nDeploy ToolJet on AWS EC2 instances\n\nAWS ECS\n\nDeploy ToolJet on AWS ECS instances\n\nOpenshift\n\nDeploy ToolJet on Openshift\n\nHelm\n\nDeploy ToolJet with Helm Chart\n\nKubernetes\n\nDeploy ToolJet on a Kubernetes cluster\n\nKubernetes (GKE)\n\nDeploy ToolJet on a GKE Kubernetes cluster\n\nKubernetes (AKS)\n\nDeploy ToolJet on a AKS Kubernetes cluster\n\nAzure container apps\n\nDeploy ToolJet on a Azure Container Apps\n\nGoogle Cloud Run\n\nDeploy ToolJet on Cloud Run with GCloud CLI\n\nDeploying ToolJet client\n\nDeploy ToolJet Client on static website hosting services\n\nEnvironment variables\n\nEnvironment variables required by ToolJet Client and Server to start running\n\nConnecting via HTTP proxy\n\nEnvironment variables required by ToolJet to connect via HTTP proxy\n\nDeploying ToolJet on a subpath\n\nSteps to deploy ToolJet on a subpath rather than root of domain\n\nV2 migration guide\n\nThings to know before migrating to ToolJet V2\n\nEdit this page\nPrevious\nGetting Started\nNext\nTry ToolJet"
  },
  {
    "title": "Security | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/security/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSecurity\nVersion: 2.16.0\nSecurity\nUncompromised Data Security with SOC 2 Compliance​\n\nWith SOC 2 compliance, Tooljet ensures the highest level of data security. The adherence to SOC 2 standards mirrors the rigorous data protection measures in place, covering everything from encryption to robust access controls. It also guarantees a consistent level of service availability and process integrity, instilling confidence in our customers and stakeholders about the safe handling of their sensitive information.\n\nData storage​\n\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\n\nDatasource credentials​\n\nAll the datasource credentials are securely encrypted using aes-256-gcm. The credentials are never exposed to the frontend ( ToolJet client ).\n\nOther security features​\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n\nIf you notice a security vulnerability, please let the team know by sending an email to security@tooljet.com.\n\nEdit this page\nPrevious\nSlack Code of Conduct\nNext\nTracking\nUncompromised Data Security with SOC 2 Compliance\nData storage\nDatasource credentials\nOther security features"
  },
  {
    "title": "Localization | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/contributing-guide/l10n/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideLocalization\nVersion: 2.16.0\nLocalization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\nAdding Translations​\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n\n\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. fr is the language code for French.\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Français\" }\n    ]\n}\n\nNOTE\n\nFeel free to reach us on Slack for any help related to Localization.\n\nEdit this page\nPrevious\nTesting\nNext\nEsLint\nAdding Translations"
  },
  {
    "title": "Slack Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/contributing-guide/slackcoc/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideSlack Code of Conduct\nVersion: 2.16.0\nSlack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction​\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities — online and in-person— as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\nExpected behavior​\nBe welcoming.\nBe kind.\nLook out for each other.\nUnacceptable Behavior​\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\nWhere does the Code of Conduct apply?​\n\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\n\nIn addition, violations of this code outside our spaces may affect a person’s ability to participate in them.\n\nEnforcement​\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\nINFO\n\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n\nEtiquettes to follow​\n1. Be nice to everyone​\n2. Check off your resolved questions​\n\nIf you have received a useful reply to your question, please drop a ✅ reaction or a reply for affirmation.\n\n3. Try not to repost question​\n\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n\n4. Post in public​\n\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n\n5. Don't spam tags​\n\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n\n6. Use threads for discussion​\n\nTo keep the main channel area clear, we request to use threads to keep an ongoing conversation organized.\n\nEdit this page\nPrevious\nContributor Code of Conduct\nNext\nSecurity\nIntroduction\nExpected behavior\nUnacceptable Behavior\nWhere does the Code of Conduct apply?\nEnforcement\nEtiquettes to follow"
  },
  {
    "title": "Contributor Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/contributing-guide/code-of-conduct/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideContributor Code of Conduct\nVersion: 2.16.0\nContributor Covenant Code of Conduct\nOur Pledge​\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nOur Standards​\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nOur Responsibilities​\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nScope​\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nEnforcement​\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@tooljet.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\nAttribution​\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n\nEdit this page\nPrevious\nRunPy limitations\nNext\nSlack Code of Conduct\nOur Pledge\nOur Standards\nOur Responsibilities\nScope\nEnforcement\nAttribution"
  },
  {
    "title": "Testing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/contributing-guide/testing/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideTesting\nVersion: 2.16.0\nTesting\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\nSetting up​\nNavigate to the cypress-tests directory and enter the following command:\nnpm install\n\nRunning Tests​\nHeaded mode​\n\nTo run cypress in headed mode, run the following command:\n\nnpm run cy:open\n\n\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\nHeadless mode​\n\nTo run cypress in headless mode, run the following command:\n\nnpm run cy:run\n\n\nFor running specific spec in headless mode, run for specific spec\n\nnpm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js\n\nCAUTION\n\nIf some test specs need the environment variables, the user can pass them similar to the following command:\n\nnpm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'\n\n\nor the user can add env-vars in the cypress.config.js file\n\nINFO\n\nCheck all the Cypress commands here\n\nEdit this page\nPrevious\nToolJet CLI\nNext\nLocalization\nSetting up\nRunning Tests"
  },
  {
    "title": "ToolJet CLI | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/tooljet-cli/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideToolJet CLI\nVersion: 2.16.0\nToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\nINFO\n\nStarting from ToolJet CLI version 0.0.14, the creation of datasource plugins has been deprecated to prioritise marketplace plugins. This change enhances the plugin development experience and aligns with ToolJet's roadmap.\n\nInstallation​\n\nIn order to manage plugins for the ToolJet marketplace, including creating, updating, and deleting, you will need to utilize tooljet-cli. This can be installed via npm by entering the following command:\n\nnpm install -g @tooljet/cli\n\nEnsure the installation was successful​\ntooljet --version\n\nCommands​\ninfo​\n\nThis command returns the information about where tooljet is being run\n\ntooljet info\n\ncreate​\n\nThis command creates a new plugin.\n\ntooljet plugin create PLUGIN_NAME\n\nTIP\n\nRead the detailed guide on creating a marketplace plugin here.\n\ndelete​\n\nThis command deletes a plugin.\n\ntooljet plugin delete PLUGIN_NAME\n\n\nThe CLI will prompt developers to verify if the plugin to be deleted is a marketplace plugin before proceeding with the deletion.\n\ninstall​\n\nInstalls a new npm module inside a tooljet plugin\n\ntooljet plugin install [NPM_MODULE] --plugin <value>\n\nEdit this page\nPrevious\nMarketplace: Creating plugins\nNext\nTesting\nInstallation\nCommands\ninfo\ncreate\ndelete\ninstall"
  },
  {
    "title": "Architecture | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/contributing-guide/setup/architecture/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideArchitecture\nVersion: 2.16.0\nIntroduction\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n1. ToolJet Server​\n\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more.\n\nDependencies:\n\nPostgreSQL - ToolJet server persists data to a postgres database.\nEmail service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.\nPostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client​\n\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\n\nRequirements​\nNode version 18.3.0\nnpm version 8.11.0\nEdit this page\nPrevious\nContributing Guide\nNext\nGitHub Codespaces\n1. ToolJet Server\n2. ToolJet Client\nRequirements"
  },
  {
    "title": "How To Guides | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/category/how-to/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nHow To\nVersion: 2.16.0\nHow To Guides\n\nHow To Guides for all the things ToolJet\n\n📄️ Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\n\n📄️ Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n📄️ Change text color in columns of the table\n\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\n📄️ Bulk update multiple rows in table\n\nCurrently, the data sources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query.\n\n📄️ Delete multiple rows in table\n\nThe table component in the ToolJet has the option for bulk selection of rows that can have various use cases such as updating or deleting records. However, the datasources does not support bulk delete or bulk update operations.\n\n📄️ Using server side pagination for efficient data handling in tables\n\nIn this guide we will learn how to use server side pagination in table component. This will be helpful if you have a large data set and you want to load data in chunks. This will also help you to improve the performance of your application. This guide will be helpful if you are using datasources like MySQL, PostgreSQL, MSSQL, MongoDB, etc. in which you can use limit and offset to fetch data in chunks. We have also included an example to load data from Google Sheets in chunks.\n\n📄️ Enable/Disable a component using current user's property\n\nLet's take look at the exposed variables of the current user property:\n\n📄️ Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\n\n📄️ Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query.\n\n📄️ Import external libraries using RunJS\n\nToolJet allows you to utilize external libraries in your app by importing them using the RunJS query.\n\n📄️ Run Actions from RunJS query\n\nNow you can trigger all the actions available in ToolJet from within the RunJS query. This guide includes the syntax for each action along with the example.\n\n📄️ Intentionally fail a RunJS query\n\nIn this how-to guide, we will create a RunJS query that will throw an error.\n\n📄️ Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\n📄️ Use the to_py() Function in RunPy: Converting JavaScript Objects to Python\n\nThis how-to guide will demonstrate the usage of to_py() function in RunPy queries for converting the JavaScript objects to Python.\n\n📄️ Access a user's location\n\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n\n📄️ Use S3 signed URL to upload documents\n\nIn this how-to guide, you'll learn to upload documents to S3 buckets using the S3 signed URL from a ToolJet application.\n\n📄️ Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage.\n\n📄️ REST API authentication using OAuth 2.0\n\nToolJet’s REST API data source supports OAuth 2.0 as the authentication type. In this guide, we’ll learn how to use Google OAuth2 API to delegate authorization and authentication for your ToolJet Application.\n\n📄️ Upload files on AWS S3 bucket\n\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\n\n📄️ Upload files using GCS\n\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\n\n📄️ Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\nPrevious\nPlivo\nNext\nUse Inspector"
  },
  {
    "title": "Marketplace | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/category/marketplace/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nMarketplace\nVersion: 2.16.0\nMarketplace\n📄️ Marketplace : Overview\n\nWith ToolJet Marketplace, ToolJet users can conveniently add custom plugins (datasources) to their workspaces. This feature enables users to create plugins that cater to their specific needs and integrate them seamlessly with ToolJet.\n\n🗃️ Marketplace Plugins\n\n5 items\n\nPrevious\nVersioning and Release\nNext\nMarketplace : Overview"
  },
  {
    "title": "Contributing Guide | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/category/contributing-guide/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing Guide\nVersion: 2.16.0\nContributing Guide\n\nGuides for contributing to ToolJet\n\n📄️ Architecture\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n🗃️ Setup\n\n5 items\n\n🗃️ Marketplace\n\n2 items\n\n📄️ ToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\n📄️ Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\n📄️ Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\n🗃️ Troubleshooting\n\n2 items\n\n📄️ Contributor Code of Conduct\n\nOur Pledge\n\n📄️ Slack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nPrevious\nLoading image/PDF from base64 string\nNext\nArchitecture"
  },
  {
    "title": "Dashboard | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/dashboard/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nDashboard\nVersion: 2.16.0\nDashboard\n\nThe ToolJet Dashboard is the initial landing page that you see upon logging into your workspace. This interface serves as a central hub where you can access a variety of features. Primarily, it displays all the applications you've created within ToolJet. Moreover, you have the capability to create new workspaces and applications directly from this dashboard. Additionally, it provides an option to create folders for categorizing and managing applications for easier organization, access control, and workflow management.\n\nFurthermore, the dashboard serves as a gateway to various essential sections, such as Workflows, ToolJet Database, Data Sources, Marketplace, Workspace Settings, Instance Settings, and Audit logs. You can effortlessly navigate to these sections directly from the dashboard.\n\nWorkspace Manager​\n\nThe workspace manager is located on the top left corner of the dashboard. Clicking on the workspace manager will open a dropdown menu with a list of all the workspaces you are a part of. You can switch between workspaces by clicking on the workspace name from the dropdown menu.\n\nYou can also create a new workspace by clicking on the Add new workspace button on the bottom of the dropdown menu. Clicking on this button will open a modal, enter the name of the workspace and click on the Create Workspace button to create a new workspace. Workspaces can be renamed by clicking on the edit icon on the right side of the workspace name.\n\nCreate a new app​\n\nTo create a new app, click on the Create new app button on the top left corner of the dashboard. Clicking on this button will instantly create a new app and open the app builder.\n\n\n\n\nThere are three dots on the right side of the Create new app button. Clicking on these dots will open a dropdown menu with two options:\n\nChoose from templates​\n\nThis option will open a modal with a list of pre-built templates. You can choose any template from this list to create a new app.\n\nImport​\n\nThis option will open a file picker to import a JSON file. This JSON file should be the app exported from ToolJet.\n\nImporting app connected to marketplace plugins​\n\nWhen importing an app with marketplace plugins, the marketplace plugin should be installed in the tooljet workspace where the app is being imported. If the marketplace plugin is not installed, the app will be imported without the queries for that plugin.\n\nWhen marketplace plugin is installed​\n\nIf marketplace plugin is installed in the tooljet workspace where the app is being imported, the queries connected to the marketplace plugin will be available in the imported application. The queries will be linked to the data source with the same name if it is already present. If the data source is not present, a new data source will be created of that marketplace plugin and linked to the queries.\n\nWhen marketplace plugin is not installed​\n\nIf you have an app with a query linked to a marketplace plugin, and you import that app in a tooljet workspace where the marketplace plugin is not installed as the data source, the queries will be not be available in the imported application.\n\nImporting app connected to tooljet table​\n\nWhen the app(JSON file) that includes the table schema is imported, and the table is not present in the tooljet database of the workspace where the app is being imported, a new table will be created in the tooljet database with the same name as the table in the imported app.\n\nIf the table with the same name is already present in the workspace, the new table will be created with the name <table name>_<unix timestamp>. Example: <tablename>_1627980000.\n\nCreate a new folder​\n\nFolders can be created to organize your apps. To create a new folder, click on the + button on the left drawer of the dashboard. Clicking on this button will open a modal, enter the name of the folder and click on the Create Folder button to create a new folder.\n\nDelete or Edit Folder​\n\nA folder can be deleted or renamed. To delete or rename a folder, click on the kebab menu on the right side of the folder name. Clicking on kebab menu will open a dropdown menu with two options:\n\nEdit folder: This option will open a modal, enter the new name of the folder and click on the Edit button to rename the folder.\nDelete folder: This option will open a confirmation modal to delete the folder. Click on the Delete button to delete the folder.\nSearch folders​\n\nFolders can be searched by clicking on the search icon on the left drawer of the dashboard. Clicking on the search icon will open a search bar, enter the name of the folder to search.\n\nApp cards​\n\nThe dashboard displays all the apps created in the workspace as cards. These cards are displayed in a grid layout. The app cards display the name of the app, the name of the creator, and the date of creation. The app cards also display the app icon, which can be changed by clicking on the Change Icon option from the app menu.\n\nApp menu​\n\nThe app menu is located on the top right corner of the app card. Clicking on the app menu will open a dropdown menu with a list of options. These options are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nChange Icon​\n\nThis option will open a modal with a list of icons. You can choose any icon from this list to change the app icon.\n\nAdd to folder​\n\nThis option will open a modal with a list of folders. You can choose any folder from this list to add the app to the folder.\n\nClone app​\n\nSelecting this option will immediately open the cloned app in the app builder with the same configuration as the original app. The new app will be named as <original app name> followed by unix timestamp. Example: <original app name> 1627980000.\n\nExport app​\n\nThis option will download a JSON file of the application. This JSON file can be imported to ToolJet to create a new app. The exported app will include all the queries connected to global data sources including the data source created from Marketplace plugins.\n\nThis option allows you to select a specific version of the app to export or export all the versions of the app. To export a specific version of the app, select a version from the list of available versions in the modal and click on the Export selected version and to export all the versions of the app, click on the Export All button.\n\nExport ToolJet table schema​\n\nSelecting this option will inclue the schema of the tooljet table connected to that application in the exported JSON file. This option is available for all the apps on ToolJet however only the apps with a tooljet table connected(includes tjdb query) will have the schema included in the exported JSON file.\n\nThis JSON file can be used to import the application to ToolJet along with the table schema that was connected to the application.\n\nDelete app​\n\nThis option will open a confirmation modal to delete the app. Click on the Delete button to delete the app.\n\nApp search​\n\nApps can be searched by clicking on the search bar on the center of the dashboard. Click on the search bar and enter the name of the app to search.\n\nCurrent ToolJet Version​\n\nThe current version of ToolJet is displayed on the top right corner of the dashboard.\n\nEdit this page\nPrevious\nControl component (Component Specific Actions)\nNext\nOverview\nWorkspace Manager\nCreate a new app\nChoose from templates\nImport\nImporting app connected to marketplace plugins\nImporting app connected to tooljet table\nCreate a new folder\nDelete or Edit Folder\nSearch folders\nApp cards\nApp menu\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nApp search\nCurrent ToolJet Version"
  },
  {
    "title": "ToolJet Database | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/tooljet-database/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nToolJet Database\nVersion: 2.16.0\nToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\nEnabling the ToolJet Database for your instance​\n\nRequires:\n\nPostgREST server\nAdditional configuration for ToolJet server\n\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to true.\n\nPostgREST server​\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n\nTIP\n\nIf you have openssl installed, you can run the following command openssl rand -hex 32 to generate the value for PGRST_JWT_SECRET.\n\nIf this parameter is not specified then PostgREST refuses authentication requests.\n\nvariable\tdescription\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_DB_URI\tdatabase connection string for tooljet database\nPGRST_LOG_LEVEL\tinfo\nINFO\n\nPlease make sure that DB_URI is given in the format postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]\n\nAdditional ToolJet server configuration​\nvariable\tdescription\nENABLE_TOOLJET_DB\ttrue or false\nTOOLJET_DB\tDefault value is tooljet_db\nTOOLJET_DB_HOST\tdatabase host\nTOOLJET_DB_USER\tdatabase username\nTOOLJET_DB_PASS\tdatabase password\nTOOLJET_DB_PORT\tdatabase port\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_HOST\tpostgrest database host\n\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n\nTIP\n\nWhen this feature is enabled, the database name provided for TOOLJET_DB will be utilized to create a new database during server boot process in all of our production deploy setups. Incase you want to trigger it manually, use the command npm run db:create on ToolJet server.\n\nFeatures​\n\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\nExport table from the ToolJet Database to a JSON file.\nAccessing ToolJet Database​\n\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\n\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\nDatabase Editor​\n\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\nCreate New Table​\n\nFor creating a new table in ToolJet Database, click on the Create New Table button on the top left corner of the Database editor.\n\nWhen the Create New Table button is clicked, a drawer opens up from the right from where you can enter the details of your new table.\n\nFor creating a new table, you'll need to:​\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\nSupported data types​\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\n\nClick on Create button to create a new table.\n\nSearch Table​\n\nYou can enter a search term to search through all tables in the database.\n\nAdd column​\n\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\n\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n\nColumn name: name of the column (key)\nData type: Check available data types here\nDefault Value Any default value for the column (not mandatory)\nFilter​\n\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\n\nAdding a filter on the table data​\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\nAvailable operations are:​\nequals: This operation is used to check if the value of the column is equal to the value entered in the input field.\ngreater than: This operation is used to check if the value of the column is greater than the value entered in the input field.\ngreater than or equal: This operation is used to check if the value of the column is greater than or equal to the value entered in the input field.\nless than: This operation is used to check if the value of the column is less than the value entered in the input field.\nless than or equal: This operation is used to check if the value of the column is less than or equal to the value entered in the input field.\nnot equal: This operation is used to check if the value of the column is not equal to the value entered in the input field.\nlike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nilike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. ex: ToolJet will match tooljet\nmatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nimatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nin: This operation is used to check if the value of the column is in the list of values entered in the input field. ex: 1,2,3\ncontains: This operation is used to check if the value of the column contains the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\ncontained: This operation is used to check if the value of the column is contained in the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nnot: This operation is used to negate the result of the operation selected in the dropdown. ex: not equals will return all the records where the value of the column is not equal to the value entered in the input field.\nSort​\n\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\nExport table​\n\nTo export the table data, click on the Export table button on top. The selected table data will be exported to a JSON file.\n\nAdd new row​\n\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\nEdit row​\n\nTo edit the rows from the ToolJet database dashboard, click on the Edit row button. A drawer will open from the right from where first you need to select the id of the row to be edited from the dropdown and then you can edit the cell values of the selected row.\n\nDelete records​\n\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\nDelete column​\n\nTo delete a particular column, just click on the column header and the delete button will appear, click on it to delete the column.\n\nEdit table​\n\nTo edit the table name, click on the three vertical dots icon on the right of the table name and then click on the Edit option. A drawer will open from the right from where you can edit the table name.\n\nDelete table​\n\nTo delete a table, click on the three vertical dots icon on the right of the table name and then click on the Delete option. A confirmation modal will appear, click on the Delete button to delete the table.\n\nQuerying data from the ToolJet database​\n\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\nGo to the query panel, and click on the +Add button to add a new query, and select ToolJet Database\n\nSelect the table that you want to query from the dropdown, choose an operation from the dropdown, and then enter the required parameters for the selected operation. Click on the Run button to execute the query.\n\nINFO\nPreview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed as JSON or Raw.\nWhen a new query is created, by default the query name is set to tooljetdbN (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\nAvailable operations​\nList rows​\n\nThis operation returns all the records from the table\n\nOptional parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records.\nSort: Sort the query response by choosing a column and the order (ascending or descending).\nLimit: Limit the number of records to be returned by entering a number.\nCreate row​\n\nThis operation creates a new record in the table. You can create a single record or multiple records at once.\n\nRequired parameters​\nColumns: Choose the columns for which you want to add values for the new record and enter the values for the selected columns. You can also add a new column by clicking on the +Add column button.\nUpdate row​\n\nThis operation updates a record in the table. You can update a single record or multiple records at once.\n\nRequired parameter​\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\nColumns: Choose the columns for which you want to update the values for the selected record and enter the values for the selected columns.\nDelete row​\n\nThis operation deletes a record in the table. You can delete a single record or multiple records at once.\n\nRequired parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\nLimit: Limit the number of records to be deleted by entering a number.\nINFO\n\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community\n\nEdit this page\nPrevious\nLicensing\nNext\nCopilot\nEnabling the ToolJet Database for your instance\nPostgREST server\nFeatures\nAccessing ToolJet Database\nDatabase Editor\nCreate New Table\nSearch Table\nAdd column\nFilter\nSort\nExport table\nAdd new row\nEdit row\nDelete records\nDelete column\nEdit table\nDelete table\nQuerying data from the ToolJet database\nAvailable operations\nList rows\nCreate row\nUpdate row\nDelete row"
  },
  {
    "title": "Setup ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/setup/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSetup\nVersion: 2.16.0\nSetup ToolJet\n\nCheck out the different methods you can use to deploy ToolJet on your machine\n\nTry ToolJet\n\nTry out ToolJet with single docker command\n\nDigitalOcean\n\nQuickly deploy ToolJet using the Deploy to DigitalOcean button\n\nDocker\n\nDeploy ToolJet on a server using docker-compose\n\nAWS EC2\n\nDeploy ToolJet on AWS EC2 instances\n\nAWS ECS\n\nDeploy ToolJet on AWS ECS instances\n\nOpenshift\n\nDeploy ToolJet on Openshift\n\nHelm\n\nDeploy ToolJet with Helm Chart\n\nKubernetes\n\nDeploy ToolJet on a Kubernetes cluster\n\nKubernetes (GKE)\n\nDeploy ToolJet on a GKE Kubernetes cluster\n\nKubernetes (AKS)\n\nDeploy ToolJet on a AKS Kubernetes cluster\n\nAzure container apps\n\nDeploy ToolJet on a Azure Container Apps\n\nGoogle Cloud Run\n\nDeploy ToolJet on Cloud Run with GCloud CLI\n\nDeploying ToolJet client\n\nDeploy ToolJet Client on static website hosting services\n\nEnvironment variables\n\nEnvironment variables required by ToolJet Client and Server to start running\n\nConnecting via HTTP proxy\n\nEnvironment variables required by ToolJet to connect via HTTP proxy\n\nDeploying ToolJet on a subpath\n\nSteps to deploy ToolJet on a subpath rather than root of domain\n\nV2 migration guide\n\nThings to know before migrating to ToolJet V2\n\nEdit this page\nPrevious\nGetting Started\nNext\nTry ToolJet"
  },
  {
    "title": "Licensing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/licensing/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nLicensing\nVersion: 2.16.0\nLicensing\nAvailable on: Paid plans\nSetting up for Licensing​\n\nThis comprehensive guide aims to assist you in the process of configuring paid plans on your self-hosted platform. We offer three different licenses tailored to your specific requirements. Let's explore how to get the most out of ToolJet's powerful features! 🚀\n\nLet's look into three types of licenses:\n\nTrial License: This is a free license that grants access to premium features for a 14-day trial period. In order to get this, please reach out to our team.\nBusiness License: This is a paid license that you can purchase directly.\nEnterprise License: This is a paid license with customizable options. To obtain this license, you have to contact our sales team.\n\nAfter selecting the appropriate license that aligns with your needs, the next step is to proceed with the purchase. Once you have completed the onboarding process, we will generate a unique license key specifically tailored to your chosen specifications. Keep reading to gain a more comprehensive understanding of this process.\n\nTo update your trial license key, please follow these steps:\n\nSet up the instance and log in as a Super Admin.\nNavigate to the instance settings page.\nIn the license key tab, make the necessary updates to the provided license key.\nWithin the license tab of the instance settings page, you can access the limit tab, which displays the current status of available super admins, builders, and end users.\nNOTE\n\nThe trial license key will be valid for 14 days. To fully enjoy ToolJet, we recommend upgrading to premium plans within this period. If you wish to upgrade from the trial to the business or enterprise edition, you can click the Upgrade or Renew button or contact our team via Slack. Upon expiration, access to premium features like OpenID SSO login and Audit logs will be restricted, ensuring no data loss occurs. However, don't worry! You can still upgrade to any of our premium plans and enjoy the benefits of ToolJet.\n\nRef: Screenshot to update license key\n\nA) Chosen Plan: Business Plan​\n\nIf you decide to proceed with the Business Plan and have made the purchase, please wait for our team to get back to you within 24-48 hours to get you onboarded.\n\nTo update the business license key, follow these steps:\n\nLog in as a Super Admin, ensuring that you are on the correct instance URL.\nGo to the instance settings page.\nIn the license key tab, update the provided license key.\nWithin the license tab of the instance settings page, you can access the limit tab, which provides details about available super admins, builders, and end users.\nNOTE\n\nAs a super admin, you can conveniently view the remaining days of your enterprise edition period on the dashboard. (Refer to screenshots below)\n\nIMPORTANT\n\nThe business license key will be valid for 3 months only. You can renew it to continue using ToolJet to its fullest potential.\n\nB) Chosen Plan: Enterprise Plan​\n\nIf you choose to move forward with the Enterprise Plan and have completed the purchase process with our sales team, kindly anticipate a response from our team within 24-48 hours to facilitate your onboarding process.\n\nTo update the enterprise license key, follow these steps:\n\nLog in as a Super Admin, ensuring that you are on the correct instance URL.\nGo to the instance settings page.\nIn the license key tab, update the provided license key.\nWithin the license tab of the instance settings page, you can access the limit tab, which provides details about available super admins, builders, and end users.\nNOTE\n\nAs a super admin, you can conveniently view the remaining days of your enterprise edition period on the dashboard.\n\nFrequently Asked Questions (FAQs)​\n1) How can I upgrade or renew my license?​\n\nIf your business or enterprise edition license key is nearing expiration, please click the Upgrade or Renew button or contact us via email at hello@tooljet.com to obtain an extended license key. If you intend to increase the number of users, please reach out to us via Slack or review our pricing page at https://www.tooljet.com/pricing before making a request.\n\nRef: Screenshot addressing upgrade/renew CTAs. Note that there are a couple of other pages which will display banners or CTAs, from where you can upgrade/renew.\n\n2) What happens if my license expires?​\n\nIf your business or enterprise license key expires, your instance will revert to operating as a free plan. While you can still create unlimited apps, workspaces, and add users, premium features such as OpenID and Audit logs will no longer be accessible. For further information, please refer to the relevant plans.\n\n3) How can I add more users?​\n\nThere are different methods to do this:\n\na) You can renew directly using the business plan. (Note: Please do check the list of premium features available with this plan)\n\nb) You can directly reach out to us via Slack or email and we will be happy to provide you the support.\n\nLastly, please keep in mind that your license key is private and strictly prohibited from being shared with any third parties.\n\nEdit this page\nPrevious\nV2 migration guide\nNext\nToolJet Database\nSetting up for Licensing\nA) Chosen Plan: Business Plan\nB) Chosen Plan: Enterprise Plan\nFrequently Asked Questions (FAQs)\n1) How can I upgrade or renew my license?\n2) What happens if my license expires?\n3) How can I add more users?"
  },
  {
    "title": "Copilot | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/tooljet-copilot/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nCopilot\nVersion: 2.16.0\nCopilot\nAvailable on: Paid plans\nBETA\n\nToolJet Copilot is currently in private beta for Business and Enterprise users only.\n\nToolJet Copilot helps you write your queries faster. It uses OpenAI to suggest queries based on your data.\n\nActivating Copilot​\n\nTo gain access to Copilot, all users, including administrators, can individually sign up for the waitlist program. Upon successful sign up, each user will be issued a distinctive API key linked to their account. However, the exclusive authority to activate Copilot within the workspace settings lies solely with administrators. Administrators can proceed to the Copilot section in the workspace settings, where they can utilize their respective API key to set the \"Enable Copilot\" toggle option.\n\nYou can join the waitlist here: https://tooljet.com/copilot\n\nINFO\nCopilot can be used by users who have permissions to edit the app with the copilot setup.\nUsing Copilot​\n\nOnce activated, the Copilot feature can be accessed while editing any query within the transformations section in the query editor.\n\nCopilot's functionality relies on the provision of clear and concise plain English prompts. It possesses the capability to interact with and retrieve information from various components, enabling it to generate code specific to the desired actions associated with those components. This capability is facilitated by Copilot's comprehensive understanding of the application's present state.\n\nToken Limit per Workspace​\n\nA token is a unit of text that language models like ChatGPT process, such as a word or a character. To ensure fair usage and resource allocation among workspaces, a token limit is implemented. Currently, the token limit is set to 400. If the token limit is surpassed, the request is declined with the message \"Unable to process request. Max tokens exceeded.\"\n\nRate-Limiting​\n\nTo prevent abuse or excessive usage of the Copilot API, rate-limiting measures are in place. The following rules apply:\n\nEach user is restricted to a maximum number of requests within a specific time frame.\nThe current rate limit allows for 100 requests per minute per user.\nIf a user surpasses the rate limit, subsequent requests from that user will be rejected.\nINFO\n\nWhen generating an API key, if a workspace has 5 editors, the daily request limit will be 500 (100 requests per editor). Even if the workspace later expands to 10 editors after a week, the maximum number of requests allowed per day will still be 500.\n\nExample: Generating a SQL statement​\n\nThis example demonstrates the usage of copilot by generating a SQL query to fetch the order details from a PostgreSQL database based on the key provided in the REST API data.\n\nCreate a RESTAPI query using this mock api endpoint: https://fakestoreapi.com/users/1\nEnable transformation on the query editor\n\nTo generate a SQL query using Copilot, first enter the desired prompt within comments in the transformations code editor. Once the prompt has been entered, simply click the Generate Code button, and Copilot will generate the corresponding SQL query.\n\nAssuming that a PostgreSQL data source is already connected and there are two tables in it, namely customer and orders, enter the provided prompt in the code editor:\n\n/*\nAssume the data is an object which has email key.\nassume we have a database with two tables: \"customer\" and \"orders.\" The \"customer\" table has columns such as \"customer_id,\" \"customer_name,\" and \"country.\" The \"orders\" table has columns such as \"order_id,\" \"customer_id,\" \"order_date,\" and \"total_amount.\"\nreturn a SQL query to retrieve the total order amounts for customers from the email key retrieved from the data, who have placed more than three orders.*/\n\n\nClick on the \"Generate Code\" button to generate the SQL query.\n\nOnce the code is generated, add a return statement below the code to return the generated SQL query. The variable name for the query might be different in your generated code.\n\nreturn query //the variable might be different in your generated code\n\n\nPreview the returned SQL statement in the preview block to check if it is correct. Then click on the \"Run\" button to trigger the query.\n\nOnce the query is executed, create a new PostgreSQL query in SQL mode and use JavaScript to get the data query data dynamically:\n\n{{queries.restapi1.data}}\n\nCAUTION\n\nWhile using ToolJet Copilot, it is important to note that the accuracy of the output cannot be guaranteed by the platform. Ultimately, it is your responsibility to assess and evaluate any query before executing it.\n\nIf you have feedback or questions about ToolJet Copilot, feel free to join our slack community.\n\nEdit this page\nPrevious\nToolJet Database\nNext\nOverview\nActivating Copilot\nUsing Copilot\nToken Limit per Workspace\nRate-Limiting\nExample: Generating a SQL statement"
  },
  {
    "title": "Tracking | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/tracking/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nTracking\nVersion: 2.17.0\nTracking\nTIP\n\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n\nServer​\nTIP\n\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of CHECK_FOR_UPDATES environment variable to 0. This feature is enabled by default.\n\nClient​\n\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.\n\nTracking can be disabled by setting the value environment variable ENABLE_TRACKING to 0.\n\nEdit this page\nPrevious\nSecurity\nServer\nClient"
  },
  {
    "title": "Security | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/security/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSecurity\nVersion: 2.17.0\nSecurity\nUncompromised Data Security with SOC 2 Compliance​\n\nWith SOC 2 compliance, Tooljet ensures the highest level of data security. The adherence to SOC 2 standards mirrors the rigorous data protection measures in place, covering everything from encryption to robust access controls. It also guarantees a consistent level of service availability and process integrity, instilling confidence in our customers and stakeholders about the safe handling of their sensitive information.\n\nData storage​\n\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\n\nDatasource credentials​\n\nAll the datasource credentials are securely encrypted using aes-256-gcm. The credentials are never exposed to the frontend ( ToolJet client ).\n\nOther security features​\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n\nIf you notice a security vulnerability, please let the team know by sending an email to security@tooljet.com.\n\nEdit this page\nPrevious\nSlack Code of Conduct\nNext\nTracking\nUncompromised Data Security with SOC 2 Compliance\nData storage\nDatasource credentials\nOther security features"
  },
  {
    "title": "Slack Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/contributing-guide/slackcoc/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideSlack Code of Conduct\nVersion: 2.17.0\nSlack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction​\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities — online and in-person— as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\nExpected behavior​\nBe welcoming.\nBe kind.\nLook out for each other.\nUnacceptable Behavior​\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\nWhere does the Code of Conduct apply?​\n\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\n\nIn addition, violations of this code outside our spaces may affect a person’s ability to participate in them.\n\nEnforcement​\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\nINFO\n\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n\nEtiquettes to follow​\n1. Be nice to everyone​\n2. Check off your resolved questions​\n\nIf you have received a useful reply to your question, please drop a ✅ reaction or a reply for affirmation.\n\n3. Try not to repost question​\n\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n\n4. Post in public​\n\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n\n5. Don't spam tags​\n\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n\n6. Use threads for discussion​\n\nTo keep the main channel area clear, we request to use threads to keep an ongoing conversation organized.\n\nEdit this page\nPrevious\nContributor Code of Conduct\nNext\nSecurity\nIntroduction\nExpected behavior\nUnacceptable Behavior\nWhere does the Code of Conduct apply?\nEnforcement\nEtiquettes to follow"
  },
  {
    "title": "Contributor Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/contributing-guide/code-of-conduct/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideContributor Code of Conduct\nVersion: 2.17.0\nContributor Covenant Code of Conduct\nOur Pledge​\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nOur Standards​\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nOur Responsibilities​\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nScope​\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nEnforcement​\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@tooljet.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\nAttribution​\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n\nEdit this page\nPrevious\nRunPy limitations\nNext\nSlack Code of Conduct\nOur Pledge\nOur Standards\nOur Responsibilities\nScope\nEnforcement\nAttribution"
  },
  {
    "title": "Localization | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/contributing-guide/l10n/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideLocalization\nVersion: 2.17.0\nLocalization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\nAdding Translations​\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n\n\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. fr is the language code for French.\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Français\" }\n    ]\n}\n\nNOTE\n\nFeel free to reach us on Slack for any help related to Localization.\n\nEdit this page\nPrevious\nTesting\nNext\nEsLint\nAdding Translations"
  },
  {
    "title": "Testing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/contributing-guide/testing/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideTesting\nVersion: 2.17.0\nTesting\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\nSetting up​\nNavigate to the cypress-tests directory and enter the following command:\nnpm install\n\nRunning Tests​\nHeaded mode​\n\nTo run cypress in headed mode, run the following command:\n\nnpm run cy:open\n\n\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\nHeadless mode​\n\nTo run cypress in headless mode, run the following command:\n\nnpm run cy:run\n\n\nFor running specific spec in headless mode, run for specific spec\n\nnpm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js\n\nCAUTION\n\nIf some test specs need the environment variables, the user can pass them similar to the following command:\n\nnpm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'\n\n\nor the user can add env-vars in the cypress.config.js file\n\nINFO\n\nCheck all the Cypress commands here\n\nEdit this page\nPrevious\nToolJet CLI\nNext\nLocalization\nSetting up\nRunning Tests"
  },
  {
    "title": "ToolJet CLI | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/tooljet-cli/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideToolJet CLI\nVersion: 2.17.0\nToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\nINFO\n\nStarting from ToolJet CLI version 0.0.14, the creation of datasource plugins has been deprecated to prioritise marketplace plugins. This change enhances the plugin development experience and aligns with ToolJet's roadmap.\n\nInstallation​\n\nIn order to manage plugins for the ToolJet marketplace, including creating, updating, and deleting, you will need to utilize tooljet-cli. This can be installed via npm by entering the following command:\n\nnpm install -g @tooljet/cli\n\nEnsure the installation was successful​\ntooljet --version\n\nCommands​\ninfo​\n\nThis command returns the information about where tooljet is being run\n\ntooljet info\n\ncreate​\n\nThis command creates a new plugin.\n\ntooljet plugin create PLUGIN_NAME\n\nTIP\n\nRead the detailed guide on creating a marketplace plugin here.\n\ndelete​\n\nThis command deletes a plugin.\n\ntooljet plugin delete PLUGIN_NAME\n\n\nThe CLI will prompt developers to verify if the plugin to be deleted is a marketplace plugin before proceeding with the deletion.\n\ninstall​\n\nInstalls a new npm module inside a tooljet plugin\n\ntooljet plugin install [NPM_MODULE] --plugin <value>\n\nEdit this page\nPrevious\nMarketplace: Creating plugins\nNext\nTesting\nInstallation\nCommands\ninfo\ncreate\ndelete\ninstall"
  },
  {
    "title": "Architecture | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/contributing-guide/setup/architecture/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideArchitecture\nVersion: 2.17.0\nIntroduction\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n1. ToolJet Server​\n\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more.\n\nDependencies:\n\nPostgreSQL - ToolJet server persists data to a postgres database.\nEmail service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.\nPostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client​\n\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\n\nRequirements​\nNode version 18.3.0\nnpm version 8.11.0\nEdit this page\nPrevious\nContributing Guide\nNext\nGitHub Codespaces\n1. ToolJet Server\n2. ToolJet Client\nRequirements"
  },
  {
    "title": "Contributing Guide | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/category/contributing-guide/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing Guide\nVersion: 2.17.0\nContributing Guide\n\nGuides for contributing to ToolJet\n\n📄️ Architecture\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n🗃️ Setup\n\n5 items\n\n🗃️ Marketplace\n\n2 items\n\n📄️ ToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\n📄️ Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\n📄️ Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\n🗃️ Troubleshooting\n\n2 items\n\n📄️ Contributor Code of Conduct\n\nOur Pledge\n\n📄️ Slack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nPrevious\nLoading image/PDF from base64 string\nNext\nArchitecture"
  },
  {
    "title": "Dashboard | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/dashboard/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nDashboard\nVersion: 2.17.0\nDashboard\n\nThe ToolJet Dashboard is the initial landing page that you see upon logging into your workspace. This interface serves as a central hub where you can access a variety of features. Primarily, it displays all the applications you've created within ToolJet. Moreover, you have the capability to create new workspaces and applications directly from this dashboard. Additionally, it provides an option to create folders for categorizing and managing applications for easier organization, access control, and workflow management.\n\nFurthermore, the dashboard serves as a gateway to various essential sections, such as Workflows, ToolJet Database, Data Sources, Marketplace, Workspace Settings, Instance Settings, and Audit logs. You can effortlessly navigate to these sections directly from the dashboard.\n\nWorkspace Manager​\n\nThe workspace manager is located on the top left corner of the dashboard. Clicking on the workspace manager will open a dropdown menu with a list of all the workspaces you are a part of. You can switch between workspaces by clicking on the workspace name from the dropdown menu.\n\nYou can also create a new workspace by clicking on the Add new workspace button on the bottom of the dropdown menu. Clicking on this button will open a modal, enter the name of the workspace and click on the Create Workspace button to create a new workspace. Workspaces can be renamed by clicking on the edit icon on the right side of the workspace name.\n\nCreate a new app​\n\nTo create a new app, click on the Create new app button on the top left corner of the dashboard. Clicking on this button will instantly create a new app and open the app builder.\n\n\n\n\nThere are three dots on the right side of the Create new app button. Clicking on these dots will open a dropdown menu with two options:\n\nChoose from templates​\n\nThis option will open a modal with a list of pre-built templates. You can choose any template from this list to create a new app.\n\nImport​\n\nThis option will open a file picker to import a JSON file. This JSON file should be the app exported from ToolJet.\n\nImporting app connected to marketplace plugins​\n\nWhen importing an app with marketplace plugins, the marketplace plugin should be installed in the tooljet workspace where the app is being imported. If the marketplace plugin is not installed, the app will be imported without the queries for that plugin.\n\nWhen marketplace plugin is installed​\n\nIf marketplace plugin is installed in the tooljet workspace where the app is being imported, the queries connected to the marketplace plugin will be available in the imported application. The queries will be linked to the data source with the same name if it is already present. If the data source is not present, a new data source will be created of that marketplace plugin and linked to the queries.\n\nWhen marketplace plugin is not installed​\n\nIf you have an app with a query linked to a marketplace plugin, and you import that app in a tooljet workspace where the marketplace plugin is not installed as the data source, the queries will be not be available in the imported application.\n\nImporting app connected to tooljet table​\n\nWhen the app(JSON file) that includes the table schema is imported, and the table is not present in the tooljet database of the workspace where the app is being imported, a new table will be created in the tooljet database with the same name as the table in the imported app.\n\nIf the table with the same name is already present in the workspace, the new table will be created with the name <table name>_<unix timestamp>. Example: <tablename>_1627980000.\n\nCreate a new folder​\n\nFolders can be created to organize your apps. To create a new folder, click on the + button on the left drawer of the dashboard. Clicking on this button will open a modal, enter the name of the folder and click on the Create Folder button to create a new folder.\n\nDelete or Edit Folder​\n\nA folder can be deleted or renamed. To delete or rename a folder, click on the kebab menu on the right side of the folder name. Clicking on kebab menu will open a dropdown menu with two options:\n\nEdit folder: This option will open a modal, enter the new name of the folder and click on the Edit button to rename the folder.\nDelete folder: This option will open a confirmation modal to delete the folder. Click on the Delete button to delete the folder.\nSearch folders​\n\nFolders can be searched by clicking on the search icon on the left drawer of the dashboard. Clicking on the search icon will open a search bar, enter the name of the folder to search.\n\nApp cards​\n\nThe dashboard displays all the apps created in the workspace as cards. These cards are displayed in a grid layout. The app cards display the name of the app, the name of the creator, and the date of creation. The app cards also display the app icon, which can be changed by clicking on the Change Icon option from the app menu.\n\nApp menu​\n\nThe app menu is located on the top right corner of the app card. Clicking on the app menu will open a dropdown menu with a list of options. These options are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nChange Icon​\n\nThis option will open a modal with a list of icons. You can choose any icon from this list to change the app icon.\n\nAdd to folder​\n\nThis option will open a modal with a list of folders. You can choose any folder from this list to add the app to the folder.\n\nClone app​\n\nSelecting this option will immediately open the cloned app in the app builder with the same configuration as the original app. The new app will be named as <original app name> followed by unix timestamp. Example: <original app name> 1627980000.\n\nExport app​\n\nThis option will download a JSON file of the application. This JSON file can be imported to ToolJet to create a new app. The exported app will include all the queries connected to global data sources including the data source created from Marketplace plugins.\n\nThis option allows you to select a specific version of the app to export or export all the versions of the app. To export a specific version of the app, select a version from the list of available versions in the modal and click on the Export selected version and to export all the versions of the app, click on the Export All button.\n\nExport ToolJet table schema​\n\nSelecting this option will inclue the schema of the tooljet table connected to that application in the exported JSON file. This option is available for all the apps on ToolJet however only the apps with a tooljet table connected(includes tjdb query) will have the schema included in the exported JSON file.\n\nThis JSON file can be used to import the application to ToolJet along with the table schema that was connected to the application.\n\nDelete app​\n\nThis option will open a confirmation modal to delete the app. Click on the Delete button to delete the app.\n\nApp search​\n\nApps can be searched by clicking on the search bar on the center of the dashboard. Click on the search bar and enter the name of the app to search.\n\nCurrent ToolJet Version​\n\nThe current version of ToolJet is displayed on the top right corner of the dashboard.\n\nEdit this page\nPrevious\nControl component (Component Specific Actions)\nNext\nOverview\nWorkspace Manager\nCreate a new app\nChoose from templates\nImport\nImporting app connected to marketplace plugins\nImporting app connected to tooljet table\nCreate a new folder\nDelete or Edit Folder\nSearch folders\nApp cards\nApp menu\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nApp search\nCurrent ToolJet Version"
  },
  {
    "title": "Copilot | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/tooljet-copilot/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nCopilot\nVersion: 2.17.0\nCopilot\nAvailable on: Paid plans\nBETA\n\nToolJet Copilot is currently in private beta for Business and Enterprise users only.\n\nToolJet Copilot helps you write your queries faster. It uses OpenAI to suggest queries based on your data.\n\nActivating Copilot​\n\nTo gain access to Copilot, all users, including administrators, can individually sign up for the waitlist program. Upon successful sign up, each user will be issued a distinctive API key linked to their account. However, the exclusive authority to activate Copilot within the workspace settings lies solely with administrators. Administrators can proceed to the Copilot section in the workspace settings, where they can utilize their respective API key to set the \"Enable Copilot\" toggle option.\n\nYou can join the waitlist here: https://tooljet.com/copilot\n\nINFO\nCopilot can be used by users who have permissions to edit the app with the copilot setup.\nUsing Copilot​\n\nOnce activated, the Copilot feature can be accessed while editing any query within the transformations section in the query editor.\n\nCopilot's functionality relies on the provision of clear and concise plain English prompts. It possesses the capability to interact with and retrieve information from various components, enabling it to generate code specific to the desired actions associated with those components. This capability is facilitated by Copilot's comprehensive understanding of the application's present state.\n\nToken Limit per Workspace​\n\nA token is a unit of text that language models like ChatGPT process, such as a word or a character. To ensure fair usage and resource allocation among workspaces, a token limit is implemented. Currently, the token limit is set to 400. If the token limit is surpassed, the request is declined with the message \"Unable to process request. Max tokens exceeded.\"\n\nRate-Limiting​\n\nTo prevent abuse or excessive usage of the Copilot API, rate-limiting measures are in place. The following rules apply:\n\nEach user is restricted to a maximum number of requests within a specific time frame.\nThe current rate limit allows for 100 requests per minute per user.\nIf a user surpasses the rate limit, subsequent requests from that user will be rejected.\nINFO\n\nWhen generating an API key, if a workspace has 5 editors, the daily request limit will be 500 (100 requests per editor). Even if the workspace later expands to 10 editors after a week, the maximum number of requests allowed per day will still be 500.\n\nExample: Generating a SQL statement​\n\nThis example demonstrates the usage of copilot by generating a SQL query to fetch the order details from a PostgreSQL database based on the key provided in the REST API data.\n\nCreate a RESTAPI query using this mock api endpoint: https://fakestoreapi.com/users/1\nEnable transformation on the query editor\n\nTo generate a SQL query using Copilot, first enter the desired prompt within comments in the transformations code editor. Once the prompt has been entered, simply click the Generate Code button, and Copilot will generate the corresponding SQL query.\n\nAssuming that a PostgreSQL data source is already connected and there are two tables in it, namely customer and orders, enter the provided prompt in the code editor:\n\n/*\nAssume the data is an object which has email key.\nassume we have a database with two tables: \"customer\" and \"orders.\" The \"customer\" table has columns such as \"customer_id,\" \"customer_name,\" and \"country.\" The \"orders\" table has columns such as \"order_id,\" \"customer_id,\" \"order_date,\" and \"total_amount.\"\nreturn a SQL query to retrieve the total order amounts for customers from the email key retrieved from the data, who have placed more than three orders.*/\n\n\nClick on the \"Generate Code\" button to generate the SQL query.\n\nOnce the code is generated, add a return statement below the code to return the generated SQL query. The variable name for the query might be different in your generated code.\n\nreturn query //the variable might be different in your generated code\n\n\nPreview the returned SQL statement in the preview block to check if it is correct. Then click on the \"Run\" button to trigger the query.\n\nOnce the query is executed, create a new PostgreSQL query in SQL mode and use JavaScript to get the data query data dynamically:\n\n{{queries.restapi1.data}}\n\nCAUTION\n\nWhile using ToolJet Copilot, it is important to note that the accuracy of the output cannot be guaranteed by the platform. Ultimately, it is your responsibility to assess and evaluate any query before executing it.\n\nIf you have feedback or questions about ToolJet Copilot, feel free to join our slack community.\n\nEdit this page\nPrevious\nToolJet Database\nNext\nOverview\nActivating Copilot\nUsing Copilot\nToken Limit per Workspace\nRate-Limiting\nExample: Generating a SQL statement"
  },
  {
    "title": "Marketplace | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/category/marketplace/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nMarketplace\nVersion: 2.17.0\nMarketplace\n📄️ Marketplace : Overview\n\nWith ToolJet Marketplace, ToolJet users can conveniently add custom plugins (datasources) to their workspaces. This feature enables users to create plugins that cater to their specific needs and integrate them seamlessly with ToolJet.\n\n🗃️ Marketplace Plugins\n\n5 items\n\nPrevious\nVersioning and Release\nNext\nMarketplace : Overview"
  },
  {
    "title": "ToolJet Database | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/tooljet-database/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nToolJet Database\nVersion: 2.17.0\nToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\nEnabling the ToolJet Database for your instance​\n\nRequires:\n\nPostgREST server\nAdditional configuration for ToolJet server\n\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to true.\n\nPostgREST server​\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n\nTIP\n\nIf you have openssl installed, you can run the following command openssl rand -hex 32 to generate the value for PGRST_JWT_SECRET.\n\nIf this parameter is not specified then PostgREST refuses authentication requests.\n\nvariable\tdescription\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_DB_URI\tdatabase connection string for tooljet database\nPGRST_LOG_LEVEL\tinfo\nINFO\n\nPlease make sure that DB_URI is given in the format postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]\n\nAdditional ToolJet server configuration​\nvariable\tdescription\nENABLE_TOOLJET_DB\ttrue or false\nTOOLJET_DB\tDefault value is tooljet_db\nTOOLJET_DB_HOST\tdatabase host\nTOOLJET_DB_USER\tdatabase username\nTOOLJET_DB_PASS\tdatabase password\nTOOLJET_DB_PORT\tdatabase port\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_HOST\tpostgrest database host\n\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n\nTIP\n\nWhen this feature is enabled, the database name provided for TOOLJET_DB will be utilized to create a new database during server boot process in all of our production deploy setups. Incase you want to trigger it manually, use the command npm run db:create on ToolJet server.\n\nFeatures​\n\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\nExport table from the ToolJet Database to a JSON file.\nAccessing ToolJet Database​\n\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\n\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\nDatabase Editor​\n\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\nCreate New Table​\n\nFor creating a new table in ToolJet Database, click on the Create New Table button on the top left corner of the Database editor.\n\nWhen the Create New Table button is clicked, a drawer opens up from the right from where you can enter the details of your new table.\n\nFor creating a new table, you'll need to:​\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\nSupported data types​\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\n\nClick on Create button to create a new table.\n\nSearch Table​\n\nYou can enter a search term to search through all tables in the database.\n\nAdd column​\n\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\n\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n\nColumn name: name of the column (key)\nData type: Check available data types here\nDefault Value Any default value for the column (not mandatory)\nFilter​\n\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\n\nAdding a filter on the table data​\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\nAvailable operations are:​\nequals: This operation is used to check if the value of the column is equal to the value entered in the input field.\ngreater than: This operation is used to check if the value of the column is greater than the value entered in the input field.\ngreater than or equal: This operation is used to check if the value of the column is greater than or equal to the value entered in the input field.\nless than: This operation is used to check if the value of the column is less than the value entered in the input field.\nless than or equal: This operation is used to check if the value of the column is less than or equal to the value entered in the input field.\nnot equal: This operation is used to check if the value of the column is not equal to the value entered in the input field.\nlike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nilike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. ex: ToolJet will match tooljet\nmatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nimatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nin: This operation is used to check if the value of the column is in the list of values entered in the input field. ex: 1,2,3\ncontains: This operation is used to check if the value of the column contains the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\ncontained: This operation is used to check if the value of the column is contained in the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nnot: This operation is used to negate the result of the operation selected in the dropdown. ex: not equals will return all the records where the value of the column is not equal to the value entered in the input field.\nSort​\n\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\nExport table​\n\nTo export the table data, click on the Export table button on top. The selected table data will be exported to a JSON file.\n\nAdd new row​\n\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\nEdit row​\n\nTo edit the rows from the ToolJet database dashboard, click on the Edit row button. A drawer will open from the right from where first you need to select the id of the row to be edited from the dropdown and then you can edit the cell values of the selected row.\n\nDelete records​\n\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\nDelete column​\n\nTo delete a particular column, just click on the column header and the delete button will appear, click on it to delete the column.\n\nEdit table​\n\nTo edit the table name, click on the three vertical dots icon on the right of the table name and then click on the Edit option. A drawer will open from the right from where you can edit the table name.\n\nDelete table​\n\nTo delete a table, click on the three vertical dots icon on the right of the table name and then click on the Delete option. A confirmation modal will appear, click on the Delete button to delete the table.\n\nQuerying data from the ToolJet database​\n\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\nGo to the query panel, and click on the +Add button to add a new query, and select ToolJet Database\n\nSelect the table that you want to query from the dropdown, choose an operation from the dropdown, and then enter the required parameters for the selected operation. Click on the Run button to execute the query.\n\nINFO\nPreview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed as JSON or Raw.\nWhen a new query is created, by default the query name is set to tooljetdbN (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\nAvailable operations​\nList rows​\n\nThis operation returns all the records from the table\n\nOptional parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records.\nSort: Sort the query response by choosing a column and the order (ascending or descending).\nLimit: Limit the number of records to be returned by entering a number.\nCreate row​\n\nThis operation creates a new record in the table. You can create a single record or multiple records at once.\n\nRequired parameters​\nColumns: Choose the columns for which you want to add values for the new record and enter the values for the selected columns. You can also add a new column by clicking on the +Add column button.\nUpdate row​\n\nThis operation updates a record in the table. You can update a single record or multiple records at once.\n\nRequired parameter​\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\nColumns: Choose the columns for which you want to update the values for the selected record and enter the values for the selected columns.\nDelete row​\n\nThis operation deletes a record in the table. You can delete a single record or multiple records at once.\n\nRequired parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\nLimit: Limit the number of records to be deleted by entering a number.\nINFO\n\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community\n\nEdit this page\nPrevious\nLicensing\nNext\nCopilot\nEnabling the ToolJet Database for your instance\nPostgREST server\nFeatures\nAccessing ToolJet Database\nDatabase Editor\nCreate New Table\nSearch Table\nAdd column\nFilter\nSort\nExport table\nAdd new row\nEdit row\nDelete records\nDelete column\nEdit table\nDelete table\nQuerying data from the ToolJet database\nAvailable operations\nList rows\nCreate row\nUpdate row\nDelete row"
  },
  {
    "title": "How To Guides | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/category/how-to/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nHow To\nVersion: 2.17.0\nHow To Guides\n\nHow To Guides for all the things ToolJet\n\n📄️ Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\n\n📄️ Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n📄️ Change text color in columns of the table\n\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\n📄️ Bulk update multiple rows in table\n\nCurrently, the data sources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query.\n\n📄️ Delete multiple rows in table\n\nThe table component in the ToolJet has the option for bulk selection of rows that can have various use cases such as updating or deleting records. However, the datasources does not support bulk delete or bulk update operations.\n\n📄️ Using server side pagination for efficient data handling in tables\n\nIn this guide we will learn how to use server side pagination in table component. This will be helpful if you have a large data set and you want to load data in chunks. This will also help you to improve the performance of your application. This guide will be helpful if you are using datasources like MySQL, PostgreSQL, MSSQL, MongoDB, etc. in which you can use limit and offset to fetch data in chunks. We have also included an example to load data from Google Sheets in chunks.\n\n📄️ Enable/Disable a component using current user's property\n\nLet's take look at the exposed variables of the current user property:\n\n📄️ Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\n\n📄️ Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query.\n\n📄️ Import external libraries using RunJS\n\nToolJet allows you to utilize external libraries in your app by importing them using the RunJS query.\n\n📄️ Run Actions from RunJS query\n\nNow you can trigger all the actions available in ToolJet from within the RunJS query. This guide includes the syntax for each action along with the example.\n\n📄️ Intentionally fail a RunJS query\n\nIn this how-to guide, we will create a RunJS query that will throw an error.\n\n📄️ Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\n📄️ Use the to_py() Function in RunPy: Converting JavaScript Objects to Python\n\nThis how-to guide will demonstrate the usage of to_py() function in RunPy queries for converting the JavaScript objects to Python.\n\n📄️ Access a user's location\n\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n\n📄️ Use S3 signed URL to upload documents\n\nIn this how-to guide, you'll learn to upload documents to S3 buckets using the S3 signed URL from a ToolJet application.\n\n📄️ Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage.\n\n📄️ Upload files on AWS S3 bucket\n\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\n\n📄️ Upload files using GCS\n\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\n\n📄️ Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\nPrevious\nPlivo\nNext\nUse Inspector"
  },
  {
    "title": "Managing Users and Groups | ToolJet",
    "url": "https://docs.tooljet.com/docs/tutorial/manage-users-groups/",
    "html": "Org ManagementManaging Users and Groups\nVersion: 2.27.0\nManaging Users and Groups\nManaging Users​\n\nAdmin of a workspace can add users to the workspace. To manage the users in your workspace, just go to the Workspace Settings from the left sidebar on the dashboard and click on the Users option.\n\nInviting users​\n\nAdmins can invite anyone to a workspace using the email address. To invite a user:\n\nOn the Users page click on the Add users button.\n\nA drawer from the right will open, navigate to the Invite with email tab. Fill in the required information for the new user, including their Full Name, Email address, and select the desired group(s) from the dropdown menu to assign them. Once you have entered all the details, proceed by clicking the Invite Users button.\n\nAn email including the Invite Link to join your workspace will be send to the created user. The status will turn from invited to active after the user successfully joins your workspace using the invite link.\n\nTIP\n\nYou can also copy the invitation url by clicking on the copy icon next to invited status of the created user.\n\nYou can also Bulk Invite Users by editing and uploading the sample CSV file including all the users details. Click on the Add users button and on the drawer, click on the Upload CSV file tab.\n\nDisabling a user's access​\n\nYou can disable any active user's access to your workspace by clicking on the Archive button and the status of the user will change from active to archived.\n\nEnabling a user's access​\n\nSimilar to archiving a user's access, you can enable it again by clicking on Unarchive. The status of user will change from archived to invited and the user will have to join again using the invite link received via the e-mail.\n\nManaging Groups​\n\nOn ToolJet, Admins and Super Admins can create groups for users added in a workspace and grant them access to particular app(s) with specific permissions. To manage groups, just go to the Workspace Settings from the left-sidebar of the dashboard and click on the Groups.\n\nGroup properties​\n\nEvery group on ToolJet has four sections:\n\nApps\nUsers\nPermissions\nData Sources\nApps:​\n\nAdmins and Super Admins can add or remove any number of apps for a group of users. To add an app to a group, select an app from the dropdown and click on Add button next to it. You can also set app permissions such as View or Edit for the group. You can set different permissions for different apps in a group.\n\nUsers:​\n\nAdmins and Super Admins can add or remove any numbers of users in a group. Just select a user from the dropdown and click on Add button to add it to a group. To delete a user from a group, click on Delete button next to it.\n\nPermissions:​\n\nAdmins and Super Admins can set granular permission for the users added in that particular group, such as:\n\nCreate and Delete Apps\nCreate, Update, and Delete Folders\nCreate, Update, and Delete Workspace Constants\nCreate and Delete Data Sources\nData Sources​\n\nOnly Admins and Super Admins can define what data sources can be viewed or edited by the users of that group.\n\nTIP\n\nAll the activities performed by any Admin, Super Admin or any user in a workspace is logged in Audit logs - including any activity related with managing users and groups.\n\nPredefined Groups​\n\nBy default, every workspace will have two User Groups:\n\n1. All Users\n\nThis group contains all the users and admins.\n\nApps\tUsers\tPermissions\nYou can add or remove apps.\tModification is disabled. This group will have all the users and admins added in a workspace.\tYou can edit permissions for all the users globally.\n\n2. Admin\n\nThis group contains admins by default. Admins can add more admins or remove the users in this group.\n\nApps\tUsers\tPermissions\nModification is disabled. By default, this group has Edit permission for all the apps in a workspace\tAdmins can add or remove users in this group.\tModification is disabled. By default, all the admins can create and delete apps or create folders.\nCreating new group (Paid plans only)​\n\nOption to create a new group is available in the paid plans only. To create a new group:\n\nClick on Create new group button in the Groups page.\n\nEnter a name for the group and click Create Group button.\n\nOnce the group is created, you can add Apps, Users and set their Permissions for that group.\n\nDeleting a group​\n\nTo delete a group, click on Delete next to it. It will confirm whether you want to delete it or not, Click on Yes to delete the group.\n\nEdit this page\nPrevious\nPermissions\nNext\nAudit logs\nManaging Users\nInviting users\nDisabling a user's access\nEnabling a user's access\nManaging Groups\nGroup properties\nPredefined Groups\nCreating new group (Paid plans only)\nDeleting a group"
  },
  {
    "title": "Overview | ToolJet",
    "url": "https://docs.tooljet.com/docs/widgets/overview/",
    "html": "Components CatalogOverview\nVersion: 2.27.0\nComponents: Overview\n\nComponents are used to build the UI of the applications. They can be dragged onto the canvas from the Component Library and can be modified from the Properties Panel without needing to write any code. Event Handlers in Components allow end users to trigger queries and other application events to perform the Actions.\n\nAdding components​\n\nComponents can be dragged and dropped from the Component Library(from the right side on app builder) on to the canvas. Components can be moved by simply click and hold, and can be resized from edges or borders.\n\nSelect multiple components​\n\nFor moving the multiple components at once, simply shift+click, to select multiple components. Once grouped, the components can be moved on the canvas while maintaining their relative positions.\n\nYou can also create a selection triangle and move multiple components together by click and drag\n\nTIP\n\nYou can also use many other Keyboard Shortcuts in ToolJet to copy, cut, paste components to the canvas.\n\nComponent properties​\n\nEach Component can be modified and styled from the Properties Panel such as the data field, a toggle for disabling the component, or stylings like a background color. Properties can be modified directly or programmatically by using Bindings, which enables you to write JavaScript code.\n\nComponent Event Handlers​\n\nEvent Handlers can be found in the Component's Property Panel or in the Advanced section of the Query. Event handlers can be used to trigger Actions such as executing the queries, perform Component Specific Actions(CSA) or for setting a variable.\n\nEvent handlers for components have the following properties:\n\nEvent: Each component has its own set of exclusive events. You can refer to the component reference to find the specific events available for each component. These events are triggered by user interactions or other actions within the application.\n\nAction: Actions are the operations that can be performed when an event is triggered. There is a comprehensive list of available actions, which can be found in the actions reference documentation. In addition to general actions, each component may also have its own set of Component Specific Actions (CSA) that are specific to that particular component. The CSA can be found in the respective component reference.\n\nRun Only If: The \"Run Only If\" property allows you to define a condition that must be satisfied before the event handler's action is executed. By specifying a condition, you can control the flow of execution and ensure that the action is only performed when the condition is met.\n\nUsing Run only if​\n\nWith this option in Event Handlers, users can specify a condition that must be met before the event handler's action is executed. This allows for more fine-grained control over when certain actions should be triggered in response to component events.\n\nFor example, let's consider a button component with an OnClick event handler. By specifying a \"Run Only If\" condition for the event handler, users can control when the associated action should be executed. Here's an example:\n\nButton Component\n  └─ OnClick Event Handler: runQuery()\n                      │\n                      ├─ Run Only If: expression/condition\n\n\nIn this case, the action runQuery() will only be triggered if the expression/condition is truthy. The expression/condition can utilize the values dynamically from other parts of the application or exposed variables.\n\nExample expressions:\n\n{{globals.currentUser.groups[1] === 'admin'}} // returns true if the current user is admin\n\nor\n\n{{components.form1.isValid}} // isValid holds the boolean value true or false\n\nBindings​\n\nBindings allow you to get dynamic data into the components. Anything inside of {{}} is evaluated as a JavaScript expression in ToolJet.\n\nAny arbitrary JavaScript code can be written inside {{}}:\n\n{{(function () {\n        <your_javascript_code_here>\n    })()\n}}\n\n\nor\n\n{{components.xyz.data.key === Sun ?? true : false}}\n\nTIP\n\nCheck out the How-to guides like changing color of text in table column, Enable/Disable a component using JavaScript, and more.\n\nEdit this page\nPrevious\nTransformations\nNext\nBounded Box\nAdding components\nSelect multiple components\nComponent properties\nComponent Event Handlers\nUsing Run only if\nBindings"
  },
  {
    "title": "Overview | ToolJet",
    "url": "https://docs.tooljet.com/docs/data-sources/overview/",
    "html": "Datasource CatalogOverview\nVersion: 2.27.0\nData Sources : Overview\n\nData Sources pull in and push data to any source including databases, external APIs, or services. Once a data source is connected to a workspace, the connection can be shared with any app of that workspace.\n\nCAUTION\n\nData Source page is available only on ToolJet version 2.3.0 and above.\n\nConnecting data sources​\n\nCreate a new app from the dashboard, and Click on the + Add new button from the query panel.\n\nOr you can directly go to the Data Sources page from the left sidebar of the dashboard\n\nWithin the Data Sources page, you'll find various categories of data sources on the left side, including Databases, APIs, Cloud Storages, and plugins. Click on each category to view the list of accessible data sources. As you hover over the desired data source, an Add button will appear. Upon clicking this button, the selected data source will be integrated into the workspace.\n\nOnce the data source is added, you'll be required to input the configuration details for establishing a connection.\n\nNote: For paid plans, configuration entry and saving are necessary to enable availability across multiple environments.\n\nReturning to the dashboard, proceed to generate a new application. The recently added data source will be accessible within the query panel under the Available data sources section. Data Sources that have been added can now be utilized in both existing applications and newly created applications.\n\nAt this point, you can create queries to the connected data sources. Within these queries, the option exists to switch between distinct connections associated with the same data source, in cases where multiple connections have been established.\n\nDefault data sources​\n\nBy default, 4 data sources will be available on every app on ToolJet:\n\nToolJet Database\nRestAPI\nRun JavaScript Query\nRun Python Query\nUser Permissions​\n\nChanging the Permissions for Data Sources is a privilege reserved for Admins and Super Admins within the workspace.\n\nTo configure these permissions, navigate to Workspace Settings -> Groups Settings. Admins and Super Admins have the authority to assign the following permissions to user groups:\n\n\n\nCreation and Deletion of data sources within the workspace​\nPermission\tDescription\nJust Create\tAdd new data sources and modify existing ones. Delete button will not be visible on hovering over the connected data source.\nJust Delete\tRemove connected data sources from the workspace. Delete button will show up on hovering over the connected data source.\nBoth Create and Delete\tAdd new data sources and remove connected data sources from the workspace.\nNiether Create nor Delete\tNo access to the Data Sources page from the Dashboard. Error toast will popup on trying to access the Data Sources page using URL.\n\n\nAuthorization to View or Edit permitted data sources from the data source page​\nPermission\tDescription\nView\tConnect to authorized data sources for their user group. Users can't update the credentials of authorized data sources.\nEdit\tUsers can update the credentials of authorized data sources.\n\n\nChanging scope of data sources on an app created on older versions of ToolJet​\n\nOn ToolJet versions below 2.3.0, the data source connection was made from within the individual apps. To make it backward compatible, we added an option to change the scope of the data sources and make it global data source.\n\nWhen dealing with apps that were created using ToolJet versions prior to 2.3.0, you will notice the presence of the data source manager in the left sidebar of the App Builder.\n\nTo change the scope, locate the kebab menu situated next to the connected data source. From this menu, select the change scope option.\n\nOnce you change the scope of the data source and make it global, you'll see that the data source manager is removed from the left sidebar and now you'll find the data source on the query panel under Global Data sources. You can now configure the data source from the Data Sources page on the dashboard.\n\nOnce you have successfully changed the scope of the data source, thereby transforming it into a global data source, you will observe that the data source manager from the left sidebar is removed. Subsequently, the data source will be accessible within the query panel under the Available data sources section. Now you can configure this data source from the Data Sources page located on the Dashboard.\n\nEdit this page\nPrevious\nCopilot\nNext\nAirtable\nConnecting data sources\nDefault data sources\nUser Permissions\nChanging scope of data sources on an app created on older versions of ToolJet"
  },
  {
    "title": "Licensing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/licensing/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nLicensing\nVersion: 2.17.0\nLicensing\nAvailable on: Paid plans\nSetting up for Licensing​\n\nThis comprehensive guide aims to assist you in the process of configuring paid plans on your self-hosted platform. We offer three different licenses tailored to your specific requirements. Let's explore how to get the most out of ToolJet's powerful features! 🚀\n\nLet's look into three types of licenses:\n\nTrial License: This is a free license that grants access to premium features for a 14-day trial period.\nNew Users: Choose the 14-day trial during onboarding.\nExisting Users: Request a trial license key from our sales or support team.\nBusiness License: This is a paid license that you can purchase directly.\nEnterprise License: This is a paid license with customizable options. To obtain this license, you have to contact our sales team.\nUpdating Your Trial License Key (For Existing Users)​\n\nIf you are an existing user and wish to update your trial license key, follow these steps:\n\nSet up the instance and log in as a Super Admin.\nNavigate to the instance settings page.\nIn the license key tab, make the necessary updates to the provided license key.\nWithin the license tab of the instance settings page, you can access the limit tab, which displays the current status of available super admins, builders, and end users.\nNOTE\n\nThe trial license key will be valid for 14 days. To fully enjoy ToolJet, we recommend upgrading to premium plans within this period. If you wish to upgrade from the trial to the business or enterprise edition, you can click the Upgrade or Renew button or contact our team via Slack. Upon expiration, access to premium features like OpenID SSO login and Audit logs will be restricted, ensuring no data loss occurs. However, don't worry! You can still upgrade to any of our premium plans and enjoy the benefits of ToolJet.\n\nRef: Screenshot to update license key\n\nPurchasing a Paid License​\n\nWhen you've identified the ideal paid license to meet your needs, the next step is to complete the purchase process, ensuring seamless access to premium features.\n\nA) Chosen Plan: Business Plan​\n\nIf you decide to proceed with the Business Plan and have made the purchase, please wait for our team to get back to you within 24-48 hours to get you onboarded.\n\nTo update the business license key, follow these steps:\n\nLog in as a Super Admin, ensuring that you are on the correct instance URL.\nGo to the instance settings page.\nIn the license key tab, update the provided license key.\nWithin the license tab of the instance settings page, you can access the limit tab, which provides details about available super admins, builders, and end users.\nNOTE\n\nAs a super admin, you can conveniently view the remaining days of your enterprise edition period on the dashboard. (Refer to screenshots below)\n\nIMPORTANT\n\nThe business license key will be valid for 3 months only. You can renew it to continue using ToolJet to its fullest potential.\n\nB) Chosen Plan: Enterprise Plan​\nIf you've selected the Enterprise Plan, expect a response from our team within 24-48 hours for onboarding.\nTo update the enterprise license key, follow the steps outlined previously.\nThe remaining days of your enterprise edition period can be conveniently viewed on the dashboard. (refer screenshots added above)\nNOTE\n\nAs a super admin, you can conveniently view the remaining days of your enterprise edition period on the dashboard.\n\nFrequently Asked Questions (FAQs)​\n1) How can I upgrade or renew my license?​\n\nIf your business or enterprise edition license key is nearing expiration, please click the Upgrade or Renew button or contact us via email at hello@tooljet.com to obtain an extended license key. If you intend to increase the number of users, please reach out to us via Slack or review our pricing page at https://www.tooljet.com/pricing before making a request.\n\nRef: Screenshot addressing upgrade/renew CTAs. Note that there are a couple of other pages which will display banners or CTAs, from where you can upgrade/renew.\n\n2) What is the duration of my license's validity?​\n\nIf you have an active license, you can find its validity period in the instance settings. Generally, the duration of your license varies based on the type:\n\nTrial licenses are valid for 14 days.\nBusiness licenses are valid for 3 months.\nEnterprise licenses can be customized to suit your needs.\n3) What happens if my license expires?​\n\nIf your business or enterprise license key expires, your instance will revert to operating as a free plan. While you can still create unlimited apps, workspaces, and add users, premium features such as OpenID and Audit logs will no longer be accessible. For further information, please refer to the relevant plans.\n\n4) How can I add more users?​\n\nThere are different methods to do this:\n\na) You can renew directly using the business plan. (Note: Please do check the list of premium features available with this plan)\n\nb) You can directly reach out to us via Slack or email and we will be happy to provide you the support.\n\nLastly, please keep in mind that your license key is private and strictly prohibited from being shared with any third parties.\n\nEdit this page\nPrevious\nV2 migration guide\nNext\nToolJet Database\nSetting up for Licensing\nUpdating Your Trial License Key (For Existing Users)\nPurchasing a Paid License\nA) Chosen Plan: Business Plan\nB) Chosen Plan: Enterprise Plan\nFrequently Asked Questions (FAQs)\n1) How can I upgrade or renew my license?\n2) What is the duration of my license's validity?\n3) What happens if my license expires?\n4) How can I add more users?"
  },
  {
    "title": "Setup ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/setup/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSetup\nVersion: 2.17.0\nSetup ToolJet\n\nCheck out the different methods you can use to deploy ToolJet on your machine\n\nTry ToolJet\n\nTry out ToolJet with single docker command\n\nDigitalOcean\n\nQuickly deploy ToolJet using the Deploy to DigitalOcean button\n\nDocker\n\nDeploy ToolJet on a server using docker-compose\n\nAWS EC2\n\nDeploy ToolJet on AWS EC2 instances\n\nAWS ECS\n\nDeploy ToolJet on AWS ECS instances\n\nOpenshift\n\nDeploy ToolJet on Openshift\n\nHelm\n\nDeploy ToolJet with Helm Chart\n\nKubernetes\n\nDeploy ToolJet on a Kubernetes cluster\n\nKubernetes (GKE)\n\nDeploy ToolJet on a GKE Kubernetes cluster\n\nKubernetes (AKS)\n\nDeploy ToolJet on a AKS Kubernetes cluster\n\nAzure container apps\n\nDeploy ToolJet on a Azure Container Apps\n\nGoogle Cloud Run\n\nDeploy ToolJet on Cloud Run with GCloud CLI\n\nDeploying ToolJet client\n\nDeploy ToolJet Client on static website hosting services\n\nEnvironment variables\n\nEnvironment variables required by ToolJet Client and Server to start running\n\nConnecting via HTTP proxy\n\nEnvironment variables required by ToolJet to connect via HTTP proxy\n\nDeploying ToolJet on a subpath\n\nSteps to deploy ToolJet on a subpath rather than root of domain\n\nV2 migration guide\n\nThings to know before migrating to ToolJet V2\n\nEdit this page\nPrevious\nGetting Started\nNext\nTry ToolJet"
  },
  {
    "title": "Security | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/security/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSecurity\nVersion: 2.15.0\nSecurity\nUncompromised Data Security with SOC 2 Compliance​\n\nWith SOC 2 compliance, Tooljet ensures the highest level of data security. The adherence to SOC 2 standards mirrors the rigorous data protection measures in place, covering everything from encryption to robust access controls. It also guarantees a consistent level of service availability and process integrity, instilling confidence in our customers and stakeholders about the safe handling of their sensitive information.\n\nData storage​\n\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\n\nDatasource credentials​\n\nAll the datasource credentials are securely encrypted using aes-256-gcm. The credentials are never exposed to the frontend ( ToolJet client ).\n\nOther security features​\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n\nIf you notice a security vulnerability, please let the team know by sending an email to security@tooljet.com.\n\nEdit this page\nPrevious\nSlack Code of Conduct\nNext\nTracking\nUncompromised Data Security with SOC 2 Compliance\nData storage\nDatasource credentials\nOther security features"
  },
  {
    "title": "Tracking | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/tracking/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nTracking\nVersion: 2.15.0\nTracking\nTIP\n\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n\nServer​\nTIP\n\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of CHECK_FOR_UPDATES environment variable to 0. This feature is enabled by default.\n\nClient​\n\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.\n\nTracking can be disabled by setting the value environment variable ENABLE_TRACKING to 0.\n\nEdit this page\nPrevious\nSecurity\nServer\nClient"
  },
  {
    "title": "Slack Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/contributing-guide/slackcoc/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideSlack Code of Conduct\nVersion: 2.15.0\nSlack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction​\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities — online and in-person— as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\nExpected behavior​\nBe welcoming.\nBe kind.\nLook out for each other.\nUnacceptable Behavior​\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\nWhere does the Code of Conduct apply?​\n\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\n\nIn addition, violations of this code outside our spaces may affect a person’s ability to participate in them.\n\nEnforcement​\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\nINFO\n\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n\nEtiquettes to follow​\n1. Be nice to everyone​\n2. Check off your resolved questions​\n\nIf you have received a useful reply to your question, please drop a ✅ reaction or a reply for affirmation.\n\n3. Try not to repost question​\n\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n\n4. Post in public​\n\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n\n5. Don't spam tags​\n\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n\n6. Use threads for discussion​\n\nTo keep the main channel area clear, we request to use threads to keep an ongoing conversation organized.\n\nEdit this page\nPrevious\nContributor Code of Conduct\nNext\nSecurity\nIntroduction\nExpected behavior\nUnacceptable Behavior\nWhere does the Code of Conduct apply?\nEnforcement\nEtiquettes to follow"
  },
  {
    "title": "Localization | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/contributing-guide/l10n/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideLocalization\nVersion: 2.15.0\nLocalization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\nAdding Translations​\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n\n\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. fr is the language code for French.\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Français\" }\n    ]\n}\n\nNOTE\n\nFeel free to reach us on Slack for any help related to Localization.\n\nEdit this page\nPrevious\nTesting\nNext\nEsLint\nAdding Translations"
  },
  {
    "title": "Contributor Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/contributing-guide/code-of-conduct/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideContributor Code of Conduct\nVersion: 2.15.0\nContributor Covenant Code of Conduct\nOur Pledge​\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nOur Standards​\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nOur Responsibilities​\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nScope​\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nEnforcement​\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@tooljet.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\nAttribution​\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n\nEdit this page\nPrevious\nRunPy limitations\nNext\nSlack Code of Conduct\nOur Pledge\nOur Standards\nOur Responsibilities\nScope\nEnforcement\nAttribution"
  },
  {
    "title": "Testing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/contributing-guide/testing/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideTesting\nVersion: 2.15.0\nTesting\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\nSetting up​\nNavigate to the cypress-tests directory and enter the following command:\nnpm install\n\nRunning Tests​\nHeaded mode​\n\nTo run cypress in headed mode, run the following command:\n\nnpm run cy:open\n\n\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\nHeadless mode​\n\nTo run cypress in headless mode, run the following command:\n\nnpm run cy:run\n\n\nFor running specific spec in headless mode, run for specific spec\n\nnpm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js\n\nCAUTION\n\nIf some test specs need the environment variables, the user can pass them similar to the following command:\n\nnpm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'\n\n\nor the user can add env-vars in the cypress.config.js file\n\nINFO\n\nCheck all the Cypress commands here\n\nEdit this page\nPrevious\nToolJet CLI\nNext\nLocalization\nSetting up\nRunning Tests"
  },
  {
    "title": "ToolJet CLI | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/tooljet-cli/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideToolJet CLI\nVersion: 2.15.0\nToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\nINFO\n\nStarting from ToolJet CLI version 0.0.14, the creation of datasource plugins has been deprecated to prioritise marketplace plugins. This change enhances the plugin development experience and aligns with ToolJet's roadmap.\n\nInstallation​\n\nIn order to manage plugins for the ToolJet marketplace, including creating, updating, and deleting, you will need to utilize tooljet-cli. This can be installed via npm by entering the following command:\n\nnpm install -g @tooljet/cli\n\nEnsure the installation was successful​\ntooljet --version\n\nCommands​\ninfo​\n\nThis command returns the information about where tooljet is being run\n\ntooljet info\n\ncreate​\n\nThis command creates a new plugin.\n\ntooljet plugin create PLUGIN_NAME\n\nTIP\n\nRead the detailed guide on creating a marketplace plugin here.\n\ndelete​\n\nThis command deletes a plugin.\n\ntooljet plugin delete PLUGIN_NAME\n\n\nThe CLI will prompt developers to verify if the plugin to be deleted is a marketplace plugin before proceeding with the deletion.\n\ninstall​\n\nInstalls a new npm module inside a tooljet plugin\n\ntooljet plugin install [NPM_MODULE] --plugin <value>\n\nEdit this page\nPrevious\nMarketplace: Creating plugins\nNext\nTesting\nInstallation\nCommands\ninfo\ncreate\ndelete\ninstall"
  },
  {
    "title": "Architecture | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/contributing-guide/setup/architecture/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideArchitecture\nVersion: 2.15.0\nIntroduction\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n1. ToolJet Server​\n\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more.\n\nDependencies:\n\nPostgreSQL - ToolJet server persists data to a postgres database.\nEmail service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.\nPostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client​\n\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\n\nRequirements​\nNode version 18.3.0\nnpm version 8.11.0\nEdit this page\nPrevious\nContributing Guide\nNext\nGitHub Codespaces\n1. ToolJet Server\n2. ToolJet Client\nRequirements"
  },
  {
    "title": "How To Guides | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/category/how-to/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nHow To\nVersion: 2.15.0\nHow To Guides\n\nHow To Guides for all the things ToolJet\n\n📄️ Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\n\n📄️ Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n📄️ Change text color in columns of the table\n\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\n📄️ Bulk update multiple rows in table\n\nCurrently, the datasources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query.\n\n📄️ Delete multiple rows in table\n\nThe table component in the ToolJet has the option for bulk selection of rows that can have various use cases such as updating or deleting records. However, the datasources does not support bulk delete or bulk update operations.\n\n📄️ Using server side pagination for efficient data handling in tables\n\nIn this guide we will learn how to use server side pagination in table component. This will be helpful if you have a large data set and you want to load data in chunks. This will also help you to improve the performance of your application. This guide will be helpful if you are using datasources like MySQL, PostgreSQL, MSSQL, MongoDB, etc. in which you can use limit and offset to fetch data in chunks. We have also included an example to load data from Google Sheets in chunks.\n\n📄️ Enable/Disable a component using current user's property\n\nLet's take look at the exposed variables of the current user property:\n\n📄️ Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\n\n📄️ Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query.\n\n📄️ Import external libraries using RunJS\n\nToolJet allows you to utilize external libraries in your app by importing them using the RunJS query.\n\n📄️ Run Actions from RunJS query\n\nNow you can trigger all the actions available in ToolJet from within the RunJS query. This guide includes the syntax for each action along with the example.\n\n📄️ Intentionally fail a RunJS query\n\nIn this how-to guide, we will create a RunJS query that will throw an error.\n\n📄️ Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\n📄️ Use the to_py() Function in RunPy: Converting JavaScript Objects to Python\n\nThis how-to guide will demonstrate the usage of to_py() function in RunPy queries for converting the JavaScript objects to Python.\n\n📄️ Access a user's location\n\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n\n📄️ Use S3 signed URL to upload documents\n\nIn this how-to guide, you'll learn to upload documents to S3 buckets using the S3 signed URL from a ToolJet application.\n\n📄️ Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage.\n\n📄️ REST API authentication using OAuth 2.0\n\nToolJet’s REST API data source supports OAuth 2.0 as the authentication type. In this guide, we’ll learn how to use Google OAuth2 API to delegate authorization and authentication for your ToolJet Application.\n\n📄️ Upload files on AWS S3 bucket\n\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\n\n📄️ Upload files using GCS\n\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\n\n📄️ Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\nPrevious\nPlivo\nNext\nUse Inspector"
  },
  {
    "title": "Contributing Guide | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/category/contributing-guide/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing Guide\nVersion: 2.15.0\nContributing Guide\n\nGuides for contributing to ToolJet\n\n📄️ Architecture\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n🗃️ Setup\n\n5 items\n\n🗃️ Marketplace\n\n2 items\n\n📄️ ToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\n📄️ Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\n📄️ Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\n🗃️ Troubleshooting\n\n2 items\n\n📄️ Contributor Code of Conduct\n\nOur Pledge\n\n📄️ Slack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nPrevious\nLoading image/PDF from base64 string\nNext\nArchitecture"
  },
  {
    "title": "Marketplace | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/category/marketplace/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nMarketplace\nVersion: 2.15.0\nMarketplace\n📄️ Marketplace : Overview\n\nWith ToolJet Marketplace, ToolJet users can conveniently add custom plugins (datasources) to their workspaces. This feature enables users to create plugins that cater to their specific needs and integrate them seamlessly with ToolJet.\n\n🗃️ Marketplace Plugins\n\n5 items\n\nPrevious\nVersioning and Release\nNext\nMarketplace : Overview"
  },
  {
    "title": "Copilot | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/tooljet-copilot/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nCopilot\nVersion: 2.15.0\nCopilot\nAvailable on: Paid plans\nBETA\n\nToolJet Copilot is currently in private beta for Business and Enterprise users only.\n\nToolJet Copilot helps you write your queries faster. It uses OpenAI to suggest queries based on your data.\n\nActivating Copilot​\n\nTo gain access to Copilot, all users, including administrators, can individually sign up for the waitlist program. Upon successful sign up, each user will be issued a distinctive API key linked to their account. However, the exclusive authority to activate Copilot within the workspace settings lies solely with administrators. Administrators can proceed to the Copilot section in the workspace settings, where they can utilize their respective API key to set the \"Enable Copilot\" toggle option.\n\nYou can join the waitlist here: https://tooljet.com/copilot\n\nINFO\nCopilot can be used by users who have permissions to edit the app with the copilot setup.\nUsing Copilot​\n\nOnce activated, the Copilot feature can be accessed while editing any query within the transformations section in the query editor.\n\nCopilot's functionality relies on the provision of clear and concise plain English prompts. It possesses the capability to interact with and retrieve information from various components, enabling it to generate code specific to the desired actions associated with those components. This capability is facilitated by Copilot's comprehensive understanding of the application's present state.\n\nToken Limit per Workspace​\n\nA token is a unit of text that language models like ChatGPT process, such as a word or a character. To ensure fair usage and resource allocation among workspaces, a token limit is implemented. Currently, the token limit is set to 400. If the token limit is surpassed, the request is declined with the message \"Unable to process request. Max tokens exceeded.\"\n\nRate-Limiting​\n\nTo prevent abuse or excessive usage of the Copilot API, rate-limiting measures are in place. The following rules apply:\n\nEach user is restricted to a maximum number of requests within a specific time frame.\nThe current rate limit allows for 100 requests per minute per user.\nIf a user surpasses the rate limit, subsequent requests from that user will be rejected.\nINFO\n\nWhen generating an API key, if a workspace has 5 editors, the daily request limit will be 500 (100 requests per editor). Even if the workspace later expands to 10 editors after a week, the maximum number of requests allowed per day will still be 500.\n\nExample: Generating a SQL statement​\n\nThis example demonstrates the usage of copilot by generating a SQL query to fetch the order details from a PostgreSQL database based on the key provided in the REST API data.\n\nCreate a RESTAPI query using this mock api endpoint: https://fakestoreapi.com/users/1\nEnable transformation on the query editor\n\nTo generate a SQL query using Copilot, first enter the desired prompt within comments in the transformations code editor. Once the prompt has been entered, simply click the Generate Code button, and Copilot will generate the corresponding SQL query.\n\nAssuming that a PostgreSQL data source is already connected and there are two tables in it, namely customer and orders, enter the provided prompt in the code editor:\n\n/*\nAssume the data is an object which has email key.\nassume we have a database with two tables: \"customer\" and \"orders.\" The \"customer\" table has columns such as \"customer_id,\" \"customer_name,\" and \"country.\" The \"orders\" table has columns such as \"order_id,\" \"customer_id,\" \"order_date,\" and \"total_amount.\"\nreturn a SQL query to retrieve the total order amounts for customers from the email key retrieved from the data, who have placed more than three orders.*/\n\n\nClick on the \"Generate Code\" button to generate the SQL query.\n\nOnce the code is generated, add a return statement below the code to return the generated SQL query. The variable name for the query might be different in your generated code.\n\nreturn query //the variable might be different in your generated code\n\n\nPreview the returned SQL statement in the preview block to check if it is correct. Then click on the \"Run\" button to trigger the query.\n\nOnce the query is executed, create a new PostgreSQL query in SQL mode and use JavaScript to get the data query data dynamically:\n\n{{queries.restapi1.data}}\n\nCAUTION\n\nWhile using ToolJet Copilot, it is important to note that the accuracy of the output cannot be guaranteed by the platform. Ultimately, it is your responsibility to assess and evaluate any query before executing it.\n\nIf you have feedback or questions about ToolJet Copilot, feel free to join our slack community.\n\nEdit this page\nPrevious\nToolJet Database\nNext\nOverview\nActivating Copilot\nUsing Copilot\nToken Limit per Workspace\nRate-Limiting\nExample: Generating a SQL statement"
  },
  {
    "title": "ToolJet Database | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/tooljet-database/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nToolJet Database\nVersion: 2.15.0\nToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\nEnabling the ToolJet Database for your instance​\n\nRequires:\n\nPostgREST server\nAdditional configuration for ToolJet server\n\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to true.\n\nPostgREST server​\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n\nTIP\n\nIf you have openssl installed, you can run the following command openssl rand -hex 32 to generate the value for PGRST_JWT_SECRET.\n\nIf this parameter is not specified then PostgREST refuses authentication requests.\n\nvariable\tdescription\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_DB_URI\tdatabase connection string for tooljet database\nPGRST_LOG_LEVEL\tinfo\nINFO\n\nPlease make sure that DB_URI is given in the format postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]\n\nAdditional ToolJet server configuration​\nvariable\tdescription\nENABLE_TOOLJET_DB\ttrue or false\nTOOLJET_DB\tDefault value is tooljet_db\nTOOLJET_DB_HOST\tdatabase host\nTOOLJET_DB_USER\tdatabase username\nTOOLJET_DB_PASS\tdatabase password\nTOOLJET_DB_PORT\tdatabase port\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_HOST\tpostgrest database host\n\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n\nTIP\n\nWhen this feature is enabled, the database name provided for TOOLJET_DB will be utilized to create a new database during server boot process in all of our production deploy setups. Incase you want to trigger it manually, use the command npm run db:create on ToolJet server.\n\nFeatures​\n\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\nAccessing ToolJet Database​\n\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\n\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\nDatabase Editor​\n\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\nCreate New Table​\n\nFor creating a new table in ToolJet Database, click on the Create New Table button on the top left corner of the Database editor.\n\nWhen the Create New Table button is clicked, a drawer opens up from the right from where you can enter the details of your new table.\n\nFor creating a new table, you'll need to:​\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\nSupported data types​\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\n\nClick on Create button to create a new table.\n\nSearch Table​\n\nYou can enter a search term to search through all tables in the database.\n\nAdd column​\n\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\n\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n\nColumn name: name of the column (key)\nData type: Check available data types here\nDefault Value Any default value for the column (not mandatory)\nFilter​\n\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\n\nAdding a filter on the table data​\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\nAvailable operations are:​\nequals\ngreater than\ngreater than or equal\nless than\nless than or equal\nnot equal\nlike\nilike\nmatch\nimatch\nin\ncontains\ncontained\nnot\nSort​\n\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\nAdd new row​\n\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\nEdit row​\n\nTo edit the rows from the ToolJet database dashboard, click on the Edit row button. A drawer will open from the right from where first you need to select the id of the row to be edited from the dropdown and then you can edit the cell values of the selected row.\n\nDelete records​\n\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\nDelete column​\n\nTo delete a particular column, just click on the column name and the delete button will appear, click on it to delete the column.\n\nEdit or Delete a table​\n\nWhen you click on the kebab menu (three vertical dots icon) on the right of the table name, you'll get two options: Edit and Delete.\n\nEdit will allow you to rename the table\nDelete will allow you to delete the table permanently\nQuerying data from the ToolJet database​\n\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\nGo to the query panel, and click on the +Add button to add a new query, and select Run ToolJetDb query\n\nEnter the Name of the table that you want to query, select an Operation from the dropdown, Create the query, and then Run the query to get the response.\n\nINFO\nPreview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed in JSON or Raw.\nWhen a new query is created, by default the query name is set to tooljetdbN (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\nAvailable operations​\nList rows​\n\nThis operation returns the list of all the records in the table\n\nOptional parameters​\nFilter: Add a filter to the query response by setting a column, operation and value.\nSort: Add a sort to the query response by setting a column and direction.\nLimit: Limit the query response. This parameter expects a numerical value. ex: 5\nCreate row​\n\nThis operation creates a new record in the table\n\nRequired parameters​\nColumns: Choose a column from the dropdown and enter a value for the new record.\nUpdate row​\n\nThis operation updates an existing record in the table\n\nRequired parameter​\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\nDelete row​\n\nThis operation deletes a record from the table\n\nRequired parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\nINFO\n\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community\n\nEdit this page\nPrevious\nLicensing\nNext\nCopilot\nEnabling the ToolJet Database for your instance\nPostgREST server\nFeatures\nAccessing ToolJet Database\nDatabase Editor\nCreate New Table\nSearch Table\nAdd column\nFilter\nSort\nAdd new row\nEdit row\nDelete records\nDelete column\nEdit or Delete a table\nQuerying data from the ToolJet database\nAvailable operations"
  },
  {
    "title": "Licensing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/licensing/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nLicensing\nVersion: 2.15.0\nLicensing\nAvailable on: Paid plans\nSetting up for Licensing​\n\nThis comprehensive guide aims to assist you in the process of configuring paid plans on your self-hosted platform. We offer three different licenses tailored to your specific requirements. Let's explore how to get the most out of ToolJet's powerful features! 🚀\n\nLet's look into three types of licenses:\n\nTrial License: This is a free license that grants access to premium features for a 14-day trial period. In order to get this, please reach out to our team.\nBusiness License: This is a paid license that you can purchase directly.\nEnterprise License: This is a paid license with customizable options. To obtain this license, you have to contact our sales team.\n\nAfter selecting the appropriate license that aligns with your needs, the next step is to proceed with the purchase. Once you have completed the onboarding process, we will generate a unique license key specifically tailored to your chosen specifications. Keep reading to gain a more comprehensive understanding of this process.\n\nTo update your trial license key, please follow these steps:\n\nSet up the instance and log in as a Super Admin.\nNavigate to the instance settings page.\nIn the license key tab, make the necessary updates to the provided license key.\nWithin the license tab of the instance settings page, you can access the limit tab, which displays the current status of available super admins, builders, and end users.\nNOTE\n\nThe trial license key will be valid for 14 days. To fully enjoy ToolJet, we recommend upgrading to premium plans within this period. If you wish to upgrade from the trial to the business or enterprise edition, you can click the Upgrade or Renew button or contact our team via Slack. Upon expiration, access to premium features like OpenID SSO login and Audit logs will be restricted, ensuring no data loss occurs. However, don't worry! You can still upgrade to any of our premium plans and enjoy the benefits of ToolJet.\n\nRef: Screenshot to update license key\n\nA) Chosen Plan: Business Plan​\n\nIf you decide to proceed with the Business Plan and have made the purchase, please wait for our team to get back to you within 24-48 hours to get you onboarded.\n\nTo update the business license key, follow these steps:\n\nLog in as a Super Admin, ensuring that you are on the correct instance URL.\nGo to the instance settings page.\nIn the license key tab, update the provided license key.\nWithin the license tab of the instance settings page, you can access the limit tab, which provides details about available super admins, builders, and end users.\nNOTE\n\nAs a super admin, you can conveniently view the remaining days of your enterprise edition period on the dashboard. (Refer to screenshots below)\n\nIMPORTANT\n\nThe business license key will be valid for 3 months only. You can renew it to continue using ToolJet to its fullest potential.\n\nB) Chosen Plan: Enterprise Plan​\n\nIf you choose to move forward with the Enterprise Plan and have completed the purchase process with our sales team, kindly anticipate a response from our team within 24-48 hours to facilitate your onboarding process.\n\nTo update the enterprise license key, follow these steps:\n\nLog in as a Super Admin, ensuring that you are on the correct instance URL.\nGo to the instance settings page.\nIn the license key tab, update the provided license key.\nWithin the license tab of the instance settings page, you can access the limit tab, which provides details about available super admins, builders, and end users.\nNOTE\n\nAs a super admin, you can conveniently view the remaining days of your enterprise edition period on the dashboard.\n\nFrequently Asked Questions (FAQs)​\n1) How can I upgrade or renew my license?​\n\nIf your business or enterprise edition license key is nearing expiration, please click the Upgrade or Renew button or contact us via email at hello@tooljet.com to obtain an extended license key. If you intend to increase the number of users, please reach out to us via Slack or review our pricing page at https://www.tooljet.com/pricing before making a request.\n\nRef: Screenshot addressing upgrade/renew CTAs. Note that there are a couple of other pages which will display banners or CTAs, from where you can upgrade/renew.\n\n2) What happens if my license expires?​\n\nIf your business or enterprise license key expires, your instance will revert to operating as a free plan. While you can still create unlimited apps, workspaces, and add users, premium features such as OpenID and Audit logs will no longer be accessible. For further information, please refer to the relevant plans.\n\n3) How can I add more users?​\n\nThere are different methods to do this:\n\na) You can renew directly using the business plan. (Note: Please do check the list of premium features available with this plan)\n\nb) You can directly reach out to us via Slack or email and we will be happy to provide you the support.\n\nLastly, please keep in mind that your license key is private and strictly prohibited from being shared with any third parties.\n\nEdit this page\nPrevious\nV2 migration guide\nNext\nToolJet Database\nSetting up for Licensing\nA) Chosen Plan: Business Plan\nB) Chosen Plan: Enterprise Plan\nFrequently Asked Questions (FAQs)\n1) How can I upgrade or renew my license?\n2) What happens if my license expires?\n3) How can I add more users?"
  },
  {
    "title": "Setup ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/setup/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSetup\nVersion: 2.15.0\nSetup ToolJet\n\nCheck out the different methods you can use to deploy ToolJet on your machine\n\nTry ToolJet\n\nTry out ToolJet with single docker command\n\nDigitalOcean\n\nQuickly deploy ToolJet using the Deploy to DigitalOcean button\n\nDocker\n\nDeploy ToolJet on a server using docker-compose\n\nAWS EC2\n\nDeploy ToolJet on AWS EC2 instances\n\nAWS ECS\n\nDeploy ToolJet on AWS ECS instances\n\nOpenshift\n\nDeploy ToolJet on Openshift\n\nHelm\n\nDeploy ToolJet with Helm Chart\n\nKubernetes\n\nDeploy ToolJet on a Kubernetes cluster\n\nKubernetes (GKE)\n\nDeploy ToolJet on a GKE Kubernetes cluster\n\nKubernetes (AKS)\n\nDeploy ToolJet on a AKS Kubernetes cluster\n\nAzure container apps\n\nDeploy ToolJet on a Azure Container Apps\n\nGoogle Cloud Run\n\nDeploy ToolJet on Cloud Run with GCloud CLI\n\nDeploying ToolJet client\n\nDeploy ToolJet Client on static website hosting services\n\nEnvironment variables\n\nEnvironment variables required by ToolJet Client and Server to start running\n\nConnecting via HTTP proxy\n\nEnvironment variables required by ToolJet to connect via HTTP proxy\n\nDeploying ToolJet on a subpath\n\nSteps to deploy ToolJet on a subpath rather than root of domain\n\nV2 migration guide\n\nThings to know before migrating to ToolJet V2\n\nEdit this page\nPrevious\nGetting Started\nNext\nTry ToolJet"
  },
  {
    "title": "Tracking | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/tracking/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nTracking\nVersion: 2.18.0\nTracking\nTIP\n\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n\nServer​\nTIP\n\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of CHECK_FOR_UPDATES environment variable to 0. This feature is enabled by default.\n\nClient​\n\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.\n\nTracking can be disabled by setting the value environment variable ENABLE_TRACKING to 0.\n\nEdit this page\nPrevious\nSecurity\nServer\nClient"
  },
  {
    "title": "Security | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/security/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSecurity\nVersion: 2.18.0\nSecurity\nUncompromised Data Security with SOC 2 Compliance​\n\nWith SOC 2 compliance, Tooljet ensures the highest level of data security. The adherence to SOC 2 standards mirrors the rigorous data protection measures in place, covering everything from encryption to robust access controls. It also guarantees a consistent level of service availability and process integrity, instilling confidence in our customers and stakeholders about the safe handling of their sensitive information.\n\nData storage​\n\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\n\nDatasource credentials​\n\nAll the datasource credentials are securely encrypted using aes-256-gcm. The credentials are never exposed to the frontend ( ToolJet client ).\n\nOther security features​\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n\nIf you notice a security vulnerability, please let the team know by sending an email to security@tooljet.com.\n\nEdit this page\nPrevious\nSlack Code of Conduct\nNext\nTracking\nUncompromised Data Security with SOC 2 Compliance\nData storage\nDatasource credentials\nOther security features"
  },
  {
    "title": "Contributor Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/contributing-guide/code-of-conduct/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideContributor Code of Conduct\nVersion: 2.18.0\nContributor Covenant Code of Conduct\nOur Pledge​\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nOur Standards​\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nOur Responsibilities​\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nScope​\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nEnforcement​\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@tooljet.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\nAttribution​\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n\nEdit this page\nPrevious\nRunPy limitations\nNext\nSlack Code of Conduct\nOur Pledge\nOur Standards\nOur Responsibilities\nScope\nEnforcement\nAttribution"
  },
  {
    "title": "Slack Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/contributing-guide/slackcoc/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideSlack Code of Conduct\nVersion: 2.18.0\nSlack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction​\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities — online and in-person— as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\nExpected behavior​\nBe welcoming.\nBe kind.\nLook out for each other.\nUnacceptable Behavior​\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\nWhere does the Code of Conduct apply?​\n\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\n\nIn addition, violations of this code outside our spaces may affect a person’s ability to participate in them.\n\nEnforcement​\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\nINFO\n\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n\nEtiquettes to follow​\n1. Be nice to everyone​\n2. Check off your resolved questions​\n\nIf you have received a useful reply to your question, please drop a ✅ reaction or a reply for affirmation.\n\n3. Try not to repost question​\n\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n\n4. Post in public​\n\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n\n5. Don't spam tags​\n\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n\n6. Use threads for discussion​\n\nTo keep the main channel area clear, we request to use threads to keep an ongoing conversation organized.\n\nEdit this page\nPrevious\nContributor Code of Conduct\nNext\nSecurity\nIntroduction\nExpected behavior\nUnacceptable Behavior\nWhere does the Code of Conduct apply?\nEnforcement\nEtiquettes to follow"
  },
  {
    "title": "Testing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/contributing-guide/testing/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideTesting\nVersion: 2.18.0\nTesting\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\nSetting up​\nNavigate to the cypress-tests directory and enter the following command:\nnpm install\n\nRunning Tests​\nHeaded mode​\n\nTo run cypress in headed mode, run the following command:\n\nnpm run cy:open\n\n\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\nHeadless mode​\n\nTo run cypress in headless mode, run the following command:\n\nnpm run cy:run\n\n\nFor running specific spec in headless mode, run for specific spec\n\nnpm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js\n\nCAUTION\n\nIf some test specs need the environment variables, the user can pass them similar to the following command:\n\nnpm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'\n\n\nor the user can add env-vars in the cypress.config.js file\n\nINFO\n\nCheck all the Cypress commands here\n\nEdit this page\nPrevious\nToolJet CLI\nNext\nLocalization\nSetting up\nRunning Tests"
  },
  {
    "title": "Localization | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/contributing-guide/l10n/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideLocalization\nVersion: 2.18.0\nLocalization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\nAdding Translations​\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n\n\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. fr is the language code for French.\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Français\" }\n    ]\n}\n\nNOTE\n\nFeel free to reach us on Slack for any help related to Localization.\n\nEdit this page\nPrevious\nTesting\nNext\nEsLint\nAdding Translations"
  },
  {
    "title": "ToolJet CLI | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/tooljet-cli/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideToolJet CLI\nVersion: 2.18.0\nToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\nINFO\n\nStarting from ToolJet CLI version 0.0.14, the creation of datasource plugins has been deprecated to prioritise marketplace plugins. This change enhances the plugin development experience and aligns with ToolJet's roadmap.\n\nInstallation​\n\nIn order to manage plugins for the ToolJet marketplace, including creating, updating, and deleting, you will need to utilize tooljet-cli. This can be installed via npm by entering the following command:\n\nnpm install -g @tooljet/cli\n\nEnsure the installation was successful​\ntooljet --version\n\nCommands​\ninfo​\n\nThis command returns the information about where tooljet is being run\n\ntooljet info\n\ncreate​\n\nThis command creates a new plugin.\n\ntooljet plugin create PLUGIN_NAME\n\nTIP\n\nRead the detailed guide on creating a marketplace plugin here.\n\ndelete​\n\nThis command deletes a plugin.\n\ntooljet plugin delete PLUGIN_NAME\n\n\nThe CLI will prompt developers to verify if the plugin to be deleted is a marketplace plugin before proceeding with the deletion.\n\ninstall​\n\nInstalls a new npm module inside a tooljet plugin\n\ntooljet plugin install [NPM_MODULE] --plugin <value>\n\nEdit this page\nPrevious\nMarketplace: Creating plugins\nNext\nTesting\nInstallation\nCommands\ninfo\ncreate\ndelete\ninstall"
  },
  {
    "title": "How To Guides | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/category/how-to/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nHow To\nVersion: 2.18.0\nHow To Guides\n\nHow To Guides for all the things ToolJet\n\n📄️ Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\n\n📄️ Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n📄️ Change text color in columns of the table\n\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\n📄️ Bulk update multiple rows in table\n\nCurrently, the data sources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query.\n\n📄️ Delete multiple rows in table\n\nThe table component in the ToolJet has the option for bulk selection of rows that can have various use cases such as updating or deleting records. However, the datasources does not support bulk delete or bulk update operations.\n\n📄️ Using server side pagination for efficient data handling in tables\n\nIn this guide we will learn how to use server side pagination in table component. This will be helpful if you have a large data set and you want to load data in chunks. This will also help you to improve the performance of your application. This guide will be helpful if you are using datasources like MySQL, PostgreSQL, MSSQL, MongoDB, etc. in which you can use limit and offset to fetch data in chunks. We have also included an example to load data from Google Sheets in chunks.\n\n📄️ Enable/Disable a component using current user's property\n\nLet's take look at the exposed variables of the current user property:\n\n📄️ Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\n\n📄️ Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query.\n\n📄️ Import external libraries using RunJS\n\nToolJet allows you to utilize external libraries in your app by importing them using the RunJS query.\n\n📄️ Run Actions from RunJS query\n\nNow you can trigger all the actions available in ToolJet from within the RunJS query. This guide includes the syntax for each action along with the example.\n\n📄️ Intentionally fail a RunJS query\n\nIn this how-to guide, we will create a RunJS query that will throw an error.\n\n📄️ Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\n📄️ Use the to_py() Function in RunPy: Converting JavaScript Objects to Python\n\nThis how-to guide will demonstrate the usage of to_py() function in RunPy queries for converting the JavaScript objects to Python.\n\n📄️ Access a user's location\n\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n\n📄️ Use S3 signed URL to upload documents\n\nIn this how-to guide, you'll learn to upload documents to S3 buckets using the S3 signed URL from a ToolJet application.\n\n📄️ Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage.\n\n📄️ Upload files on AWS S3 bucket\n\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\n\n📄️ Upload files using GCS\n\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\n\n📄️ Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\nPrevious\nPlivo\nNext\nUse Inspector"
  },
  {
    "title": "Architecture | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/contributing-guide/setup/architecture/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideArchitecture\nVersion: 2.18.0\nIntroduction\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n1. ToolJet Server​\n\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more.\n\nDependencies:\n\nPostgreSQL - ToolJet server persists data to a postgres database.\nEmail service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.\nPostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client​\n\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\n\nRequirements​\nNode version 18.3.0\nnpm version 8.11.0\nEdit this page\nPrevious\nContributing Guide\nNext\nGitHub Codespaces\n1. ToolJet Server\n2. ToolJet Client\nRequirements"
  },
  {
    "title": "Contributing Guide | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/category/contributing-guide/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing Guide\nVersion: 2.18.0\nContributing Guide\n\nGuides for contributing to ToolJet\n\n📄️ Architecture\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n🗃️ Setup\n\n5 items\n\n🗃️ Marketplace\n\n2 items\n\n📄️ ToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\n📄️ Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\n📄️ Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\n🗃️ Troubleshooting\n\n2 items\n\n📄️ Contributor Code of Conduct\n\nOur Pledge\n\n📄️ Slack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nPrevious\nLoading image/PDF from base64 string\nNext\nArchitecture"
  },
  {
    "title": "Marketplace | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/category/marketplace/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nMarketplace\nVersion: 2.18.0\nMarketplace\n📄️ Marketplace : Overview\n\nWith ToolJet Marketplace, ToolJet users can conveniently add custom plugins (datasources) to their workspaces. This feature enables users to create plugins that cater to their specific needs and integrate them seamlessly with ToolJet.\n\n🗃️ Marketplace Plugins\n\n5 items\n\nPrevious\nVersioning and Release\nNext\nMarketplace : Overview"
  },
  {
    "title": "Dashboard | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/dashboard/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nDashboard\nVersion: 2.18.0\nDashboard\n\nThe ToolJet Dashboard is the initial landing page that you see upon logging into your workspace. This interface serves as a central hub where you can access a variety of features. Primarily, it displays all the applications you've created within ToolJet. Moreover, you have the capability to create new workspaces and applications directly from this dashboard. Additionally, it provides an option to create folders for categorizing and managing applications for easier organization, access control, and workflow management.\n\nFurthermore, the dashboard serves as a gateway to various essential sections, such as Workflows, ToolJet Database, Data Sources, Marketplace, Workspace Settings, Instance Settings, and Audit logs. You can effortlessly navigate to these sections directly from the dashboard.\n\nWorkspace Manager​\n\nThe workspace manager is located on the top left corner of the dashboard. Clicking on the workspace manager will open a dropdown menu with a list of all the workspaces you are a part of. You can switch between workspaces by clicking on the workspace name from the dropdown menu.\n\nYou can also create a new workspace by clicking on the Add new workspace button on the bottom of the dropdown menu. Clicking on this button will open a modal, enter the name of the workspace and click on the Create Workspace button to create a new workspace. Workspaces can be renamed by clicking on the edit icon on the right side of the workspace name.\n\nCreate a new app​\n\nTo create a new app, click on the Create new app button on the top left corner of the dashboard. Clicking on this button will instantly create a new app and open the app builder.\n\n\n\n\nThere are three dots on the right side of the Create new app button. Clicking on these dots will open a dropdown menu with two options:\n\nChoose from templates​\n\nThis option will open a modal with a list of pre-built templates. You can choose any template from this list to create a new app.\n\nImport​\n\nThis option will open a file picker to import a JSON file. This JSON file should be the app exported from ToolJet.\n\nImporting app connected to marketplace plugins​\n\nWhen importing an app with marketplace plugins, the marketplace plugin should be installed in the tooljet workspace where the app is being imported. If the marketplace plugin is not installed, the app will be imported without the queries for that plugin.\n\nWhen marketplace plugin is installed​\n\nIf marketplace plugin is installed in the tooljet workspace where the app is being imported, the queries connected to the marketplace plugin will be available in the imported application. The queries will be linked to the data source with the same name if it is already present. If the data source is not present, a new data source will be created of that marketplace plugin and linked to the queries.\n\nWhen marketplace plugin is not installed​\n\nIf you have an app with a query linked to a marketplace plugin, and you import that app in a tooljet workspace where the marketplace plugin is not installed as the data source, the queries will be not be available in the imported application.\n\nImporting app connected to tooljet table​\n\nWhen the app(JSON file) that includes the table schema is imported, and the table is not present in the tooljet database of the workspace where the app is being imported, a new table will be created in the tooljet database with the same name as the table in the imported app.\n\nIf the table with the same name is already present in the workspace, the new table will be created with the name <table name>_<unix timestamp>. Example: <tablename>_1627980000.\n\nCreate a new folder​\n\nFolders can be created to organize your apps. To create a new folder, click on the + button on the left drawer of the dashboard. Clicking on this button will open a modal, enter the name of the folder and click on the Create Folder button to create a new folder.\n\nDelete or Edit Folder​\n\nA folder can be deleted or renamed. To delete or rename a folder, click on the kebab menu on the right side of the folder name. Clicking on kebab menu will open a dropdown menu with two options:\n\nEdit folder: This option will open a modal, enter the new name of the folder and click on the Edit button to rename the folder.\nDelete folder: This option will open a confirmation modal to delete the folder. Click on the Delete button to delete the folder.\nSearch folders​\n\nFolders can be searched by clicking on the search icon on the left drawer of the dashboard. Clicking on the search icon will open a search bar, enter the name of the folder to search.\n\nApp cards​\n\nThe dashboard displays all the apps created in the workspace as cards. These cards are displayed in a grid layout. The app cards display the name of the app, the name of the creator, and the date of creation. The app cards also display the app icon, which can be changed by clicking on the Change Icon option from the app menu.\n\nApp menu​\n\nThe app menu is located on the top right corner of the app card. Clicking on the app menu will open a dropdown menu with a list of options. These options are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nChange Icon​\n\nThis option will open a modal with a list of icons. You can choose any icon from this list to change the app icon.\n\nAdd to folder​\n\nThis option will open a modal with a list of folders. You can choose any folder from this list to add the app to the folder.\n\nClone app​\n\nSelecting this option will immediately open the cloned app in the app builder with the same configuration as the original app. The new app will be named as <original app name> followed by unix timestamp. Example: <original app name> 1627980000.\n\nExport app​\n\nThis option will download a JSON file of the application. This JSON file can be imported to ToolJet to create a new app. The exported app will include all the queries connected to global data sources including the data source created from Marketplace plugins.\n\nThis option allows you to select a specific version of the app to export or export all the versions of the app. To export a specific version of the app, select a version from the list of available versions in the modal and click on the Export selected version and to export all the versions of the app, click on the Export All button.\n\nExport ToolJet table schema​\n\nSelecting this option will inclue the schema of the tooljet table connected to that application in the exported JSON file. This option is available for all the apps on ToolJet however only the apps with a tooljet table connected(includes tjdb query) will have the schema included in the exported JSON file.\n\nThis JSON file can be used to import the application to ToolJet along with the table schema that was connected to the application.\n\nDelete app​\n\nThis option will open a confirmation modal to delete the app. Click on the Delete button to delete the app.\n\nApp search​\n\nApps can be searched by clicking on the search bar on the center of the dashboard. Click on the search bar and enter the name of the app to search.\n\nCurrent ToolJet Version​\n\nThe current version of ToolJet is displayed on the top right corner of the dashboard.\n\nEdit this page\nPrevious\nControl component (Component Specific Actions)\nNext\nOverview\nWorkspace Manager\nCreate a new app\nChoose from templates\nImport\nImporting app connected to marketplace plugins\nImporting app connected to tooljet table\nCreate a new folder\nDelete or Edit Folder\nSearch folders\nApp cards\nApp menu\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nApp search\nCurrent ToolJet Version"
  },
  {
    "title": "ToolJet Database | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/tooljet-database/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nToolJet Database\nVersion: 2.18.0\nToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\nEnabling the ToolJet Database for your instance​\n\nRequires:\n\nPostgREST server\nAdditional configuration for ToolJet server\n\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to true.\n\nPostgREST server​\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n\nTIP\n\nIf you have openssl installed, you can run the following command openssl rand -hex 32 to generate the value for PGRST_JWT_SECRET.\n\nIf this parameter is not specified then PostgREST refuses authentication requests.\n\nvariable\tdescription\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_DB_URI\tdatabase connection string for tooljet database\nPGRST_LOG_LEVEL\tinfo\nINFO\n\nPlease make sure that DB_URI is given in the format postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]\n\nAdditional ToolJet server configuration​\nvariable\tdescription\nENABLE_TOOLJET_DB\ttrue or false\nTOOLJET_DB\tDefault value is tooljet_db\nTOOLJET_DB_HOST\tdatabase host\nTOOLJET_DB_USER\tdatabase username\nTOOLJET_DB_PASS\tdatabase password\nTOOLJET_DB_PORT\tdatabase port\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_HOST\tpostgrest database host\n\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n\nTIP\n\nWhen this feature is enabled, the database name provided for TOOLJET_DB will be utilized to create a new database during server boot process in all of our production deploy setups. Incase you want to trigger it manually, use the command npm run db:create on ToolJet server.\n\nFeatures​\n\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\nExport table from the ToolJet Database to a JSON file.\nAccessing ToolJet Database​\n\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\n\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\nDatabase Editor​\n\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\nCreate New Table​\n\nFor creating a new table in ToolJet Database, click on the Create New Table button on the top left corner of the Database editor.\n\nWhen the Create New Table button is clicked, a drawer opens up from the right from where you can enter the details of your new table.\n\nFor creating a new table, you'll need to:​\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\nSupported data types​\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\n\nClick on Create button to create a new table.\n\nSearch Table​\n\nYou can enter a search term to search through all tables in the database.\n\nAdd column​\n\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\n\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n\nColumn name: name of the column (key)\nData type: Check available data types here\nDefault Value Any default value for the column (not mandatory)\nFilter​\n\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\n\nAdding a filter on the table data​\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\nAvailable operations are:​\nequals: This operation is used to check if the value of the column is equal to the value entered in the input field.\ngreater than: This operation is used to check if the value of the column is greater than the value entered in the input field.\ngreater than or equal: This operation is used to check if the value of the column is greater than or equal to the value entered in the input field.\nless than: This operation is used to check if the value of the column is less than the value entered in the input field.\nless than or equal: This operation is used to check if the value of the column is less than or equal to the value entered in the input field.\nnot equal: This operation is used to check if the value of the column is not equal to the value entered in the input field.\nlike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nilike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. ex: ToolJet will match tooljet\nmatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nimatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nin: This operation is used to check if the value of the column is in the list of values entered in the input field. ex: 1,2,3\ncontains: This operation is used to check if the value of the column contains the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\ncontained: This operation is used to check if the value of the column is contained in the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nnot: This operation is used to negate the result of the operation selected in the dropdown. ex: not equals will return all the records where the value of the column is not equal to the value entered in the input field.\nSort​\n\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\nExport table​\n\nTo export the table data, click on the Export table button on top. The selected table data will be exported to a JSON file.\n\nAdd new row​\n\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\nEdit row​\n\nTo edit the rows from the ToolJet database dashboard, click on the Edit row button. A drawer will open from the right from where first you need to select the id of the row to be edited from the dropdown and then you can edit the cell values of the selected row.\n\nDelete records​\n\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\nDelete column​\n\nTo delete a particular column, just click on the column header and the delete button will appear, click on it to delete the column.\n\nEdit table​\n\nTo edit the table name, click on the three vertical dots icon on the right of the table name and then click on the Edit option. A drawer will open from the right from where you can edit the table name.\n\nDelete table​\n\nTo delete a table, click on the three vertical dots icon on the right of the table name and then click on the Delete option. A confirmation modal will appear, click on the Delete button to delete the table.\n\nQuerying data from the ToolJet database​\n\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\nGo to the query panel, and click on the +Add button to add a new query, and select ToolJet Database\n\nSelect the table that you want to query from the dropdown, choose an operation from the dropdown, and then enter the required parameters for the selected operation. Click on the Run button to execute the query.\n\nINFO\nPreview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed as JSON or Raw.\nWhen a new query is created, by default the query name is set to tooljetdbN (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\nAvailable operations​\nList rows​\n\nThis operation returns all the records from the table\n\nOptional parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records.\nSort: Sort the query response by choosing a column and the order (ascending or descending).\nLimit: Limit the number of records to be returned by entering a number.\nCreate row​\n\nThis operation creates a new record in the table. You can create a single record or multiple records at once.\n\nRequired parameters​\nColumns: Choose the columns for which you want to add values for the new record and enter the values for the selected columns. You can also add a new column by clicking on the +Add column button.\nUpdate row​\n\nThis operation updates a record in the table. You can update a single record or multiple records at once.\n\nRequired parameter​\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\nColumns: Choose the columns for which you want to update the values for the selected record and enter the values for the selected columns.\nDelete row​\n\nThis operation deletes a record in the table. You can delete a single record or multiple records at once.\n\nRequired parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\nLimit: Limit the number of records to be deleted by entering a number.\nINFO\n\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community\n\nEdit this page\nPrevious\nV2 migration guide\nNext\nCopilot\nEnabling the ToolJet Database for your instance\nPostgREST server\nFeatures\nAccessing ToolJet Database\nDatabase Editor\nCreate New Table\nSearch Table\nAdd column\nFilter\nSort\nExport table\nAdd new row\nEdit row\nDelete records\nDelete column\nEdit table\nDelete table\nQuerying data from the ToolJet database\nAvailable operations\nList rows\nCreate row\nUpdate row\nDelete row"
  },
  {
    "title": "Copilot | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/tooljet-copilot/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nCopilot\nVersion: 2.18.0\nCopilot\nAvailable on: Paid plans\nBETA\n\nToolJet Copilot is currently in private beta for Business and Enterprise users only.\n\nToolJet Copilot helps you write your queries faster. It uses OpenAI to suggest queries based on your data.\n\nActivating Copilot​\n\nTo gain access to Copilot, all users, including administrators, can individually sign up for the waitlist program. Upon successful sign up, each user will be issued a distinctive API key linked to their account. However, the exclusive authority to activate Copilot within the workspace settings lies solely with administrators. Administrators can proceed to the Copilot section in the workspace settings, where they can utilize their respective API key to set the \"Enable Copilot\" toggle option.\n\nYou can join the waitlist here: https://tooljet.com/copilot\n\nINFO\nCopilot can be used by users who have permissions to edit the app with the copilot setup.\nUsing Copilot​\n\nOnce activated, the Copilot feature can be accessed while editing any query within the transformations section in the query editor.\n\nCopilot's functionality relies on the provision of clear and concise plain English prompts. It possesses the capability to interact with and retrieve information from various components, enabling it to generate code specific to the desired actions associated with those components. This capability is facilitated by Copilot's comprehensive understanding of the application's present state.\n\nToken Limit per Workspace​\n\nA token is a unit of text that language models like ChatGPT process, such as a word or a character. To ensure fair usage and resource allocation among workspaces, a token limit is implemented. Currently, the token limit is set to 400. If the token limit is surpassed, the request is declined with the message \"Unable to process request. Max tokens exceeded.\"\n\nRate-Limiting​\n\nTo prevent abuse or excessive usage of the Copilot API, rate-limiting measures are in place. The following rules apply:\n\nEach user is restricted to a maximum number of requests within a specific time frame.\nThe current rate limit allows for 100 requests per minute per user.\nIf a user surpasses the rate limit, subsequent requests from that user will be rejected.\nINFO\n\nWhen generating an API key, if a workspace has 5 editors, the daily request limit will be 500 (100 requests per editor). Even if the workspace later expands to 10 editors after a week, the maximum number of requests allowed per day will still be 500.\n\nExample: Generating a SQL statement​\n\nThis example demonstrates the usage of copilot by generating a SQL query to fetch the order details from a PostgreSQL database based on the key provided in the REST API data.\n\nCreate a RESTAPI query using this mock api endpoint: https://fakestoreapi.com/users/1\nEnable transformation on the query editor\n\nTo generate a SQL query using Copilot, first enter the desired prompt within comments in the transformations code editor. Once the prompt has been entered, simply click the Generate Code button, and Copilot will generate the corresponding SQL query.\n\nAssuming that a PostgreSQL data source is already connected and there are two tables in it, namely customer and orders, enter the provided prompt in the code editor:\n\n/*\nAssume the data is an object which has email key.\nassume we have a database with two tables: \"customer\" and \"orders.\" The \"customer\" table has columns such as \"customer_id,\" \"customer_name,\" and \"country.\" The \"orders\" table has columns such as \"order_id,\" \"customer_id,\" \"order_date,\" and \"total_amount.\"\nreturn a SQL query to retrieve the total order amounts for customers from the email key retrieved from the data, who have placed more than three orders.*/\n\n\nClick on the \"Generate Code\" button to generate the SQL query.\n\nOnce the code is generated, add a return statement below the code to return the generated SQL query. The variable name for the query might be different in your generated code.\n\nreturn query //the variable might be different in your generated code\n\n\nPreview the returned SQL statement in the preview block to check if it is correct. Then click on the \"Run\" button to trigger the query.\n\nOnce the query is executed, create a new PostgreSQL query in SQL mode and use JavaScript to get the data query data dynamically:\n\n{{queries.restapi1.data}}\n\nCAUTION\n\nWhile using ToolJet Copilot, it is important to note that the accuracy of the output cannot be guaranteed by the platform. Ultimately, it is your responsibility to assess and evaluate any query before executing it.\n\nIf you have feedback or questions about ToolJet Copilot, feel free to join our slack community.\n\nEdit this page\nPrevious\nToolJet Database\nNext\nOverview\nActivating Copilot\nUsing Copilot\nToken Limit per Workspace\nRate-Limiting\nExample: Generating a SQL statement"
  },
  {
    "title": "Setup ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/setup/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSetup\nVersion: 2.18.0\nSetup ToolJet\n\nCheck out the different methods you can use to deploy ToolJet on your machine\n\nTry ToolJet\n\nTry out ToolJet with single docker command\n\nDigitalOcean\n\nQuickly deploy ToolJet using the Deploy to DigitalOcean button\n\nDocker\n\nDeploy ToolJet on a server using docker-compose\n\nAWS EC2\n\nDeploy ToolJet on AWS EC2 instances\n\nAWS ECS\n\nDeploy ToolJet on AWS ECS instances\n\nOpenshift\n\nDeploy ToolJet on Openshift\n\nHelm\n\nDeploy ToolJet with Helm Chart\n\nKubernetes\n\nDeploy ToolJet on a Kubernetes cluster\n\nKubernetes (GKE)\n\nDeploy ToolJet on a GKE Kubernetes cluster\n\nKubernetes (AKS)\n\nDeploy ToolJet on a AKS Kubernetes cluster\n\nAzure container apps\n\nDeploy ToolJet on a Azure Container Apps\n\nGoogle Cloud Run\n\nDeploy ToolJet on Cloud Run with GCloud CLI\n\nDeploying ToolJet client\n\nDeploy ToolJet Client on static website hosting services\n\nEnvironment variables\n\nEnvironment variables required by ToolJet Client and Server to start running\n\nConnecting via HTTP proxy\n\nEnvironment variables required by ToolJet to connect via HTTP proxy\n\nDeploying ToolJet on a subpath\n\nSteps to deploy ToolJet on a subpath rather than root of domain\n\nV2 migration guide\n\nThings to know before migrating to ToolJet V2\n\nEdit this page\nPrevious\nGetting Started\nNext\nTry ToolJet"
  },
  {
    "title": "Tracking | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/tracking/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nTracking\nVersion: 2.19.0\nTracking\nTIP\n\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n\nServer​\nTIP\n\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of CHECK_FOR_UPDATES environment variable to 0. This feature is enabled by default.\n\nClient​\n\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.\n\nTracking can be disabled by setting the value environment variable ENABLE_TRACKING to 0.\n\nEdit this page\nPrevious\nSecurity\nServer\nClient"
  },
  {
    "title": "Security | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/security/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSecurity\nVersion: 2.19.0\nSecurity\nUncompromised Data Security with SOC 2 Compliance​\n\nWith SOC 2 compliance, Tooljet ensures the highest level of data security. The adherence to SOC 2 standards mirrors the rigorous data protection measures in place, covering everything from encryption to robust access controls. It also guarantees a consistent level of service availability and process integrity, instilling confidence in our customers and stakeholders about the safe handling of their sensitive information.\n\nData storage​\n\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\n\nDatasource credentials​\n\nAll the datasource credentials are securely encrypted using aes-256-gcm. The credentials are never exposed to the frontend ( ToolJet client ).\n\nOther security features​\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n\nIf you notice a security vulnerability, please let the team know by sending an email to security@tooljet.com.\n\nEdit this page\nPrevious\nSlack Code of Conduct\nNext\nTracking\nUncompromised Data Security with SOC 2 Compliance\nData storage\nDatasource credentials\nOther security features"
  },
  {
    "title": "Slack Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/contributing-guide/slackcoc/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideSlack Code of Conduct\nVersion: 2.19.0\nSlack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction​\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities — online and in-person— as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\nExpected behavior​\nBe welcoming.\nBe kind.\nLook out for each other.\nUnacceptable Behavior​\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\nWhere does the Code of Conduct apply?​\n\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\n\nIn addition, violations of this code outside our spaces may affect a person’s ability to participate in them.\n\nEnforcement​\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\nINFO\n\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n\nEtiquettes to follow​\n1. Be nice to everyone​\n2. Check off your resolved questions​\n\nIf you have received a useful reply to your question, please drop a ✅ reaction or a reply for affirmation.\n\n3. Try not to repost question​\n\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n\n4. Post in public​\n\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n\n5. Don't spam tags​\n\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n\n6. Use threads for discussion​\n\nTo keep the main channel area clear, we request to use threads to keep an ongoing conversation organized.\n\nEdit this page\nPrevious\nContributor Code of Conduct\nNext\nSecurity\nIntroduction\nExpected behavior\nUnacceptable Behavior\nWhere does the Code of Conduct apply?\nEnforcement\nEtiquettes to follow"
  },
  {
    "title": "Contributor Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/contributing-guide/code-of-conduct/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideContributor Code of Conduct\nVersion: 2.19.0\nContributor Covenant Code of Conduct\nOur Pledge​\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nOur Standards​\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nOur Responsibilities​\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nScope​\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nEnforcement​\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@tooljet.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\nAttribution​\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n\nEdit this page\nPrevious\nRunPy limitations\nNext\nSlack Code of Conduct\nOur Pledge\nOur Standards\nOur Responsibilities\nScope\nEnforcement\nAttribution"
  },
  {
    "title": "Localization | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/contributing-guide/l10n/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideLocalization\nVersion: 2.19.0\nLocalization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\nAdding Translations​\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n\n\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. fr is the language code for French.\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Français\" }\n    ]\n}\n\nNOTE\n\nFeel free to reach us on Slack for any help related to Localization.\n\nEdit this page\nPrevious\nTesting\nNext\nEsLint\nAdding Translations"
  },
  {
    "title": "ToolJet CLI | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/tooljet-cli/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideToolJet CLI\nVersion: 2.19.0\nToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\nINFO\n\nStarting from ToolJet CLI version 0.0.14, the creation of datasource plugins has been deprecated to prioritise marketplace plugins. This change enhances the plugin development experience and aligns with ToolJet's roadmap.\n\nInstallation​\n\nIn order to manage plugins for the ToolJet marketplace, including creating, updating, and deleting, you will need to utilize tooljet-cli. This can be installed via npm by entering the following command:\n\nnpm install -g @tooljet/cli\n\nEnsure the installation was successful​\ntooljet --version\n\nCommands​\ninfo​\n\nThis command returns the information about where tooljet is being run\n\ntooljet info\n\ncreate​\n\nThis command creates a new plugin.\n\ntooljet plugin create PLUGIN_NAME\n\nTIP\n\nRead the detailed guide on creating a marketplace plugin here.\n\ndelete​\n\nThis command deletes a plugin.\n\ntooljet plugin delete PLUGIN_NAME\n\n\nThe CLI will prompt developers to verify if the plugin to be deleted is a marketplace plugin before proceeding with the deletion.\n\ninstall​\n\nInstalls a new npm module inside a tooljet plugin\n\ntooljet plugin install [NPM_MODULE] --plugin <value>\n\nEdit this page\nPrevious\nMarketplace: Creating plugins\nNext\nTesting\nInstallation\nCommands\ninfo\ncreate\ndelete\ninstall"
  },
  {
    "title": "Testing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/contributing-guide/testing/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideTesting\nVersion: 2.19.0\nTesting\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\nSetting up​\nNavigate to the cypress-tests directory and enter the following command:\nnpm install\n\nRunning Tests​\nHeaded mode​\n\nTo run cypress in headed mode, run the following command:\n\nnpm run cy:open\n\n\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\nHeadless mode​\n\nTo run cypress in headless mode, run the following command:\n\nnpm run cy:run\n\n\nFor running specific spec in headless mode, run for specific spec\n\nnpm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js\n\nCAUTION\n\nIf some test specs need the environment variables, the user can pass them similar to the following command:\n\nnpm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'\n\n\nor the user can add env-vars in the cypress.config.js file\n\nINFO\n\nCheck all the Cypress commands here\n\nEdit this page\nPrevious\nToolJet CLI\nNext\nLocalization\nSetting up\nRunning Tests"
  },
  {
    "title": "Dashboard | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/dashboard/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nDashboard\nVersion: 2.19.0\nDashboard\n\nThe ToolJet Dashboard is the initial landing page that you see upon logging into your workspace. This interface serves as a central hub where you can access a variety of features. Primarily, it displays all the applications you've created within ToolJet. Moreover, you have the capability to create new workspaces and applications directly from this dashboard. Additionally, it provides an option to create folders for categorizing and managing applications for easier organization, access control, and workflow management.\n\nFurthermore, the dashboard serves as a gateway to various essential sections, such as Workflows, ToolJet Database, Data Sources, Marketplace, Workspace Settings, Instance Settings, and Audit logs. You can effortlessly navigate to these sections directly from the dashboard.\n\nWorkspace Manager​\n\nThe workspace manager is located on the top left corner of the dashboard. Clicking on the workspace manager will open a dropdown menu with a list of all the workspaces you are a part of. You can switch between workspaces by clicking on the workspace name from the dropdown menu.\n\nYou can also create a new workspace by clicking on the Add new workspace button on the bottom of the dropdown menu. Clicking on this button will open a modal, enter the name of the workspace and click on the Create Workspace button to create a new workspace. Workspaces can be renamed by clicking on the edit icon on the right side of the workspace name.\n\nCreate a new app​\n\nTo create a new app, click on the Create new app button on the top left corner of the dashboard. Clicking on this button will instantly create a new app and open the app builder.\n\n\n\n\nThere are three dots on the right side of the Create new app button. Clicking on these dots will open a dropdown menu with two options:\n\nChoose from templates​\n\nThis option will open a modal with a list of pre-built templates. You can choose any template from this list to create a new app.\n\nImport​\n\nThis option will open a file picker to import a JSON file. This JSON file should be the app exported from ToolJet.\n\nImporting app connected to marketplace plugins​\n\nWhen importing an app with marketplace plugins, the marketplace plugin should be installed in the tooljet workspace where the app is being imported. If the marketplace plugin is not installed, the app will be imported without the queries for that plugin.\n\nWhen marketplace plugin is installed​\n\nIf marketplace plugin is installed in the tooljet workspace where the app is being imported, the queries connected to the marketplace plugin will be available in the imported application. The queries will be linked to the data source with the same name if it is already present. If the data source is not present, a new data source will be created of that marketplace plugin and linked to the queries.\n\nWhen marketplace plugin is not installed​\n\nIf you have an app with a query linked to a marketplace plugin, and you import that app in a tooljet workspace where the marketplace plugin is not installed as the data source, the queries will be not be available in the imported application.\n\nImporting app connected to tooljet table​\n\nWhen the app(JSON file) that includes the table schema is imported, and the table is not present in the tooljet database of the workspace where the app is being imported, a new table will be created in the tooljet database with the same name as the table in the imported app.\n\nIf the table with the same name is already present in the workspace, the new table will be created with the name <table name>_<unix timestamp>. Example: <tablename>_1627980000.\n\nCreate a new folder​\n\nFolders can be created to organize your apps. To create a new folder, click on the + button on the left drawer of the dashboard. Clicking on this button will open a modal, enter the name of the folder and click on the Create Folder button to create a new folder.\n\nDelete or Edit Folder​\n\nA folder can be deleted or renamed. To delete or rename a folder, click on the kebab menu on the right side of the folder name. Clicking on kebab menu will open a dropdown menu with two options:\n\nEdit folder: This option will open a modal, enter the new name of the folder and click on the Edit button to rename the folder.\nDelete folder: This option will open a confirmation modal to delete the folder. Click on the Delete button to delete the folder.\nSearch folders​\n\nFolders can be searched by clicking on the search icon on the left drawer of the dashboard. Clicking on the search icon will open a search bar, enter the name of the folder to search.\n\nApp cards​\n\nThe dashboard displays all the apps created in the workspace as cards. These cards are displayed in a grid layout. The app cards display the name of the app, the name of the creator, and the date of creation. The app cards also display the app icon, which can be changed by clicking on the Change Icon option from the app menu.\n\nApp menu​\n\nThe app menu is located on the top right corner of the app card. Clicking on the app menu will open a dropdown menu with a list of options. These options are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nChange Icon​\n\nThis option will open a modal with a list of icons. You can choose any icon from this list to change the app icon.\n\nAdd to folder​\n\nThis option will open a modal with a list of folders. You can choose any folder from this list to add the app to the folder.\n\nClone app​\n\nSelecting this option will immediately open the cloned app in the app builder with the same configuration as the original app. The new app will be named as <original app name> followed by unix timestamp. Example: <original app name> 1627980000.\n\nExport app​\n\nThis option will download a JSON file of the application. This JSON file can be imported to ToolJet to create a new app. The exported app will include all the queries connected to global data sources including the data source created from Marketplace plugins.\n\nThis option allows you to select a specific version of the app to export or export all the versions of the app. To export a specific version of the app, select a version from the list of available versions in the modal and click on the Export selected version and to export all the versions of the app, click on the Export All button.\n\nExport ToolJet table schema​\n\nSelecting this option will inclue the schema of the tooljet table connected to that application in the exported JSON file. This option is available for all the apps on ToolJet however only the apps with a tooljet table connected(includes tjdb query) will have the schema included in the exported JSON file.\n\nThis JSON file can be used to import the application to ToolJet along with the table schema that was connected to the application.\n\nDelete app​\n\nThis option will open a confirmation modal to delete the app. Click on the Delete button to delete the app.\n\nApp search​\n\nApps can be searched by clicking on the search bar on the center of the dashboard. Click on the search bar and enter the name of the app to search.\n\nCurrent ToolJet Version​\n\nThe current version of ToolJet is displayed on the top right corner of the dashboard.\n\nEdit this page\nPrevious\nControl component (Component Specific Actions)\nNext\nOverview\nWorkspace Manager\nCreate a new app\nChoose from templates\nImport\nImporting app connected to marketplace plugins\nImporting app connected to tooljet table\nCreate a new folder\nDelete or Edit Folder\nSearch folders\nApp cards\nApp menu\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nApp search\nCurrent ToolJet Version"
  },
  {
    "title": "ToolJet Database | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/tooljet-database/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nToolJet Database\nVersion: 2.19.0\nToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\nEnabling the ToolJet Database for your instance​\n\nRequires:\n\nPostgREST server\nAdditional configuration for ToolJet server\n\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to true.\n\nPostgREST server​\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n\nTIP\n\nIf you have openssl installed, you can run the following command openssl rand -hex 32 to generate the value for PGRST_JWT_SECRET.\n\nIf this parameter is not specified then PostgREST refuses authentication requests.\n\nvariable\tdescription\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_DB_URI\tdatabase connection string for tooljet database\nPGRST_LOG_LEVEL\tinfo\nINFO\n\nPlease make sure that DB_URI is given in the format postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]\n\nAdditional ToolJet server configuration​\nvariable\tdescription\nENABLE_TOOLJET_DB\ttrue or false\nTOOLJET_DB\tDefault value is tooljet_db\nTOOLJET_DB_HOST\tdatabase host\nTOOLJET_DB_USER\tdatabase username\nTOOLJET_DB_PASS\tdatabase password\nTOOLJET_DB_PORT\tdatabase port\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_HOST\tpostgrest database host\n\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n\nTIP\n\nWhen this feature is enabled, the database name provided for TOOLJET_DB will be utilized to create a new database during server boot process in all of our production deploy setups. Incase you want to trigger it manually, use the command npm run db:create on ToolJet server.\n\nFeatures​\n\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\nExport table from the ToolJet Database to a JSON file.\nAccessing ToolJet Database​\n\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\n\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\nDatabase Editor​\n\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\nCreate New Table​\n\nFor creating a new table in ToolJet Database, click on the Create New Table button on the top left corner of the Database editor.\n\nWhen the Create New Table button is clicked, a drawer opens up from the right from where you can enter the details of your new table.\n\nFor creating a new table, you'll need to:​\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\nSupported data types​\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\nbigint: bigint is a numeric data type that is used to store whole numbers, that is, numbers without fractional components.\n\nClick on Create button to create a new table.\n\nSearch Table​\n\nYou can enter a search term to search through all tables in the database.\n\nAdd column​\n\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\n\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n\nColumn name: name of the column (key)\nData type: Check available data types here\nDefault Value Any default value for the column (not mandatory)\nDelete column​\n\nTo delete a particular column, just click on the column header and the delete button will appear, click on it to delete the column.\n\nAdd new row​\n\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\nEdit row​\n\nTo edit the rows from the ToolJet database dashboard, click on the Edit row button. A drawer will open from the right from where first you need to select the id of the row to be edited from the dropdown and then you can edit the cell values of the selected row.\n\nBulk upload data​\n\nYou can bulk upload data to the ToolJet database by clicking on the Bulk upload data button on the top of the database editor. On clicking the button, a drawer will open from the right from where you can upload a CSV file. This file is used to upsert records onto the table. If data for id column is missing it will insert new record with the row data else if id is present it will update the corresponding record with the corresponding row data.\n\nFrom the drawer, users can download the template CSV file in which they can enter the data to be uploaded to the ToolJet database's table or format their CSV file in the same way as the template file.\n\nOnce the CSV file is ready, click on the file picker to select the file or drag and drop the file in the file picker. Now, click on the Upload data button to upload the data to the ToolJet database.\n\nRequirements:\n\nThe data types of columns in the CSV file should match those in the ToolJet database table.\nThe id column with a serial data type should not contain duplicate values.\n\nLimitations:\n\nThere is a limit of 1000 rows per CSV file that can be uploaded to the ToolJet database.\nThe CSV file should not exceed 2MB in size.\nDelete records​\n\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\nFilter​\n\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\n\nAdding a filter on the table data​\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\nAvailable operations are:​\nequals: This operation is used to check if the value of the column is equal to the value entered in the input field.\ngreater than: This operation is used to check if the value of the column is greater than the value entered in the input field.\ngreater than or equal: This operation is used to check if the value of the column is greater than or equal to the value entered in the input field.\nless than: This operation is used to check if the value of the column is less than the value entered in the input field.\nless than or equal: This operation is used to check if the value of the column is less than or equal to the value entered in the input field.\nnot equal: This operation is used to check if the value of the column is not equal to the value entered in the input field.\nlike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nilike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. ex: ToolJet will match tooljet\nmatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nimatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nin: This operation is used to check if the value of the column is in the list of values entered in the input field. ex: 1,2,3\ncontains: This operation is used to check if the value of the column contains the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\ncontained: This operation is used to check if the value of the column is contained in the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nnot: This operation is used to negate the result of the operation selected in the dropdown. ex: not equals will return all the records where the value of the column is not equal to the value entered in the input field.\nSort​\n\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\nEdit table​\n\nTo edit the table name, click on the three vertical dots icon on the right of the table name and then click on the Edit option. A drawer will open from the right from where you can edit the table name.\n\nExport table​\n\nThe export table option allows you to download the selected table schema in a JSON file. This does not export the table data.\n\nWhile exporting the app, you can choose to export the app with or without table schema connected to the app.\n\nTo export the table schema, click on the three vertical dots icon on the right of the table name and then click on the Export option. A JSON file will be downloaded with the table schema.\n\nDelete table​\n\nTo delete a table, click on the three vertical dots icon on the right of the table name and then click on the Delete option. A confirmation modal will appear, click on the Delete button to delete the table.\n\nQuerying data from the ToolJet database​\n\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\nGo to the query panel, and click on the +Add button to add a new query, and select ToolJet Database\n\nSelect the table that you want to query from the dropdown, choose an operation from the dropdown, and then enter the required parameters for the selected operation. Click on the Run button to execute the query.\n\nINFO\nPreview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed as JSON or Raw.\nWhen a new query is created, by default the query name is set to tooljetdbN (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\nAvailable operations​\nList rows​\n\nThis operation returns all the records from the table\n\nOptional parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records.\nSort: Sort the query response by choosing a column and the order (ascending or descending).\nLimit: Limit the number of records to be returned by entering a number.\nCreate row​\n\nThis operation creates a new record in the table. You can create a single record or multiple records at once.\n\nRequired parameters​\nColumns: Choose the columns for which you want to add values for the new record and enter the values for the selected columns. You can also add a new column by clicking on the +Add column button.\nUpdate row​\n\nThis operation updates a record in the table. You can update a single record or multiple records at once.\n\nRequired parameter​\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\nColumns: Choose the columns for which you want to update the values for the selected record and enter the values for the selected columns.\nDelete row​\n\nThis operation deletes a record in the table. You can delete a single record or multiple records at once.\n\nRequired parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\nLimit: Limit the number of records to be deleted by entering a number.\nJoin tables​\n\nYou can join two or more tables in the ToolJet database by using the Join operation.\n\nRequired parameters​\n\nFrom: In the From section, there are the following parameters:\n\nSelected Table: Select the table from which you want to join the other table.\nType of Join: Select the type of join you want to perform. The available options are: Inner Join, Left Join, RIght Join, and Full Outer Join.\nJoining Table: Select the table that you want to join with the selected table.\nOn: Select the column from the selected table and the joining table on which you want to join the tables. Currently, only = operation is supported for joining tables.\nAND or OR condition: You can add multiple conditions by clicking on the +Add more button below each join. The conditions can be joined by AND or OR operation.\n\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records. The operations supported are same as the filter operations for the List rows operation.\n\nSort: Sort the query response by choosing a column and the order (ascending or descending).\n\nLimit: Limit the number of records to be returned by entering a number.\n\nOffset: Offset the number of records to be returned by entering a number. This parameter is used for pagination.\n\nSelect: Select the columns that you want to return in the query response. By default, all the columns are selected.\n\nINFO\n\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community\n\nEdit this page\nPrevious\nV2 migration guide\nNext\nCopilot\nEnabling the ToolJet Database for your instance\nPostgREST server\nFeatures\nAccessing ToolJet Database\nDatabase Editor\nCreate New Table\nSearch Table\nAdd column\nDelete column\nAdd new row\nEdit row\nBulk upload data\nDelete records\nFilter\nSort\nEdit table\nExport table\nDelete table\nQuerying data from the ToolJet database\nAvailable operations\nList rows\nCreate row\nUpdate row\nDelete row\nJoin tables"
  },
  {
    "title": "Architecture | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/contributing-guide/setup/architecture/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideArchitecture\nVersion: 2.19.0\nIntroduction\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n1. ToolJet Server​\n\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more.\n\nDependencies:\n\nPostgreSQL - ToolJet server persists data to a postgres database.\nEmail service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.\nPostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client​\n\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\n\nRequirements​\nNode version 18.3.0\nnpm version 8.11.0\nEdit this page\nPrevious\nContributing Guide\nNext\nGitHub Codespaces\n1. ToolJet Server\n2. ToolJet Client\nRequirements"
  },
  {
    "title": "Contributing Guide | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/category/contributing-guide/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing Guide\nVersion: 2.19.0\nContributing Guide\n\nGuides for contributing to ToolJet\n\n📄️ Architecture\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n🗃️ Setup\n\n5 items\n\n🗃️ Marketplace\n\n2 items\n\n📄️ ToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\n📄️ Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\n📄️ Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\n🗃️ Troubleshooting\n\n2 items\n\n📄️ Contributor Code of Conduct\n\nOur Pledge\n\n📄️ Slack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nPrevious\nPrint data from multiple tabs\nNext\nArchitecture"
  },
  {
    "title": "Copilot | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/tooljet-copilot/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nCopilot\nVersion: 2.19.0\nCopilot\nAvailable on: Paid plans\nBETA\n\nToolJet Copilot is currently in private beta for Business and Enterprise users only.\n\nToolJet Copilot helps you write your queries faster. It uses OpenAI to suggest queries based on your data.\n\nActivating Copilot​\n\nTo gain access to Copilot, all users, including administrators, can individually sign up for the waitlist program. Upon successful sign up, each user will be issued a distinctive API key linked to their account. However, the exclusive authority to activate Copilot within the workspace settings lies solely with administrators. Administrators can proceed to the Copilot section in the workspace settings, where they can utilize their respective API key to set the \"Enable Copilot\" toggle option.\n\nYou can join the waitlist here: https://tooljet.com/copilot\n\nINFO\nCopilot can be used by users who have permissions to edit the app with the copilot setup.\nUsing Copilot​\n\nOnce activated, the Copilot feature can be accessed while editing any query within the transformations section in the query editor.\n\nCopilot's functionality relies on the provision of clear and concise plain English prompts. It possesses the capability to interact with and retrieve information from various components, enabling it to generate code specific to the desired actions associated with those components. This capability is facilitated by Copilot's comprehensive understanding of the application's present state.\n\nToken Limit per Workspace​\n\nA token is a unit of text that language models like ChatGPT process, such as a word or a character. To ensure fair usage and resource allocation among workspaces, a token limit is implemented. Currently, the token limit is set to 400. If the token limit is surpassed, the request is declined with the message \"Unable to process request. Max tokens exceeded.\"\n\nRate-Limiting​\n\nTo prevent abuse or excessive usage of the Copilot API, rate-limiting measures are in place. The following rules apply:\n\nEach user is restricted to a maximum number of requests within a specific time frame.\nThe current rate limit allows for 100 requests per minute per user.\nIf a user surpasses the rate limit, subsequent requests from that user will be rejected.\nINFO\n\nWhen generating an API key, if a workspace has 5 editors, the daily request limit will be 500 (100 requests per editor). Even if the workspace later expands to 10 editors after a week, the maximum number of requests allowed per day will still be 500.\n\nExample: Generating a SQL statement​\n\nThis example demonstrates the usage of copilot by generating a SQL query to fetch the order details from a PostgreSQL database based on the key provided in the REST API data.\n\nCreate a RESTAPI query using this mock api endpoint: https://fakestoreapi.com/users/1\nEnable transformation on the query editor\n\nTo generate a SQL query using Copilot, first enter the desired prompt within comments in the transformations code editor. Once the prompt has been entered, simply click the Generate Code button, and Copilot will generate the corresponding SQL query.\n\nAssuming that a PostgreSQL data source is already connected and there are two tables in it, namely customer and orders, enter the provided prompt in the code editor:\n\n/*\nAssume the data is an object which has email key.\nassume we have a database with two tables: \"customer\" and \"orders.\" The \"customer\" table has columns such as \"customer_id,\" \"customer_name,\" and \"country.\" The \"orders\" table has columns such as \"order_id,\" \"customer_id,\" \"order_date,\" and \"total_amount.\"\nreturn a SQL query to retrieve the total order amounts for customers from the email key retrieved from the data, who have placed more than three orders.*/\n\n\nClick on the \"Generate Code\" button to generate the SQL query.\n\nOnce the code is generated, add a return statement below the code to return the generated SQL query. The variable name for the query might be different in your generated code.\n\nreturn query //the variable might be different in your generated code\n\n\nPreview the returned SQL statement in the preview block to check if it is correct. Then click on the \"Run\" button to trigger the query.\n\nOnce the query is executed, create a new PostgreSQL query in SQL mode and use JavaScript to get the data query data dynamically:\n\n{{queries.restapi1.data}}\n\nCAUTION\n\nWhile using ToolJet Copilot, it is important to note that the accuracy of the output cannot be guaranteed by the platform. Ultimately, it is your responsibility to assess and evaluate any query before executing it.\n\nIf you have feedback or questions about ToolJet Copilot, feel free to join our slack community.\n\nEdit this page\nPrevious\nToolJet Database\nNext\nOverview\nActivating Copilot\nUsing Copilot\nToken Limit per Workspace\nRate-Limiting\nExample: Generating a SQL statement"
  },
  {
    "title": "How To Guides | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/category/how-to/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nHow To\nVersion: 2.19.0\nHow To Guides\n\nHow To Guides for all the things ToolJet\n\n📄️ Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\n\n📄️ Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n📄️ Change text color in columns of the table\n\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\n📄️ Bulk update multiple rows in table\n\nCurrently, the data sources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query.\n\n📄️ Delete multiple rows in table\n\nThe table component in the ToolJet has the option for bulk selection of rows that can have various use cases such as updating or deleting records. However, the datasources does not support bulk delete or bulk update operations.\n\n📄️ Using server side pagination for efficient data handling in tables\n\nIn this guide we will learn how to use server side pagination in table component. This will be helpful if you have a large data set and you want to load data in chunks. This will also help you to improve the performance of your application. This guide will be helpful if you are using datasources like MySQL, PostgreSQL, MSSQL, MongoDB, etc. in which you can use limit and offset to fetch data in chunks. We have also included an example to load data from Google Sheets in chunks.\n\n📄️ Enable/Disable a component using current user's property\n\nLet's take look at the exposed variables of the current user property:\n\n📄️ Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\n\n📄️ Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query.\n\n📄️ Import external libraries using RunJS\n\nToolJet allows you to utilize external libraries in your app by importing them using the RunJS query.\n\n📄️ Run Actions from RunJS query\n\nNow you can trigger all the actions available in ToolJet from within the RunJS query. This guide includes the syntax for each action along with the example.\n\n📄️ Intentionally fail a RunJS query\n\nIn this how-to guide, we will create a RunJS query that will throw an error.\n\n📄️ Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\n📄️ Use the to_py() Function in RunPy: Converting JavaScript Objects to Python\n\nThis how-to guide will demonstrate the usage of to_py() function in RunPy queries for converting the JavaScript objects to Python.\n\n📄️ Access a user's location\n\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n\n📄️ Use S3 signed URL to upload documents\n\nIn this how-to guide, you'll learn to upload documents to S3 buckets using the S3 signed URL from a ToolJet application.\n\n📄️ Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage.\n\n📄️ Upload files on AWS S3 bucket\n\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\n\n📄️ Upload files using GCS\n\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\n\n📄️ Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\n📄️ Print data from multiple tabs\n\nIn this guide, we will learn how to print data from multiple tabs in ToolJet. This will be useful when you want to print an invoice or a report from your ToolJet application. For example, a tooljet app that has a set of tabs for each invoice and you want to print all the tabs in one go.\n\nPrevious\nPlivo\nNext\nUse Inspector"
  },
  {
    "title": "Marketplace | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/category/marketplace/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nMarketplace\nVersion: 2.19.0\nMarketplace\n📄️ Marketplace : Overview\n\nWith ToolJet Marketplace, ToolJet users can conveniently add custom plugins (datasources) to their workspaces. This feature enables users to create plugins that cater to their specific needs and integrate them seamlessly with ToolJet.\n\n🗃️ Marketplace Plugins\n\n5 items\n\nPrevious\nVersioning and Release\nNext\nMarketplace : Overview"
  },
  {
    "title": "Setup ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/setup/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSetup\nVersion: 2.19.0\nSetup ToolJet\n\nCheck out the different methods you can use to deploy ToolJet on your machine\n\nTry ToolJet\n\nTry out ToolJet with single docker command\n\nDigitalOcean\n\nQuickly deploy ToolJet using the Deploy to DigitalOcean button\n\nDocker\n\nDeploy ToolJet on a server using docker-compose\n\nAWS EC2\n\nDeploy ToolJet on AWS EC2 instances\n\nAWS ECS\n\nDeploy ToolJet on AWS ECS instances\n\nOpenshift\n\nDeploy ToolJet on Openshift\n\nHelm\n\nDeploy ToolJet with Helm Chart\n\nKubernetes\n\nDeploy ToolJet on a Kubernetes cluster\n\nKubernetes (GKE)\n\nDeploy ToolJet on a GKE Kubernetes cluster\n\nKubernetes (AKS)\n\nDeploy ToolJet on a AKS Kubernetes cluster\n\nAzure container apps\n\nDeploy ToolJet on a Azure Container Apps\n\nGoogle Cloud Run\n\nDeploy ToolJet on Cloud Run with GCloud CLI\n\nDeploying ToolJet client\n\nDeploy ToolJet Client on static website hosting services\n\nEnvironment variables\n\nEnvironment variables required by ToolJet Client and Server to start running\n\nConnecting via HTTP proxy\n\nEnvironment variables required by ToolJet to connect via HTTP proxy\n\nDeploying ToolJet on a subpath\n\nSteps to deploy ToolJet on a subpath rather than root of domain\n\nV2 migration guide\n\nThings to know before migrating to ToolJet V2\n\nEdit this page\nPrevious\nGetting Started\nNext\nTry ToolJet"
  },
  {
    "title": "Localization | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/contributing-guide/l10n/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideLocalization\nVersion: 2.22.0\nLocalization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\nAdding Translations​\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n\n\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. fr is the language code for French.\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Français\" }\n    ]\n}\n\nNOTE\n\nFeel free to reach us on Slack for any help related to Localization.\n\nEdit this page\nPrevious\nTesting\nNext\nEsLint\nAdding Translations"
  },
  {
    "title": "Security | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/security/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSecurity\nVersion: 2.22.0\nSecurity\nUncompromised Data Security with SOC 2 Compliance​\n\nWith SOC 2 compliance, Tooljet ensures the highest level of data security. The adherence to SOC 2 standards mirrors the rigorous data protection measures in place, covering everything from encryption to robust access controls. It also guarantees a consistent level of service availability and process integrity, instilling confidence in our customers and stakeholders about the safe handling of their sensitive information.\n\nData storage​\n\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\n\nDatasource credentials​\n\nAll the datasource credentials are securely encrypted using aes-256-gcm. The credentials are never exposed to the frontend ( ToolJet client ).\n\nOther security features​\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n\nIf you notice a security vulnerability, please let the team know by sending an email to security@tooljet.com.\n\nEdit this page\nPrevious\nSlack Code of Conduct\nNext\nTracking\nUncompromised Data Security with SOC 2 Compliance\nData storage\nDatasource credentials\nOther security features"
  },
  {
    "title": "Slack Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/contributing-guide/slackcoc/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideSlack Code of Conduct\nVersion: 2.22.0\nSlack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction​\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities — online and in-person— as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\nExpected behavior​\nBe welcoming.\nBe kind.\nLook out for each other.\nUnacceptable Behavior​\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\nWhere does the Code of Conduct apply?​\n\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\n\nIn addition, violations of this code outside our spaces may affect a person’s ability to participate in them.\n\nEnforcement​\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\nINFO\n\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n\nEtiquettes to follow​\n1. Be nice to everyone​\n2. Check off your resolved questions​\n\nIf you have received a useful reply to your question, please drop a ✅ reaction or a reply for affirmation.\n\n3. Try not to repost question​\n\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n\n4. Post in public​\n\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n\n5. Don't spam tags​\n\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n\n6. Use threads for discussion​\n\nTo keep the main channel area clear, we request to use threads to keep an ongoing conversation organized.\n\nEdit this page\nPrevious\nContributor Code of Conduct\nNext\nSecurity\nIntroduction\nExpected behavior\nUnacceptable Behavior\nWhere does the Code of Conduct apply?\nEnforcement\nEtiquettes to follow"
  },
  {
    "title": "Tracking | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/tracking/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nTracking\nVersion: 2.22.0\nTracking\nTIP\n\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n\nServer​\nTIP\n\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of CHECK_FOR_UPDATES environment variable to 0. This feature is enabled by default.\n\nClient​\n\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.\n\nTracking can be disabled by setting the value environment variable ENABLE_TRACKING to 0.\n\nEdit this page\nPrevious\nSecurity\nServer\nClient"
  },
  {
    "title": "Contributor Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/contributing-guide/code-of-conduct/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideContributor Code of Conduct\nVersion: 2.22.0\nContributor Covenant Code of Conduct\nOur Pledge​\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nOur Standards​\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nOur Responsibilities​\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nScope​\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nEnforcement​\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@tooljet.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\nAttribution​\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n\nEdit this page\nPrevious\nRunPy limitations\nNext\nSlack Code of Conduct\nOur Pledge\nOur Standards\nOur Responsibilities\nScope\nEnforcement\nAttribution"
  },
  {
    "title": "Testing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/contributing-guide/testing/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideTesting\nVersion: 2.22.0\nTesting\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\nSetting up​\nNavigate to the cypress-tests directory and enter the following command:\nnpm install\n\nRunning Tests​\nHeaded mode​\n\nTo run cypress in headed mode, run the following command:\n\nnpm run cy:open\n\n\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\nHeadless mode​\n\nTo run cypress in headless mode, run the following command:\n\nnpm run cy:run\n\n\nFor running specific spec in headless mode, run for specific spec\n\nnpm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js\n\nCAUTION\n\nIf some test specs need the environment variables, the user can pass them similar to the following command:\n\nnpm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'\n\n\nor the user can add env-vars in the cypress.config.js file\n\nINFO\n\nCheck all the Cypress commands here\n\nEdit this page\nPrevious\nToolJet CLI\nNext\nLocalization\nSetting up\nRunning Tests"
  },
  {
    "title": "ToolJet CLI | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/tooljet-cli/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideToolJet CLI\nVersion: 2.22.0\nToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\nINFO\n\nStarting from ToolJet CLI version 0.0.14, the creation of datasource plugins has been deprecated to prioritise marketplace plugins. This change enhances the plugin development experience and aligns with ToolJet's roadmap.\n\nInstallation​\n\nIn order to manage plugins for the ToolJet marketplace, including creating, updating, and deleting, you will need to utilize tooljet-cli. This can be installed via npm by entering the following command:\n\nnpm install -g @tooljet/cli\n\nEnsure the installation was successful​\ntooljet --version\n\nCommands​\ninfo​\n\nThis command returns the information about where tooljet is being run\n\ntooljet info\n\ncreate​\n\nThis command creates a new plugin.\n\ntooljet plugin create PLUGIN_NAME\n\nTIP\n\nRead the detailed guide on creating a marketplace plugin here.\n\ndelete​\n\nThis command deletes a plugin.\n\ntooljet plugin delete PLUGIN_NAME\n\n\nThe CLI will prompt developers to verify if the plugin to be deleted is a marketplace plugin before proceeding with the deletion.\n\ninstall​\n\nInstalls a new npm module inside a tooljet plugin\n\ntooljet plugin install [NPM_MODULE] --plugin <value>\n\nEdit this page\nPrevious\nMarketplace: Creating plugins\nNext\nTesting\nInstallation\nCommands\ninfo\ncreate\ndelete\ninstall"
  },
  {
    "title": "Architecture | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/contributing-guide/setup/architecture/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideArchitecture\nVersion: 2.22.0\nIntroduction\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n1. ToolJet Server​\n\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more.\n\nDependencies:\n\nPostgreSQL - ToolJet server persists data to a postgres database.\nEmail service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.\nPostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client​\n\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\n\nRequirements​\nNode version 18.3.0\nnpm version 8.11.0\nEdit this page\nPrevious\nContributing Guide\nNext\nGitHub Codespaces\n1. ToolJet Server\n2. ToolJet Client\nRequirements"
  },
  {
    "title": "Contributing Guide | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/category/contributing-guide/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing Guide\nVersion: 2.22.0\nContributing Guide\n\nGuides for contributing to ToolJet\n\n📄️ Architecture\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n🗃️ Setup\n\n5 items\n\n🗃️ Marketplace\n\n2 items\n\n📄️ ToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\n📄️ Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\n📄️ Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\n🗃️ Troubleshooting\n\n2 items\n\n📄️ Contributor Code of Conduct\n\nOur Pledge\n\n📄️ Slack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nPrevious\nPrint data from multiple tabs\nNext\nArchitecture"
  },
  {
    "title": "How To Guides | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/category/how-to/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nHow To\nVersion: 2.22.0\nHow To Guides\n\nHow To Guides for all the things ToolJet\n\n📄️ Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\n\n📄️ Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n📄️ Change text color in columns of the table\n\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\n📄️ Bulk update multiple rows in table\n\nCurrently, the data sources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query.\n\n📄️ Delete multiple rows in table\n\nThe table component in the ToolJet has the option for bulk selection of rows that can have various use cases such as updating or deleting records. However, the datasources does not support bulk delete or bulk update operations.\n\n📄️ Using server side pagination for efficient data handling in tables\n\nIn this guide we will learn how to use server side pagination in table component. This will be helpful if you have a large data set and you want to load data in chunks. This will also help you to improve the performance of your application. This guide will be helpful if you are using datasources like MySQL, PostgreSQL, MSSQL, MongoDB, etc. in which you can use limit and offset to fetch data in chunks. We have also included an example to load data from Google Sheets in chunks.\n\n📄️ Enable/Disable a component using current user's property\n\nLet's take look at the exposed variables of the current user property:\n\n📄️ Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\n\n📄️ Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query.\n\n📄️ Import external libraries using RunJS\n\nToolJet allows you to utilize external libraries in your app by importing them using the RunJS query.\n\n📄️ Run Actions from RunJS query\n\nNow you can trigger all the actions available in ToolJet from within the RunJS query. This guide includes the syntax for each action along with the example.\n\n📄️ Intentionally fail a RunJS query\n\nIn this how-to guide, we will create a RunJS query that will throw an error.\n\n📄️ Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\n📄️ Use the to_py() Function in RunPy: Converting JavaScript Objects to Python\n\nThis how-to guide will demonstrate the usage of to_py() function in RunPy queries for converting the JavaScript objects to Python.\n\n📄️ Access a user's location\n\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n\n📄️ Use S3 signed URL to upload documents\n\nIn this how-to guide, you'll learn to upload documents to S3 buckets using the S3 signed URL from a ToolJet application.\n\n📄️ Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage.\n\n📄️ Upload files on AWS S3 bucket\n\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\n\n📄️ Upload files using GCS\n\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\n\n📄️ Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\n📄️ Print data from multiple tabs\n\nIn this guide, we will learn how to print data from multiple tabs in ToolJet. This will be useful when you want to print an invoice or a report from your ToolJet application. For example, a tooljet app that has a set of tabs for each invoice and you want to print all the tabs in one go.\n\nPrevious\nPlivo\nNext\nUse Inspector"
  },
  {
    "title": "Marketplace | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/category/marketplace/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nMarketplace\nVersion: 2.22.0\nMarketplace\n📄️ Marketplace : Overview\n\nWith ToolJet Marketplace, ToolJet users can conveniently add custom plugins (datasources) to their workspaces. This feature enables users to create plugins that cater to their specific needs and integrate them seamlessly with ToolJet.\n\n🗃️ Marketplace Plugins\n\n5 items\n\nPrevious\nVersioning and Release\nNext\nMarketplace : Overview"
  },
  {
    "title": "Dashboard | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/dashboard/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nDashboard\nVersion: 2.22.0\nDashboard\n\nThe ToolJet Dashboard is the initial landing page that you see upon logging into your workspace. This interface serves as a central hub where you can access a variety of features. Primarily, it displays all the applications you've created within ToolJet. Moreover, you have the capability to create new workspaces and applications directly from this dashboard. Additionally, it provides an option to create folders for categorizing and managing applications for easier organization, access control, and workflow management.\n\nFurthermore, the dashboard serves as a gateway to various essential sections, such as Workflows, ToolJet Database, Data Sources, Marketplace, Workspace Settings, Instance Settings, and Audit logs. You can effortlessly navigate to these sections directly from the dashboard.\n\nWorkspace Manager​\n\nThe workspace manager is located on the bottom left corner of the dashboard. Clicking on the workspace manager will open a dropdown menu with a list of all the workspaces you are a part of. You can switch between workspaces by clicking on the workspace name from the dropdown menu.\n\nAdd new workspace​\n\nOn clicking the Add new workspace button, a modal will open where you can enter the name of the workspace, enter the unique workspace slug, and can see the preview of the workspace URL. Click on the + Create Workspace button to create a new workspace.\n\nPreviously, the workspace slug was an automatically generated workspace ID, like this: https://tooljet.com/262750db-b2b8-4abb-9404-8995c2ecb2a0. Now, you can set a custom, unique slug for your workspace which will generate a more accessible or readable URL such as https://tooljet.com/apac-team).\n\nConditions for workspace slug​\nThe workspace slug should be unique.\nThe workspace slug should not contain any special characters except -.\nThe workspace slug should not contain any spaces.\nThe workspace slug should not contain any capital letters.\nThe workspace slug should not be empty.\nEdit workspace​\n\nSimilar to the Add new workspace button, clicking on the Edit workspace button will open a modal where you can edit the name of the workspace and the workspace slug. Click on the Save button to update the changes.\n\nCreate a new app​\n\nTo create a new app, click on the Create new app button on the top left corner of the dashboard. Clicking on this button will open a modal where you can enter the name of the app and then click on the + Create app button to create a new app.\n\n\n\n\nThere are three dots on the right side of the Create new app button. Clicking on these dots will open a dropdown menu with two options:\n\nChoose from templates\nImport\nChoose from templates​\n\nThis option will open a modal with a list of pre-built templates. You can choose any template from this list to create a new app.\n\nImport​\n\nThis option will open a file picker to import a JSON file. This JSON file should be the app exported from ToolJet.\n\nImporting app connected to marketplace plugins​\n\nWhen importing an app with marketplace plugins, the marketplace plugin should be installed in the tooljet workspace where the app is being imported. If the marketplace plugin is not installed, the app will be imported without the queries for that plugin.\n\nWhen marketplace plugin is installed​\n\nIf marketplace plugin is installed in the tooljet workspace where the app is being imported, the queries connected to the marketplace plugin will be available in the imported application. The queries will be linked to the data source with the same name if it is already present. If the data source is not present, a new data source will be created of that marketplace plugin and linked to the queries.\n\nWhen marketplace plugin is not installed​\n\nIf you have an app with a query linked to a marketplace plugin, and you import that app in a tooljet workspace where the marketplace plugin is not installed as the data source, the queries will be not be available in the imported application.\n\nImporting app connected to tooljet table​\n\nWhen the app(JSON file) that includes the table schema is imported, and the table is not present in the tooljet database of the workspace where the app is being imported, a new table will be created in the tooljet database with the same name as the table in the imported app.\n\nIf the table with the same name is already present in the workspace, the new table will be created with the name <table name>_<unix timestamp>. Example: <tablename>_1627980000.\n\nFolders​\nCreate a new folder​\n\nFolders can be created to organize your apps. To create a new folder, click on the + button on the left drawer of the dashboard. Clicking on this button will open a modal, enter the name of the folder and click on the Create Folder button to create a new folder.\n\nDelete or Edit Folder​\n\nA folder can be deleted or renamed. To delete or rename a folder, click on the kebab menu on the right side of the folder name. Clicking on kebab menu will open a dropdown menu with two options:\n\nEdit folder: This option will open a modal, enter the new name of the folder and click on the Edit button to rename the folder.\nDelete folder: This option will open a confirmation modal to delete the folder. Click on the Delete button to delete the folder.\nSearch folders​\n\nFolders can be searched by clicking on the search icon on the left drawer of the dashboard. Clicking on the search icon will open a search bar, enter the name of the folder to search.\n\nSlug for folders​\n\nThe folder's URL slug is generated automatically from its name, providing direct access to the folder using the slug.\n\nTo get the URL of a specific folder, the user will have to select that folder and then copy the URL from the address bar of the browser. The copied URL can be used to share with other users of the workspace.\n\nExample: If the name of the folder is customer support, The folder can be accessed directly from the URL https://tooljet.com/<workspace-name>?folder=customer%20support.\n\nApp cards​\n\nThe dashboard displays all the apps created in the workspace as cards. These cards are displayed in a grid layout. The app cards display the name of the app, the name of the creator, and the date of creation. The app cards also display the app icon, which can be changed by clicking on the Change Icon option from the app menu.\n\nApp menu​\n\nThe app menu is located on the top right corner of the app card. Clicking on the app menu will open a dropdown menu with a list of options. These options are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nChange Icon​\n\nThis option will open a modal with a list of icons. You can choose any icon from this list to change the app icon.\n\nAdd to folder​\n\nThis option will open a modal with a list of folders. You can choose any folder from this list to add the app to the folder.\n\nClone app​\n\nSelecting this option will immediately open the cloned app in the app builder with the same configuration as the original app. The new app will be named as <original app name> followed by unix timestamp. Example: <original app name> 1627980000.\n\nExport app​\n\nThis option will download a JSON file of the application. This JSON file can be imported to ToolJet to create a new app. The exported app will include all the queries connected to global data sources including the data source created from Marketplace plugins.\n\nThis option allows you to select a specific version of the app to export or export all the versions of the app. To export a specific version of the app, select a version from the list of available versions in the modal and click on the Export selected version and to export all the versions of the app, click on the Export All button.\n\nExport ToolJet table schema​\n\nSelecting this option will inclue the schema of the tooljet table connected to that application in the exported JSON file. This option is available for all the apps on ToolJet however only the apps with a tooljet table connected(includes tjdb query) will have the schema included in the exported JSON file.\n\nThis JSON file can be used to import the application to ToolJet along with the table schema that was connected to the application.\n\nDelete app​\n\nThis option will open a confirmation modal to delete the app. Click on the Delete button to delete the app.\n\nApp search​\n\nApps can be searched by clicking on the search bar on the center of the dashboard. Click on the search bar and enter the name of the app to search.\n\nCurrent ToolJet Version​\n\nThe current version of ToolJet is displayed on the top right corner of the dashboard.\n\nEdit this page\nPrevious\nControl component (Component Specific Actions)\nNext\nOverview\nWorkspace Manager\nAdd new workspace\nEdit workspace\nCreate a new app\nChoose from templates\nImport\nImporting app connected to marketplace plugins\nImporting app connected to tooljet table\nFolders\nCreate a new folder\nDelete or Edit Folder\nSearch folders\nSlug for folders\nApp cards\nApp menu\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nApp search\nCurrent ToolJet Version"
  },
  {
    "title": "Copilot | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/tooljet-copilot/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nCopilot\nVersion: 2.22.0\nCopilot\nAvailable on: Paid plans\nBETA\n\nToolJet Copilot is currently in private beta for Business and Enterprise users only.\n\nToolJet Copilot helps you write your queries faster. It uses OpenAI to suggest queries based on your data.\n\nActivating Copilot​\n\nTo gain access to Copilot, all users, including administrators, can individually sign up for the waitlist program. Upon successful sign up, each user will be issued a distinctive API key linked to their account. However, the exclusive authority to activate Copilot within the workspace settings lies solely with administrators. Administrators can proceed to the Copilot section in the workspace settings, where they can utilize their respective API key to set the \"Enable Copilot\" toggle option.\n\nYou can join the waitlist here: https://tooljet.com/copilot\n\nINFO\nCopilot can be used by users who have permissions to edit the app with the copilot setup.\nUsing Copilot​\n\nOnce activated, the Copilot feature can be accessed while editing any query within the transformations section in the query editor.\n\nCopilot's functionality relies on the provision of clear and concise plain English prompts. It possesses the capability to interact with and retrieve information from various components, enabling it to generate code specific to the desired actions associated with those components. This capability is facilitated by Copilot's comprehensive understanding of the application's present state.\n\nToken Limit per Workspace​\n\nA token is a unit of text that language models like ChatGPT process, such as a word or a character. To ensure fair usage and resource allocation among workspaces, a token limit is implemented. Currently, the token limit is set to 400. If the token limit is surpassed, the request is declined with the message \"Unable to process request. Max tokens exceeded.\"\n\nRate-Limiting​\n\nTo prevent abuse or excessive usage of the Copilot API, rate-limiting measures are in place. The following rules apply:\n\nEach user is restricted to a maximum number of requests within a specific time frame.\nThe current rate limit allows for 100 requests per minute per user.\nIf a user surpasses the rate limit, subsequent requests from that user will be rejected.\nINFO\n\nWhen generating an API key, if a workspace has 5 editors, the daily request limit will be 500 (100 requests per editor). Even if the workspace later expands to 10 editors after a week, the maximum number of requests allowed per day will still be 500.\n\nExample: Generating a SQL statement​\n\nThis example demonstrates the usage of copilot by generating a SQL query to fetch the order details from a PostgreSQL database based on the key provided in the REST API data.\n\nCreate a RESTAPI query using this mock api endpoint: https://fakestoreapi.com/users/1\nEnable transformation on the query editor\n\nTo generate a SQL query using Copilot, first enter the desired prompt within comments in the transformations code editor. Once the prompt has been entered, simply click the Generate Code button, and Copilot will generate the corresponding SQL query.\n\nAssuming that a PostgreSQL data source is already connected and there are two tables in it, namely customer and orders, enter the provided prompt in the code editor:\n\n/*\nAssume the data is an object which has email key.\nassume we have a database with two tables: \"customer\" and \"orders.\" The \"customer\" table has columns such as \"customer_id,\" \"customer_name,\" and \"country.\" The \"orders\" table has columns such as \"order_id,\" \"customer_id,\" \"order_date,\" and \"total_amount.\"\nreturn a SQL query to retrieve the total order amounts for customers from the email key retrieved from the data, who have placed more than three orders.*/\n\n\nClick on the \"Generate Code\" button to generate the SQL query.\n\nOnce the code is generated, add a return statement below the code to return the generated SQL query. The variable name for the query might be different in your generated code.\n\nreturn query //the variable might be different in your generated code\n\n\nPreview the returned SQL statement in the preview block to check if it is correct. Then click on the \"Run\" button to trigger the query.\n\nOnce the query is executed, create a new PostgreSQL query in SQL mode and use JavaScript to get the data query data dynamically:\n\n{{queries.restapi1.data}}\n\nCAUTION\n\nWhile using ToolJet Copilot, it is important to note that the accuracy of the output cannot be guaranteed by the platform. Ultimately, it is your responsibility to assess and evaluate any query before executing it.\n\nIf you have feedback or questions about ToolJet Copilot, feel free to join our slack community.\n\nEdit this page\nPrevious\nToolJet Database\nNext\nOverview\nActivating Copilot\nUsing Copilot\nToken Limit per Workspace\nRate-Limiting\nExample: Generating a SQL statement"
  },
  {
    "title": "ToolJet Database | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/tooljet-database/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nToolJet Database\nVersion: 2.22.0\nToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\nEnabling the ToolJet Database for your instance​\n\nRequires:\n\nPostgREST server\nAdditional configuration for ToolJet server\n\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to true.\n\nPostgREST server​\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n\nTIP\n\nIf you have openssl installed, you can run the following command openssl rand -hex 32 to generate the value for PGRST_JWT_SECRET.\n\nIf this parameter is not specified then PostgREST refuses authentication requests.\n\nvariable\tdescription\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_DB_URI\tdatabase connection string for tooljet database\nPGRST_LOG_LEVEL\tinfo\nINFO\n\nPlease make sure that DB_URI is given in the format postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]\n\nAdditional ToolJet server configuration​\nvariable\tdescription\nENABLE_TOOLJET_DB\ttrue or false\nTOOLJET_DB\tDefault value is tooljet_db\nTOOLJET_DB_HOST\tdatabase host\nTOOLJET_DB_USER\tdatabase username\nTOOLJET_DB_PASS\tdatabase password\nTOOLJET_DB_PORT\tdatabase port\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_HOST\tpostgrest database host\n\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n\nTIP\n\nWhen this feature is enabled, the database name provided for TOOLJET_DB will be utilized to create a new database during server boot process in all of our production deploy setups. Incase you want to trigger it manually, use the command npm run db:create on ToolJet server.\n\nFeatures​\n\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\nExport table from the ToolJet Database to a JSON file.\nAccessing ToolJet Database​\n\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\n\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\nDatabase Editor​\n\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\nCreate New Table​\n\nFor creating a new table in ToolJet Database, click on the Create New Table button on the top left corner of the Database editor.\n\nWhen the Create New Table button is clicked, a drawer opens up from the right from where you can enter the details of your new table.\n\nFor creating a new table, you'll need to:​\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\nSupported data types​\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\nbigint: bigint is a numeric data type that is used to store whole numbers, that is, numbers without fractional components.\n\nClick on Create button to create a new table.\n\nSearch Table​\n\nYou can enter a search term to search through all tables in the database.\n\nAdd column​\n\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\n\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n\nColumn name: name of the column (key)\nData type: Check available data types here\nDefault Value Any default value for the column (not mandatory)\nDelete column​\n\nTo delete a particular column, just click on the column header and the delete button will appear, click on it to delete the column.\n\nAdd new row​\n\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\nEdit row​\n\nTo edit the rows from the ToolJet database dashboard, click on the Edit row button. A drawer will open from the right from where first you need to select the id of the row to be edited from the dropdown and then you can edit the cell values of the selected row.\n\nBulk upload data​\n\nYou can bulk upload data to the ToolJet database by clicking on the Bulk upload data button on the top of the database editor. On clicking the button, a drawer will open from the right from where you can upload a CSV file. This file is used to upsert records onto the table. If data for id column is missing it will insert new record with the row data else if id is present it will update the corresponding record with the corresponding row data.\n\nFrom the drawer, users can download the template CSV file in which they can enter the data to be uploaded to the ToolJet database's table or format their CSV file in the same way as the template file.\n\nOnce the CSV file is ready, click on the file picker to select the file or drag and drop the file in the file picker. Now, click on the Upload data button to upload the data to the ToolJet database.\n\nRequirements:\n\nThe data types of columns in the CSV file should match those in the ToolJet database table.\nThe id column with a serial data type should not contain duplicate values.\n\nLimitations:\n\nThere is a limit of 1000 rows per CSV file that can be uploaded to the ToolJet database.\nThe CSV file should not exceed 2MB in size.\nDelete records​\n\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\nFilter​\n\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\n\nAdding a filter on the table data​\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\nAvailable operations are:​\nequals: This operation is used to check if the value of the column is equal to the value entered in the input field.\ngreater than: This operation is used to check if the value of the column is greater than the value entered in the input field.\ngreater than or equal: This operation is used to check if the value of the column is greater than or equal to the value entered in the input field.\nless than: This operation is used to check if the value of the column is less than the value entered in the input field.\nless than or equal: This operation is used to check if the value of the column is less than or equal to the value entered in the input field.\nnot equal: This operation is used to check if the value of the column is not equal to the value entered in the input field.\nlike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nilike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. ex: ToolJet will match tooljet\nmatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nimatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nin: This operation is used to check if the value of the column is in the list of values entered in the input field. ex: 1,2,3\ncontains: This operation is used to check if the value of the column contains the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\ncontained: This operation is used to check if the value of the column is contained in the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nnot: This operation is used to negate the result of the operation selected in the dropdown. ex: not equals will return all the records where the value of the column is not equal to the value entered in the input field.\nSort​\n\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\nEdit table​\n\nTo edit the table name, click on the three vertical dots icon on the right of the table name and then click on the Edit option. A drawer will open from the right from where you can edit the table name.\n\nExport table​\n\nThe export table option allows you to download the selected table schema in a JSON file. This does not export the table data.\n\nWhile exporting the app, you can choose to export the app with or without table schema connected to the app.\n\nTo export the table schema, click on the three vertical dots icon on the right of the table name and then click on the Export option. A JSON file will be downloaded with the table schema.\n\nDelete table​\n\nTo delete a table, click on the three vertical dots icon on the right of the table name and then click on the Delete option. A confirmation modal will appear, click on the Delete button to delete the table.\n\nQuerying data from the ToolJet database​\n\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\nGo to the query panel, and click on the +Add button to add a new query, and select ToolJet Database\n\nSelect the table that you want to query from the dropdown, choose an operation from the dropdown, and then enter the required parameters for the selected operation. Click on the Run button to execute the query.\n\nINFO\nPreview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed as JSON or Raw.\nWhen a new query is created, by default the query name is set to tooljetdbN (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\nAvailable operations​\nList rows​\n\nThis operation returns all the records from the table\n\nOptional parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records.\nSort: Sort the query response by choosing a column and the order (ascending or descending).\nLimit: Limit the number of records to be returned by entering a number.\nCreate row​\n\nThis operation creates a new record in the table. You can create a single record or multiple records at once.\n\nRequired parameters​\nColumns: Choose the columns for which you want to add values for the new record and enter the values for the selected columns. You can also add a new column by clicking on the +Add column button.\nUpdate row​\n\nThis operation updates a record in the table. You can update a single record or multiple records at once.\n\nRequired parameter​\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\nColumns: Choose the columns for which you want to update the values for the selected record and enter the values for the selected columns.\nDelete row​\n\nThis operation deletes a record in the table. You can delete a single record or multiple records at once.\n\nRequired parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\nLimit: Limit the number of records to be deleted by entering a number.\nJoin tables​\n\nYou can join two or more tables in the ToolJet database by using the Join operation.\n\nRequired parameters​\n\nFrom: In the From section, there are the following parameters:\n\nSelected Table: Select the table from which you want to join the other table.\nType of Join: Select the type of join you want to perform. The available options are: Inner Join, Left Join, RIght Join, and Full Outer Join.\nJoining Table: Select the table that you want to join with the selected table.\nOn: Select the column from the selected table and the joining table on which you want to join the tables. Currently, only = operation is supported for joining tables.\nAND or OR condition: You can add multiple conditions by clicking on the +Add more button below each join. The conditions can be joined by AND or OR operation.\n\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records. The operations supported are same as the filter operations for the List rows operation.\n\nSort: Sort the query response by choosing a column and the order (ascending or descending).\n\nLimit: Limit the number of records to be returned by entering a number.\n\nOffset: Offset the number of records to be returned by entering a number. This parameter is used for pagination.\n\nSelect: Select the columns that you want to return in the query response. By default, all the columns are selected.\n\nINFO\n\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community\n\nEdit this page\nPrevious\nV2 migration guide\nNext\nCopilot\nEnabling the ToolJet Database for your instance\nPostgREST server\nFeatures\nAccessing ToolJet Database\nDatabase Editor\nCreate New Table\nSearch Table\nAdd column\nDelete column\nAdd new row\nEdit row\nBulk upload data\nDelete records\nFilter\nSort\nEdit table\nExport table\nDelete table\nQuerying data from the ToolJet database\nAvailable operations\nList rows\nCreate row\nUpdate row\nDelete row\nJoin tables"
  },
  {
    "title": "Tracking | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/tracking/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nTracking\nVersion: 2.23.0\nTracking\nTIP\n\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n\nServer​\nTIP\n\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of CHECK_FOR_UPDATES environment variable to 0. This feature is enabled by default.\n\nClient​\n\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.\n\nTracking can be disabled by setting the value environment variable ENABLE_TRACKING to 0.\n\nEdit this page\nPrevious\nSecurity\nServer\nClient"
  },
  {
    "title": "Security | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/security/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSecurity\nVersion: 2.23.0\nSecurity\nUncompromised Data Security with SOC 2 Compliance​\n\nWith SOC 2 compliance, Tooljet ensures the highest level of data security. The adherence to SOC 2 standards mirrors the rigorous data protection measures in place, covering everything from encryption to robust access controls. It also guarantees a consistent level of service availability and process integrity, instilling confidence in our customers and stakeholders about the safe handling of their sensitive information.\n\nData storage​\n\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\n\nDatasource credentials​\n\nAll the datasource credentials are securely encrypted using aes-256-gcm. The credentials are never exposed to the frontend ( ToolJet client ).\n\nOther security features​\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n\nIf you notice a security vulnerability, please let the team know by sending an email to security@tooljet.com.\n\nEdit this page\nPrevious\nSlack Code of Conduct\nNext\nTracking\nUncompromised Data Security with SOC 2 Compliance\nData storage\nDatasource credentials\nOther security features"
  },
  {
    "title": "Setup ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/setup/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSetup\nVersion: 2.22.0\nSetup ToolJet\n\nCheck out the different methods you can use to deploy ToolJet on your machine\n\nTry ToolJet\n\nTry out ToolJet with single docker command\n\nDigitalOcean\n\nQuickly deploy ToolJet using the Deploy to DigitalOcean button\n\nDocker\n\nDeploy ToolJet on a server using docker-compose\n\nAWS EC2\n\nDeploy ToolJet on AWS EC2 instances\n\nAWS ECS\n\nDeploy ToolJet on AWS ECS instances\n\nOpenshift\n\nDeploy ToolJet on Openshift\n\nHelm\n\nDeploy ToolJet with Helm Chart\n\nKubernetes\n\nDeploy ToolJet on a Kubernetes cluster\n\nKubernetes (GKE)\n\nDeploy ToolJet on a GKE Kubernetes cluster\n\nKubernetes (AKS)\n\nDeploy ToolJet on a AKS Kubernetes cluster\n\nAzure container apps\n\nDeploy ToolJet on a Azure Container Apps\n\nGoogle Cloud Run\n\nDeploy ToolJet on Cloud Run with GCloud CLI\n\nDeploying ToolJet client\n\nDeploy ToolJet Client on static website hosting services\n\nEnvironment variables\n\nEnvironment variables required by ToolJet Client and Server to start running\n\nConnecting via HTTP proxy\n\nEnvironment variables required by ToolJet to connect via HTTP proxy\n\nDeploying ToolJet on a subpath\n\nSteps to deploy ToolJet on a subpath rather than root of domain\n\nV2 migration guide\n\nThings to know before migrating to ToolJet V2\n\nEdit this page\nPrevious\nGetting Started\nNext\nTry ToolJet"
  },
  {
    "title": "Slack Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/contributing-guide/slackcoc/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideSlack Code of Conduct\nVersion: 2.23.0\nSlack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction​\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities — online and in-person— as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\nExpected behavior​\nBe welcoming.\nBe kind.\nLook out for each other.\nUnacceptable Behavior​\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\nWhere does the Code of Conduct apply?​\n\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\n\nIn addition, violations of this code outside our spaces may affect a person’s ability to participate in them.\n\nEnforcement​\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\nINFO\n\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n\nEtiquettes to follow​\n1. Be nice to everyone​\n2. Check off your resolved questions​\n\nIf you have received a useful reply to your question, please drop a ✅ reaction or a reply for affirmation.\n\n3. Try not to repost question​\n\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n\n4. Post in public​\n\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n\n5. Don't spam tags​\n\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n\n6. Use threads for discussion​\n\nTo keep the main channel area clear, we request to use threads to keep an ongoing conversation organized.\n\nEdit this page\nPrevious\nContributor Code of Conduct\nNext\nSecurity\nIntroduction\nExpected behavior\nUnacceptable Behavior\nWhere does the Code of Conduct apply?\nEnforcement\nEtiquettes to follow"
  },
  {
    "title": "Localization | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/contributing-guide/l10n/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideLocalization\nVersion: 2.23.0\nLocalization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\nAdding Translations​\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n\n\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. fr is the language code for French.\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Français\" }\n    ]\n}\n\nNOTE\n\nFeel free to reach us on Slack for any help related to Localization.\n\nEdit this page\nPrevious\nTesting\nNext\nEsLint\nAdding Translations"
  },
  {
    "title": "Contributor Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/contributing-guide/code-of-conduct/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideContributor Code of Conduct\nVersion: 2.23.0\nContributor Covenant Code of Conduct\nOur Pledge​\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nOur Standards​\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nOur Responsibilities​\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nScope​\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nEnforcement​\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@tooljet.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\nAttribution​\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n\nEdit this page\nPrevious\nRunPy limitations\nNext\nSlack Code of Conduct\nOur Pledge\nOur Standards\nOur Responsibilities\nScope\nEnforcement\nAttribution"
  },
  {
    "title": "Testing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/contributing-guide/testing/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideTesting\nVersion: 2.23.0\nTesting\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\nSetting up​\nNavigate to the cypress-tests directory and enter the following command:\nnpm install\n\nRunning Tests​\nHeaded mode​\n\nTo run cypress in headed mode, run the following command:\n\nnpm run cy:open\n\n\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\nHeadless mode​\n\nTo run cypress in headless mode, run the following command:\n\nnpm run cy:run\n\n\nFor running specific spec in headless mode, run for specific spec\n\nnpm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js\n\nCAUTION\n\nIf some test specs need the environment variables, the user can pass them similar to the following command:\n\nnpm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'\n\n\nor the user can add env-vars in the cypress.config.js file\n\nINFO\n\nCheck all the Cypress commands here\n\nEdit this page\nPrevious\nToolJet CLI\nNext\nLocalization\nSetting up\nRunning Tests"
  },
  {
    "title": "ToolJet CLI | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/tooljet-cli/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideToolJet CLI\nVersion: 2.23.0\nToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\nINFO\n\nStarting from ToolJet CLI version 0.0.14, the creation of datasource plugins has been deprecated to prioritise marketplace plugins. This change enhances the plugin development experience and aligns with ToolJet's roadmap.\n\nInstallation​\n\nIn order to manage plugins for the ToolJet marketplace, including creating, updating, and deleting, you will need to utilize tooljet-cli. This can be installed via npm by entering the following command:\n\nnpm install -g @tooljet/cli\n\nEnsure the installation was successful​\ntooljet --version\n\nCommands​\ninfo​\n\nThis command returns the information about where tooljet is being run\n\ntooljet info\n\ncreate​\n\nThis command creates a new plugin.\n\ntooljet plugin create PLUGIN_NAME\n\nTIP\n\nRead the detailed guide on creating a marketplace plugin here.\n\ndelete​\n\nThis command deletes a plugin.\n\ntooljet plugin delete PLUGIN_NAME\n\n\nThe CLI will prompt developers to verify if the plugin to be deleted is a marketplace plugin before proceeding with the deletion.\n\ninstall​\n\nInstalls a new npm module inside a tooljet plugin\n\ntooljet plugin install [NPM_MODULE] --plugin <value>\n\nEdit this page\nPrevious\nMarketplace: Creating plugins\nNext\nTesting\nInstallation\nCommands\ninfo\ncreate\ndelete\ninstall"
  },
  {
    "title": "Architecture | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/contributing-guide/setup/architecture/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideArchitecture\nVersion: 2.23.0\nIntroduction\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n1. ToolJet Server​\n\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more.\n\nDependencies:\n\nPostgreSQL - ToolJet server persists data to a postgres database.\nEmail service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.\nPostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client​\n\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\n\nRequirements​\nNode version 18.3.0\nnpm version 8.11.0\nEdit this page\nPrevious\nContributing Guide\nNext\nMac OS\n1. ToolJet Server\n2. ToolJet Client\nRequirements"
  },
  {
    "title": "Contributing Guide | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/category/contributing-guide/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing Guide\nVersion: 2.23.0\nContributing Guide\n\nGuides for contributing to ToolJet\n\n📄️ Architecture\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n🗃️ Setup\n\n4 items\n\n🗃️ Marketplace\n\n2 items\n\n📄️ ToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\n📄️ Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\n📄️ Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\n🗃️ Troubleshooting\n\n2 items\n\n📄️ Contributor Code of Conduct\n\nOur Pledge\n\n📄️ Slack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nPrevious\nPrint data from multiple tabs\nNext\nArchitecture"
  },
  {
    "title": "Copilot | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/tooljet-copilot/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nCopilot\nVersion: 2.23.0\nCopilot\nAvailable on: Paid plans\nBETA\n\nToolJet Copilot is currently in private beta for Business and Enterprise users only.\n\nToolJet Copilot helps you write your queries faster. It uses OpenAI to suggest queries based on your data.\n\nActivating Copilot​\n\nTo gain access to Copilot, all users, including administrators, can individually sign up for the waitlist program. Upon successful sign up, each user will be issued a distinctive API key linked to their account. However, the exclusive authority to activate Copilot within the workspace settings lies solely with administrators. Administrators can proceed to the Copilot section in the workspace settings, where they can utilize their respective API key to set the \"Enable Copilot\" toggle option.\n\nYou can join the waitlist here: https://tooljet.com/copilot\n\nINFO\nCopilot can be used by users who have permissions to edit the app with the copilot setup.\nUsing Copilot​\n\nOnce activated, the Copilot feature can be accessed while editing any query within the transformations section in the query editor.\n\nCopilot's functionality relies on the provision of clear and concise plain English prompts. It possesses the capability to interact with and retrieve information from various components, enabling it to generate code specific to the desired actions associated with those components. This capability is facilitated by Copilot's comprehensive understanding of the application's present state.\n\nToken Limit per Workspace​\n\nA token is a unit of text that language models like ChatGPT process, such as a word or a character. To ensure fair usage and resource allocation among workspaces, a token limit is implemented. Currently, the token limit is set to 400. If the token limit is surpassed, the request is declined with the message \"Unable to process request. Max tokens exceeded.\"\n\nRate-Limiting​\n\nTo prevent abuse or excessive usage of the Copilot API, rate-limiting measures are in place. The following rules apply:\n\nEach user is restricted to a maximum number of requests within a specific time frame.\nThe current rate limit allows for 100 requests per minute per user.\nIf a user surpasses the rate limit, subsequent requests from that user will be rejected.\nINFO\n\nWhen generating an API key, if a workspace has 5 editors, the daily request limit will be 500 (100 requests per editor). Even if the workspace later expands to 10 editors after a week, the maximum number of requests allowed per day will still be 500.\n\nExample: Generating a SQL statement​\n\nThis example demonstrates the usage of copilot by generating a SQL query to fetch the order details from a PostgreSQL database based on the key provided in the REST API data.\n\nCreate a RESTAPI query using this mock api endpoint: https://fakestoreapi.com/users/1\nEnable transformation on the query editor\n\nTo generate a SQL query using Copilot, first enter the desired prompt within comments in the transformations code editor. Once the prompt has been entered, simply click the Generate Code button, and Copilot will generate the corresponding SQL query.\n\nAssuming that a PostgreSQL data source is already connected and there are two tables in it, namely customer and orders, enter the provided prompt in the code editor:\n\n/*\nAssume the data is an object which has email key.\nassume we have a database with two tables: \"customer\" and \"orders.\" The \"customer\" table has columns such as \"customer_id,\" \"customer_name,\" and \"country.\" The \"orders\" table has columns such as \"order_id,\" \"customer_id,\" \"order_date,\" and \"total_amount.\"\nreturn a SQL query to retrieve the total order amounts for customers from the email key retrieved from the data, who have placed more than three orders.*/\n\n\nClick on the \"Generate Code\" button to generate the SQL query.\n\nOnce the code is generated, add a return statement below the code to return the generated SQL query. The variable name for the query might be different in your generated code.\n\nreturn query //the variable might be different in your generated code\n\n\nPreview the returned SQL statement in the preview block to check if it is correct. Then click on the \"Run\" button to trigger the query.\n\nOnce the query is executed, create a new PostgreSQL query in SQL mode and use JavaScript to get the data query data dynamically:\n\n{{queries.restapi1.data}}\n\nCAUTION\n\nWhile using ToolJet Copilot, it is important to note that the accuracy of the output cannot be guaranteed by the platform. Ultimately, it is your responsibility to assess and evaluate any query before executing it.\n\nIf you have feedback or questions about ToolJet Copilot, feel free to join our slack community.\n\nEdit this page\nPrevious\nToolJet Database\nNext\nOverview\nActivating Copilot\nUsing Copilot\nToken Limit per Workspace\nRate-Limiting\nExample: Generating a SQL statement"
  },
  {
    "title": "Dashboard | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/dashboard/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nDashboard\nVersion: 2.23.0\nDashboard\n\nThe ToolJet Dashboard is the initial landing page that you see upon logging into your workspace. This interface serves as a central hub where you can access a variety of features. Primarily, it displays all the applications you've created within ToolJet. Moreover, you have the capability to create new workspaces and applications directly from this dashboard. Additionally, it provides an option to create folders for categorizing and managing applications for easier organization, access control, and workflow management.\n\nFurthermore, the dashboard serves as a gateway to various essential sections, such as Workflows, ToolJet Database, Data Sources, Marketplace, Workspace Settings, Instance Settings, and Audit logs. You can effortlessly navigate to these sections directly from the dashboard.\n\nWorkspace Manager​\n\nThe workspace manager is located on the bottom left corner of the dashboard. Clicking on the workspace manager will open a dropdown menu with a list of all the workspaces you are a part of. You can switch between workspaces by clicking on the workspace name from the dropdown menu.\n\nAdd new workspace​\n\nOn clicking the Add new workspace button, a modal will open where you can enter the name of the workspace, enter the unique workspace slug, and can see the preview of the workspace URL. Click on the + Create Workspace button to create a new workspace.\n\nPreviously, the workspace slug was an automatically generated workspace ID, like this: https://tooljet.com/262750db-b2b8-4abb-9404-8995c2ecb2a0. Now, you can set a custom, unique slug for your workspace which will generate a more accessible or readable URL such as https://tooljet.com/apac-team).\n\nConditions for workspace slug​\nThe workspace slug should be unique.\nThe workspace slug should not contain any special characters except -.\nThe workspace slug should not contain any spaces.\nThe workspace slug should not contain any capital letters.\nThe workspace slug should not be empty.\nEdit workspace​\n\nSimilar to the Add new workspace button, clicking on the Edit workspace button will open a modal where you can edit the name of the workspace and the workspace slug. Click on the Save button to update the changes.\n\nCreate a new app​\n\nTo create a new app, click on the Create new app button on the top left corner of the dashboard. Clicking on this button will open a modal where you can enter the name of the app and then click on the + Create app button to create a new app.\n\n\n\n\nThere are three dots on the right side of the Create new app button. Clicking on these dots will open a dropdown menu with two options:\n\nChoose from templates\nImport\nChoose from templates​\n\nThis option will open a modal with a list of pre-built templates. You can choose any template from this list to create a new app.\n\nImport​\n\nThis option will open a file picker to import a JSON file. This JSON file should be the app exported from ToolJet.\n\nImporting app connected to marketplace plugins​\n\nWhen importing an app with marketplace plugins, the marketplace plugin should be installed in the tooljet workspace where the app is being imported. If the marketplace plugin is not installed, the app will be imported without the queries for that plugin.\n\nWhen marketplace plugin is installed​\n\nIf marketplace plugin is installed in the tooljet workspace where the app is being imported, the queries connected to the marketplace plugin will be available in the imported application. The queries will be linked to the data source with the same name if it is already present. If the data source is not present, a new data source will be created of that marketplace plugin and linked to the queries.\n\nWhen marketplace plugin is not installed​\n\nIf you have an app with a query linked to a marketplace plugin, and you import that app in a tooljet workspace where the marketplace plugin is not installed as the data source, the queries will be not be available in the imported application.\n\nImporting app connected to tooljet table​\n\nWhen the app(JSON file) that includes the table schema is imported, and the table is not present in the tooljet database of the workspace where the app is being imported, a new table will be created in the tooljet database with the same name as the table in the imported app.\n\nIf the table with the same name is already present in the workspace, the new table will be created with the name <table name>_<unix timestamp>. Example: <tablename>_1627980000.\n\nFolders​\nCreate a new folder​\n\nFolders can be created to organize your apps. To create a new folder, click on the + button on the left drawer of the dashboard. Clicking on this button will open a modal, enter the name of the folder and click on the Create Folder button to create a new folder.\n\nDelete or Edit Folder​\n\nA folder can be deleted or renamed. To delete or rename a folder, click on the kebab menu on the right side of the folder name. Clicking on kebab menu will open a dropdown menu with two options:\n\nEdit folder: This option will open a modal, enter the new name of the folder and click on the Edit button to rename the folder.\nDelete folder: This option will open a confirmation modal to delete the folder. Click on the Delete button to delete the folder.\nSearch folders​\n\nFolders can be searched by clicking on the search icon on the left drawer of the dashboard. Clicking on the search icon will open a search bar, enter the name of the folder to search.\n\nSlug for folders​\n\nThe folder's URL slug is generated automatically from its name, providing direct access to the folder using the slug.\n\nTo get the URL of a specific folder, the user will have to select that folder and then copy the URL from the address bar of the browser. The copied URL can be used to share with other users of the workspace.\n\nExample: If the name of the folder is customer support, The folder can be accessed directly from the URL https://tooljet.com/<workspace-name>?folder=customer%20support.\n\nApp cards​\n\nThe dashboard displays all the apps created in the workspace as cards. These cards are displayed in a grid layout. The app cards display the name of the app, the name of the creator, and the date of creation. The app cards also display the app icon, which can be changed by clicking on the Change Icon option from the app menu.\n\nApp menu​\n\nThe app menu is located on the top right corner of the app card. Clicking on the app menu will open a dropdown menu with a list of options. These options are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nChange Icon​\n\nThis option will open a modal with a list of icons. You can choose any icon from this list to change the app icon.\n\nAdd to folder​\n\nThis option will open a modal with a list of folders. You can choose any folder from this list to add the app to the folder.\n\nClone app​\n\nSelecting this option will immediately open the cloned app in the app builder with the same configuration as the original app. The new app will be named as <original app name> followed by unix timestamp. Example: <original app name> 1627980000.\n\nExport app​\n\nThis option will download a JSON file of the application. This JSON file can be imported to ToolJet to create a new app. The exported app will include all the queries connected to global data sources including the data source created from Marketplace plugins.\n\nThis option allows you to select a specific version of the app to export or export all the versions of the app. To export a specific version of the app, select a version from the list of available versions in the modal and click on the Export selected version and to export all the versions of the app, click on the Export All button.\n\nExport ToolJet table schema​\n\nSelecting this option will inclue the schema of the tooljet table connected to that application in the exported JSON file. This option is available for all the apps on ToolJet however only the apps with a tooljet table connected(includes tjdb query) will have the schema included in the exported JSON file.\n\nThis JSON file can be used to import the application to ToolJet along with the table schema that was connected to the application.\n\nDelete app​\n\nThis option will open a confirmation modal to delete the app. Click on the Delete button to delete the app.\n\nApp search​\n\nApps can be searched by clicking on the search bar on the center of the dashboard. Click on the search bar and enter the name of the app to search.\n\nCurrent ToolJet Version​\n\nThe current version of ToolJet is displayed on the top right corner of the dashboard.\n\nEdit this page\nPrevious\nControl component (Component Specific Actions)\nNext\nOverview\nWorkspace Manager\nAdd new workspace\nEdit workspace\nCreate a new app\nChoose from templates\nImport\nImporting app connected to marketplace plugins\nImporting app connected to tooljet table\nFolders\nCreate a new folder\nDelete or Edit Folder\nSearch folders\nSlug for folders\nApp cards\nApp menu\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nApp search\nCurrent ToolJet Version"
  },
  {
    "title": "ToolJet Database | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/tooljet-database/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nToolJet Database\nVersion: 2.23.0\nToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\nEnabling the ToolJet Database for your instance​\n\nRequires:\n\nPostgREST server\nAdditional configuration for ToolJet server\n\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to true.\n\nPostgREST server​\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n\nTIP\n\nIf you have openssl installed, you can run the following command openssl rand -hex 32 to generate the value for PGRST_JWT_SECRET.\n\nIf this parameter is not specified then PostgREST refuses authentication requests.\n\nvariable\tdescription\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_DB_URI\tdatabase connection string for tooljet database\nPGRST_LOG_LEVEL\tinfo\nINFO\n\nPlease make sure that DB_URI is given in the format postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]\n\nAdditional ToolJet server configuration​\nvariable\tdescription\nENABLE_TOOLJET_DB\ttrue or false\nTOOLJET_DB\tDefault value is tooljet_db\nTOOLJET_DB_HOST\tdatabase host\nTOOLJET_DB_USER\tdatabase username\nTOOLJET_DB_PASS\tdatabase password\nTOOLJET_DB_PORT\tdatabase port\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_HOST\tpostgrest database host\n\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n\nTIP\n\nWhen this feature is enabled, the database name provided for TOOLJET_DB will be utilized to create a new database during server boot process in all of our production deploy setups. Incase you want to trigger it manually, use the command npm run db:create on ToolJet server.\n\nFeatures​\n\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\nExport table from the ToolJet Database to a JSON file.\nAccessing ToolJet Database​\n\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\n\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\nDatabase Editor​\n\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\nCreate New Table​\n\nFor creating a new table in ToolJet Database, click on the Create New Table button on the top left corner of the Database editor.\n\nWhen the Create New Table button is clicked, a drawer opens up from the right from where you can enter the details of your new table.\n\nFor creating a new table, you'll need to:​\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\nSupported data types​\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\nbigint: bigint is a numeric data type that is used to store whole numbers, that is, numbers without fractional components.\n\nClick on Create button to create a new table.\n\nSearch Table​\n\nYou can enter a search term to search through all tables in the database.\n\nAdd column​\n\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\n\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n\nColumn name: name of the column (key)\nData type: Check available data types here\nDefault Value Any default value for the column (not mandatory)\nDelete column​\n\nTo delete a particular column, just click on the column header and the delete button will appear, click on it to delete the column.\n\nAdd new row​\n\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\nEdit row​\n\nTo edit the rows from the ToolJet database dashboard, click on the Edit row button. A drawer will open from the right from where first you need to select the id of the row to be edited from the dropdown and then you can edit the cell values of the selected row.\n\nBulk upload data​\n\nYou can bulk upload data to the ToolJet database by clicking on the Bulk upload data button on the top of the database editor. On clicking the button, a drawer will open from the right from where you can upload a CSV file. This file is used to upsert records onto the table. If data for id column is missing it will insert new record with the row data else if id is present it will update the corresponding record with the corresponding row data.\n\nFrom the drawer, users can download the template CSV file in which they can enter the data to be uploaded to the ToolJet database's table or format their CSV file in the same way as the template file.\n\nOnce the CSV file is ready, click on the file picker to select the file or drag and drop the file in the file picker. Now, click on the Upload data button to upload the data to the ToolJet database.\n\nRequirements:\n\nThe data types of columns in the CSV file should match those in the ToolJet database table.\nThe id column with a serial data type should not contain duplicate values.\n\nLimitations:\n\nThere is a limit of 1000 rows per CSV file that can be uploaded to the ToolJet database.\nThe CSV file should not exceed 2MB in size.\nDelete records​\n\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\nFilter​\n\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\n\nAdding a filter on the table data​\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\nAvailable operations are:​\nequals: This operation is used to check if the value of the column is equal to the value entered in the input field.\ngreater than: This operation is used to check if the value of the column is greater than the value entered in the input field.\ngreater than or equal: This operation is used to check if the value of the column is greater than or equal to the value entered in the input field.\nless than: This operation is used to check if the value of the column is less than the value entered in the input field.\nless than or equal: This operation is used to check if the value of the column is less than or equal to the value entered in the input field.\nnot equal: This operation is used to check if the value of the column is not equal to the value entered in the input field.\nlike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nilike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. ex: ToolJet will match tooljet\nmatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nimatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nin: This operation is used to check if the value of the column is in the list of values entered in the input field. ex: 1,2,3\ncontains: This operation is used to check if the value of the column contains the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\ncontained: This operation is used to check if the value of the column is contained in the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nnot: This operation is used to negate the result of the operation selected in the dropdown. ex: not equals will return all the records where the value of the column is not equal to the value entered in the input field.\nSort​\n\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\nEdit table​\n\nTo edit the table name, click on the three vertical dots icon on the right of the table name and then click on the Edit option. A drawer will open from the right from where you can edit the table name.\n\nExport table​\n\nThe export table option allows you to download the selected table schema in a JSON file. This does not export the table data.\n\nWhile exporting the app, you can choose to export the app with or without table schema connected to the app.\n\nTo export the table schema, click on the three vertical dots icon on the right of the table name and then click on the Export option. A JSON file will be downloaded with the table schema.\n\nDelete table​\n\nTo delete a table, click on the three vertical dots icon on the right of the table name and then click on the Delete option. A confirmation modal will appear, click on the Delete button to delete the table.\n\nQuerying data from the ToolJet database​\n\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\nGo to the query panel, and click on the +Add button to add a new query, and select ToolJet Database\n\nSelect the table that you want to query from the dropdown, choose an operation from the dropdown, and then enter the required parameters for the selected operation. Click on the Run button to execute the query.\n\nINFO\nPreview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed as JSON or Raw.\nWhen a new query is created, by default the query name is set to tooljetdbN (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\nAvailable operations​\nList rows​\n\nThis operation returns all the records from the table\n\nOptional parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records.\nSort: Sort the query response by choosing a column and the order (ascending or descending).\nLimit: Limit the number of records to be returned by entering a number.\nCreate row​\n\nThis operation creates a new record in the table. You can create a single record or multiple records at once.\n\nRequired parameters​\nColumns: Choose the columns for which you want to add values for the new record and enter the values for the selected columns. You can also add a new column by clicking on the +Add column button.\nUpdate row​\n\nThis operation updates a record in the table. You can update a single record or multiple records at once.\n\nRequired parameter​\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\nColumns: Choose the columns for which you want to update the values for the selected record and enter the values for the selected columns.\nDelete row​\n\nThis operation deletes a record in the table. You can delete a single record or multiple records at once.\n\nRequired parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\nLimit: Limit the number of records to be deleted by entering a number.\nJoin tables​\n\nYou can join two or more tables in the ToolJet database by using the Join operation.\n\nRequired parameters​\n\nFrom: In the From section, there are the following parameters:\n\nSelected Table: Select the table from which you want to join the other table.\nType of Join: Select the type of join you want to perform. The available options are: Inner Join, Left Join, RIght Join, and Full Outer Join.\nJoining Table: Select the table that you want to join with the selected table.\nOn: Select the column from the selected table and the joining table on which you want to join the tables. Currently, only = operation is supported for joining tables.\nAND or OR condition: You can add multiple conditions by clicking on the +Add more button below each join. The conditions can be joined by AND or OR operation.\n\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records. The operations supported are same as the filter operations for the List rows operation.\n\nSort: Sort the query response by choosing a column and the order (ascending or descending).\n\nLimit: Limit the number of records to be returned by entering a number.\n\nOffset: Offset the number of records to be returned by entering a number. This parameter is used for pagination.\n\nSelect: Select the columns that you want to return in the query response. By default, all the columns are selected.\n\nINFO\n\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community\n\nEdit this page\nPrevious\nV2 migration guide\nNext\nCopilot\nEnabling the ToolJet Database for your instance\nPostgREST server\nFeatures\nAccessing ToolJet Database\nDatabase Editor\nCreate New Table\nSearch Table\nAdd column\nDelete column\nAdd new row\nEdit row\nBulk upload data\nDelete records\nFilter\nSort\nEdit table\nExport table\nDelete table\nQuerying data from the ToolJet database\nAvailable operations\nList rows\nCreate row\nUpdate row\nDelete row\nJoin tables"
  },
  {
    "title": "How To Guides | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/category/how-to/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nHow To\nVersion: 2.23.0\nHow To Guides\n\nHow To Guides for all the things ToolJet\n\n📄️ Setup log file generation (Rsyslog)\n\nThe log file serves as a comprehensive record of audit logs, capturing crucial information about various activities within the ToolJet. Follow the guide below to set up and utilize the log file feature effectively.\n\n📄️ Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\n\n📄️ Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n📄️ Change text color in columns of the table\n\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\n📄️ Conditional Formatting in Table\n\nConditional formatting enhances the visual representation of data by allowing you to dynamically adjust the appearance of cells in table component based on specific conditions. This how-to guide will guide you through the process of implementing advanced conditional formatting for text color and background color in a Table component.\n\n📄️ Bulk update multiple rows in table\n\nCurrently, the data sources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query.\n\n📄️ Delete multiple rows in table\n\nThe table component in the ToolJet has the option for bulk selection of rows that can have various use cases such as updating or deleting records. However, the datasources does not support bulk delete or bulk update operations.\n\n📄️ Using server side pagination for efficient data handling in tables\n\nIn this guide we will learn how to use server side pagination in table component. This will be helpful if you have a large data set and you want to load data in chunks. This will also help you to improve the performance of your application. This guide will be helpful if you are using datasources like MySQL, PostgreSQL, MSSQL, MongoDB, etc. in which you can use limit and offset to fetch data in chunks. We have also included an example to load data from Google Sheets in chunks.\n\n📄️ Enable/Disable a component using current user's property\n\nLet's take look at the exposed variables of the current user property:\n\n📄️ Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\n\n📄️ Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query.\n\n📄️ Import external libraries using RunJS\n\nToolJet allows you to utilize external libraries in your app by importing them using the RunJS query.\n\n📄️ Run Actions from RunJS query\n\nNow you can trigger all the actions available in ToolJet from within the RunJS query. This guide includes the syntax for each action along with the example.\n\n📄️ Intentionally fail a RunJS query\n\nIn this how-to guide, we will create a RunJS query that will throw an error.\n\n📄️ Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\n📄️ Use the to_py() Function in RunPy: Converting JavaScript Objects to Python\n\nThis how-to guide will demonstrate the usage of to_py() function in RunPy queries for converting the JavaScript objects to Python.\n\n📄️ Access a user's location\n\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n\n📄️ Use S3 signed URL to upload documents\n\nIn this how-to guide, you'll learn to upload documents to S3 buckets using the S3 signed URL from a ToolJet application.\n\n📄️ Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage.\n\n📄️ Upload files on AWS S3 bucket\n\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\n\n📄️ Upload files using GCS\n\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\n\n📄️ Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\n📄️ Use Events on Chart\n\nCurrently, the chart component does not support events. However, you can use the Custom Component to create a chart using a third-party library that supports events. Plotly is one of the libraries that supports events. In this tutorial, we will build a chart using Plotly and add events to it.\n\n📄️ Print data from multiple tabs\n\nIn this guide, we will learn how to print data from multiple tabs in ToolJet. This will be useful when you want to print an invoice or a report from your ToolJet application. For example, a tooljet app that has a set of tabs for each invoice and you want to print all the tabs in one go.\n\nPrevious\nPlivo\nNext\nSetup log file generation (Rsyslog)"
  },
  {
    "title": "Marketplace | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/category/marketplace/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nMarketplace\nVersion: 2.23.0\nMarketplace\n📄️ Marketplace : Overview\n\nWith ToolJet Marketplace, ToolJet users can conveniently add custom plugins (datasources) to their workspaces. This feature enables users to create plugins that cater to their specific needs and integrate them seamlessly with ToolJet.\n\n🗃️ Marketplace Plugins\n\n5 items\n\nPrevious\nVersioning and Release\nNext\nMarketplace : Overview"
  },
  {
    "title": "Setup ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/setup/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSetup\nVersion: 2.23.0\nSetup ToolJet\n\nCheck out the different methods you can use to deploy ToolJet on your machine\n\nTry ToolJet\n\nTry out ToolJet with single docker command\n\nDigitalOcean\n\nQuickly deploy ToolJet using the Deploy to DigitalOcean button\n\nDocker\n\nDeploy ToolJet on a server using docker-compose\n\nAWS EC2\n\nDeploy ToolJet on AWS EC2 instances\n\nAWS ECS\n\nDeploy ToolJet on AWS ECS instances\n\nOpenshift\n\nDeploy ToolJet on Openshift\n\nHelm\n\nDeploy ToolJet with Helm Chart\n\nKubernetes\n\nDeploy ToolJet on a Kubernetes cluster\n\nKubernetes (GKE)\n\nDeploy ToolJet on a GKE Kubernetes cluster\n\nKubernetes (AKS)\n\nDeploy ToolJet on a AKS Kubernetes cluster\n\nAzure container apps\n\nDeploy ToolJet on a Azure Container Apps\n\nGoogle Cloud Run\n\nDeploy ToolJet on Cloud Run with GCloud CLI\n\nDeploying ToolJet client\n\nDeploy ToolJet Client on static website hosting services\n\nEnvironment variables\n\nEnvironment variables required by ToolJet Client and Server to start running\n\nConnecting via HTTP proxy\n\nEnvironment variables required by ToolJet to connect via HTTP proxy\n\nDeploying ToolJet on a subpath\n\nSteps to deploy ToolJet on a subpath rather than root of domain\n\nV2 migration guide\n\nThings to know before migrating to ToolJet V2\n\nEdit this page\nPrevious\nGetting Started\nNext\nTry ToolJet"
  },
  {
    "title": "Textarea | ToolJet",
    "url": "https://docs.tooljet.com/docs/widgets/textarea/",
    "html": "Components CatalogComponents libraryTextarea\nVersion: 2.27.0\nTextarea\n\nThe Textarea component allows users to enter text in an input field similar to the Text Input component. Textarea is generally preferred when we are expecting an input of multiple sentences. In this document, we'll go through all the configuration options for the Textarea component.\n\nHow To Use Textarea Widget​\nProperties​\nProperty\tDescription\tExpected Value\nDefault value\tUsed to set initial value in textarea on load. It is a pre-established value that can be retrieved from the Text area component if no modifications are made to it.\tEnter some text as the value (example: \"John Doe\")\nPlaceholder\tProvides a hint for the expected value. It disappears once the user interacts with the component.\tEnter some instructional text as the value (example: \"Type name here\")\nGeneral​\nTooltip\n\nA Tooltip is commonly used to provide additional information about an element. This information becomes visible when the user hovers the mouse pointer over the respective component.\n\nIn the input field under Tooltip, you can enter some text and the component will show the specified text as a tooltip when it is hovered over.\n\nLayout​\nShow on desktop\n\nUse this toggle to show or hide the component in the desktop view. You can dynamically configure the value by clicking on Fx and entering a logical expression that results in either true or false. Alternatively, you can directly set the values to {{true}} or {{false}}.\n\nShow on mobile\n\nUse this toggle to show or hide the component in the mobile view. You can dynamically configure the value by clicking on Fx and entering a logical expression that results in either true or false. Alternatively, you can directly set the values to {{true}} or {{false}}.\n\nStyles​\nProperty\tDescription\tExpected Value\nVisibility\tControls the visibility of the component. If set to {{false}}, the component will not be visible after the app is deployed.\tUse the toggle button OR click on Fx to pass a boolean value or a logical expression that returns a boolean value i.e. either {{true}} or {{false}}\nDisable\tMakes the component non-functional when set to true.\tUse the toggle button OR click on Fx to pass a boolean value or a logical expression that returns a boolean value i.e. either {{true}} or {{false}}\nBorder Radius\tAdjusts the roundness of the component's corners.\tNumeric value\nGeneral​\nBox Shadow\n\nThe Box Shadow property is used to add shadow effects around a component's frame. You can specify the horizontal and vertical offsets(through X and Y sliders), blur and spread radius, and color of the shadow.\n\nExposed Variables​\nVariables\tDescription\tExpected Value\nvalue\tThis variable holds the value entered in the text area component.\tYou can access the value dynamically using JS. For example, {{components.textarea1.value}}\nComponent Specific Actions (CSA)​\n\nFollowing actions of the Textarea component can be controlled using Component-Specific Actions(CSA):\n\nActions\tDescription\nsetText\tSets the text on the text area component via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.textarea1.setText('this is a textarea').\nclear\tClears the value from the text area component via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.textarea1.clear().\nEdit this page\nPrevious\nText\nNext\nTimeline\nHow To Use Textarea Widget\nProperties\nGeneral\nLayout\nStyles\nGeneral\nExposed Variables\nComponent Specific Actions (CSA)"
  },
  {
    "title": "Text Input | ToolJet",
    "url": "https://docs.tooljet.com/docs/widgets/text-input/",
    "html": "Components CatalogComponents libraryText Input\nVersion: 2.27.0\nText Input\n\nText Input widget lets users enter and edit text.\n\nTIP\n\nThe Text Input should be preferred when user input is a single line of text.\n\nHow To Use Text Input Widget​\nProperties​\nDefault value​\n\nThe default value that the widget will hold when the app is loaded.\n\nPlaceholder​\n\nIt specifies a hint that describes the expected value.\n\nEvents​\nOn change​\n\nThis event fires whenever the user types something on the text input.\n\nOn Enter Pressed​\n\nThis event fires whenever the user presses the enter button on keyboard after entering some text on text input component.\n\nOn focus​\n\nThis event fires whenever the user clicks inside the text input component.\n\nOn blur​\n\nThis event fires whenever the user clicks outside the text input component.\n\nINFO\n\nCheck Action Reference docs to get detailed information about all the Actions.\n\nValidation​\nRegex​\n\nUse this field to enter a Regular Expression that will validate the password constraints.\n\nMin length​\n\nEnter the number for a minimum length of password allowed.\n\nMax length​\n\nEnter the number for the maximum length of password allowed.\n\nCustom validation​\n\nIf the condition is true, the validation passes, otherwise returns a string that should be displayed as the error message. For example: {{components.passwordInput1.value === 'something' ? true: 'value should be something'}}.\n\nGeneral​\nTooltip​\n\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\n\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\nLayout​\nShow on desktop​\n\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value {{true}} or {{false}}.\n\nShow on mobile​\n\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value {{true}} or {{false}}.\n\nStyles​\nText Color​\n\nUse this property to set the color of the text inside the text input component. You can select the color from the color picker or set the value using Hex color code.\n\nBorder color​\n\nAdd a color to the border of the text-input component using this property. You can select the color from the color picker or set the value using Hex color code.\n\nBorder Radius​\n\nUse this property to modify the border radius of the widget. The field expects only numerical values from 1 to 100, and default is 0.\n\nVisibility​\n\nIt is to control the visibility of the widget. If {{false}} the widget will not be visible after the app gets deployed. It can only have boolean values i.e. either {{true}} or {{false}}. By default, it's set to {{true}}.\n\nDisable​\n\nThis property only accepts boolean values. If set to {{true}}, the widget will lock and become non-functional. By default, its value is set to {{false}}.\n\nINFO\n\nCheck the component specific actions available for this component here.\n\nExposed Variables​\nVariables\tDescription\nvalue\tThis variable holds the value whenever user a user inputs a value in the component. You can access the value dynamically using JS: {{components.textinput1.value}}\nComponent specific actions (CSA)​\n\nFollowing actions of text input component can be controlled using the component specific actions(CSA):\n\nActions\tDescription\nsetFocus\tSet the focus of the cursor on the text input via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.textinput1.setFocus()\nsetBlur\tRemoves the focus of the cursor on the text input via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.textinput1.setBlur()\ndisable\tdisable the component via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.textinput1.disable(true)\nvisibility\tSet a visibility of the text input via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.textinput1.visibility(false)\nsetText\tSet a text value on the text input component via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.textinput1.setText('this is input text')\nclear\tClear the entered text from the text input via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.textinput1.clear()\nEdit this page\nPrevious\nTags\nNext\nText\nHow To Use Text Input Widget\nProperties\nDefault value\nPlaceholder\nEvents\nOn change\nOn Enter Pressed\nOn focus\nOn blur\nValidation\nRegex\nMin length\nMax length\nCustom validation\nGeneral\nTooltip\nLayout\nShow on desktop\nShow on mobile\nStyles\nText Color\nBorder color\nBorder Radius\nVisibility\nDisable\nExposed Variables\nComponent specific actions (CSA)"
  },
  {
    "title": "Modal | ToolJet",
    "url": "https://docs.tooljet.com/docs/widgets/modal/",
    "html": "Components CatalogComponents libraryModal\nVersion: 2.27.0\nModal\n\nModal widget renders in front of a backdrop, and it blocks interaction with the rest of the application until the modal is closed. It can be used to add dialog boxes to your app for lightboxes, user notifications, forms, etc.\n\nRESTRICTED COMPONENTS\n\nIn order to avoid excessively complex situations, certain components, namely Calendar and Kanban, are restricted from being placed within the Modal component using drag-and-drop functionality.\n\nIf the builder attempts to add any of the aforementioned components inside the Modal, an error message will be displayed:\n\n<Restricted component> cannot be used as a child component within the Modal.\n\nHow To Use Modal Widget​\nAdd widgets to Modal​\n\nTo add widgets to the Modals please refer to Tutorial - Adding widgets to a modal\n\nProperties​\nTitle​\n\nTitle that should be shown on the header of the modal.\n\nLoading State​\n\nLoading state can be used to show a spinner on the modal content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. Enable the toggle On or click on fx to programmatically set the value {{true}} or {{false}} .\n\nHide title bar​\n\nEnabling this option hides the title bar in the modal. The value {{true}} or {{false}} can be set programmatically by clicking on the Fx button next to it.\n\nHide close button​\n\nBy enabling this option, the close button within the modal will be hidden. The value can be programmatically set to either {{true}} or {{false}} by clicking the adjacent Fx button.\n\nClose on escape key​\n\nEnabling this option will cause the modal to close whenever the escape key is pressed. The value can be programmatically set to either {{true}} or {{false}} by clicking the adjacent Fx button. This property is enabled by default.\n\nClose on outside click​\n\nEnabling this feature will result in the modal closing when clicked outside of its boundaries. The value can be programmatically set to either {{true}} or {{false}} by clicking the adjacent Fx button.\n\nModal size​\n\nDetermines the size of the modal. Available options include medium, small, and large, with the default set to medium. The value can also be programmatically configured by clicking the Fx button and setting it to sm, md, or lg.\n\nModal height​\n\nSpecifies the height of the modal, with the default height set to 400px. The modal's height can also be dynamically set using JS binding by utilizing the {{components.xyz.data.key === 'Sun' ?? '600px' : '300px'}} syntax.\n\nOptions​\nUse default trigger button​\n\nThe default trigger button is enabled by default, this button can be used to show the modal. The value {{true}} or {{false}} can be set programmatically by clicking on the Fx button next to it.\n\nINFO\n\nA modal can be triggered using the default trigger button, action or via JavaScript.\n\nTrigger button label​\n\nIt can be used to set the label of the trigger button.\n\nEvents​\n\nModal supports the following two events:\n\nOn open\nOn close\nINFO\n\nJust like any other event on ToolJet, you can set multiple handlers for the events supported by Modal. Check all the actions here.\n\nLayout​\nShow on desktop​\n\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value {{true}} or {{false}}.\n\nShow on mobile​\n\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value {{true}} or {{false}}.\n\nStyles​\nStyle\tDescription\tvalue\nHeader background color\tChange the background color of the header in modal\tEnter the Hex color code or choose a color of your choice from the color picker\nHeader title color\tChange the color of the Title in modal\tEnter the Hex color code or choose a color of your choice from the color picker\nBody background color\tChange the background color of the body in modal\tEnter the Hex color code or choose a color of your choice from the color picker\nVisibility\tToggle on or off to control the visibility of the default trigger button that comes with modal\tYou can programmatically change its value by clicking on the Fx button next to it. If {{false}} the button will not visible after the app is released. By default, it's set to {{true}}.\nDisable\tToggle on to disable the default trigger button that comes with modal\tYou can programmatically change its value by clicking on the Fx button next to it, if set to {{true}}, the button will be locked and becomes non-functional. By default, its value is set to {{false}}.\nTrigger button background color\tChange the background color of the default trigger button of modal\tEnter the Hex color code or choose a color of your choice from the color picker\nTrigger button text color\tChange the color of the label in default trigger button of modal\tEnter the Hex color code or choose a color of your choice from the color picker\nINFO\n\nTrigger Button styles are only visible when Use default trigger button under Options is toggled on.\n\nExposed variables​\n\nThere are currently no exposed variables for the component.\n\nComponent specific actions (CSA)​\n\nFollowing actions of modal component can be controlled using the component specific actions(CSA):\n\nActions\tDescription\nopen\tControl the opening and closing of the modal componennt via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.modal1.open()\nclose\tControl the closing of the modal componennt via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.modal1.close()\nEdit this page\nPrevious\nMap\nNext\nMultiselect\nHow To Use Modal Widget\nAdd widgets to Modal\nProperties\nTitle\nLoading State\nHide title bar\nHide close button\nClose on escape key\nClose on outside click\nModal size\nModal height\nOptions\nUse default trigger button\nTrigger button label\nEvents\nLayout\nShow on desktop\nShow on mobile\nStyles\nExposed variables\nComponent specific actions (CSA)"
  },
  {
    "title": "Datepicker | ToolJet",
    "url": "https://docs.tooljet.com/docs/widgets/datepicker/",
    "html": "Components CatalogComponents libraryDatepicker\nVersion: 2.27.0\nDatepicker\n\nThe Datepicker widget allows users to select a single value for date and time from a pre-determined set.\n\nHow To Use Datepicker Widget​\nEvents​\n\nTo add an event to a date-picker component, click on the widget handle to open the widget properties on the right sidebar. Go to the Events section and click on + Add handler.\n\nOn select​\n\nOn select event is triggered when an date is selected.\n\nINFO\n\nCheck Action Reference docs to get the detailed information about all the Actions.\n\nProperties​\nDefault value​\n\nThis value acts as placeholder for the date picker widget, if any value is not provided then the default value will be used from the picker. The default value needs to be a String with respect to the format field. Ex: If format is set to MM/YYYY then provide default value as 04/2022.\n\nFormat​\n\nThe format of the date selected by the date picker. Default date format is DD/MM/YYYY. Date format should be followed as ISO 8601 as mentioned in the moment documentation. This field requires a String input. Ex: DD/MM, MM/YYYY, YY/MM, DD/MM/YYYY etc.\n\nEnable time selection?​\n\nToggle on or off to enable the time selection. You can programmatically determine the value by clicking on Fx to set the value {{true}} or {{false}}.\n\nEnable date selection?​\n\nToggle on or off to enable the date selection. You can programmatically determine the value by clicking on Fx to set the value {{true}} or {{false}}.\n\nDisabled dates​\n\nWe can give disabled dates property which will make specific dates disabled and cannot be selected. The default value needs to be an array ofStrings.\n\nExample for disabling the 9th of January:\n\n{{['09-01']}}\n\n\nNow user won't be able to select the mentioned date since it will be disabled.\n\nValidation​\nCustom Validation​\n\nAdd a validation for the date input in the widget using the ternary operator.\n\nExample of validation for selecting dates that are after the current date:\n\n{{moment(components.datepicker1.value, 'DD/MM/YYYY').isAfter(moment()) ? true : 'Date should be after today'}}\n\nGeneral​\nTooltip​\n\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\n\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\nLayout​\nShow on desktop​\n\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value {{true}} or {{false}}.\n\nShow on mobile​\n\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value {{true}} or {{false}}.\n\nStyles​\nVisibility​\n\nThis is to control the visibility of the widget. If {{false}} the widget will not visible after the app is deployed. It can only have boolean values i.e. either {{true}} or {{false}}. By default, it's set to {{true}}.\n\nDisable​\n\nThis property only accepts boolean values. If set to {{true}}, the widget will be locked and becomes non-functional. By default, its value is set to {{false}}.\n\nBorder Radius​\n\nUse this property to modify the border radius of the date-picker. The field expects only numerical value from 1 to 100, default is 0.\n\nINFO\n\nAny property having Fx button next to its field can be programmatically configured.\n\nExposed variables​\nVariables\tDescription\nvalue\tThis variable will hold the date selected on the component, the date value will be returned according to the format set in the datepicker properties. You can access the value dynamically using JS: {{components.datepicker1.value}}\nComponent specific actions (CSA)​\n\nThere are currently no CSA (Component-Specific Actions) implemented to regulate or control the component.\n\nEdit this page\nPrevious\nDate-range picker\nNext\nDivider\nHow To Use Datepicker Widget\nEvents\nOn select\nProperties\nDefault value\nFormat\nEnable time selection?\nEnable date selection?\nDisabled dates\nValidation\nCustom Validation\nGeneral\nLayout\nShow on desktop\nShow on mobile\nStyles\nVisibility\nDisable\nBorder Radius\nExposed variables\nComponent specific actions (CSA)"
  },
  {
    "title": "Text | ToolJet",
    "url": "https://docs.tooljet.com/docs/widgets/text/",
    "html": "Components CatalogComponents libraryText\nVersion: 2.27.0\nText\n\nThe Text component can be used to create headers/sub-headers, add labels next to various input fields and more. In this document, we'll go through all the configuration options for the Text component.\n\nHow To Use Text Component​\nProperties​\nProperties\tDescription\tExpected Value\nText\tThis property sets the content/text inside the Text component.\tText input OR Refer query data with dynamic variables - {{queries.datasource.data.text}}\nShow loading state\tThis property lets you set the condition for loading state of the text.\tUse the toggle button or dynamically configure the value by clicking on Fx and entering a logical expression that results in either {{true}} or {{false}}\nGeneral​\nTooltip\n\nA Tooltip is commonly used to provide additional information about an element. This information becomes visible when the user hovers the mouse pointer over the respective component.\n\nIn the input field under Tooltip, you can enter some text and the component will show the specified text as a tooltip when it is hovered over.\n\nLayout​\nShow on desktop\n\nUse this toggle to show or hide the component in the desktop view. You can dynamically configure the value by clicking on Fx and entering a logical expression that results in either true or false. Alternatively, you can directly set the values to {{true}} or {{false}}.\n\nShow on mobile\n\nUse this toggle to show or hide the component in the mobile view. You can dynamically configure the value by clicking on Fx and entering a logical expression that results in either true or false. Alternatively, you can directly set the values to {{true}} or {{false}}.\n\nStyles​\nStyle\tDescription\tExpected Value\nFont Weight\tDetermines how bold or light your text will appear.\tnormal (default), bold, lighter, bolder\nText Decoration\tAdds an underline, overline, line-through, or a combination of lines to selected text.\tnone(default), overline, line-through, underline, overline underline\nText Transformation\tDictates the capitalization of an element's text. It allows for all-uppercase or all-lowercase rendering.\tnone (default), uppercase, lowercase, capitalize\nFont Style\tAllows you to apply styles like italic or normal, altering the overall look of the text content.\tnormal(default), italic, oblique\nLine Height\tDetermines the vertical space between lines of text within an element. It controls the amount of space above and below each line of text.\tEnter a number as the value (example: 1.5)\nText Indent\tCommonly used to create an indentation effect, like when starting a paragraph with some space before the first word.\tEnter a number as the value (example: 10)\nLetter Spacing\tRefers to the adjustment of the space between individual characters within a block of text.\tEnter a number as the value (example: 2)\nWord Spacing\tControls the amount of space between words within a block of text.\tEnter a number as the value (example: 2)\nFont Variant\tAllows you to customize the visual appearance of text and helps achieve specific typographic styles or formatting requirements.\tnormal (default), small-caps, initial, inherit\nText Size\tDimensions of the characters in a font, typically measured in units like pixels, points, ems, or percentages. It determines how large or small the text appears on a screen or in print.\tAny number between 1-100\nBackground Color\tSets the background color of the component.\tHex color code/choose a color using the color picker\nText Color\tSets the color of the text.\tHex color code/choose a color using the color picker\nAlign Text\tSets the alignment of the text.\tleft, right, center, justified\nVisibility\tControls the visibility of the component. If set to {{false}}, the component will not be visible after the app is deployed.\tUse the toggle button OR click on Fx to pass a boolean value or a logical expression that returns a boolean value i.e. either {{true}} or {{false}}\nDisable\tMakes the component non-functional when set to true.\tUse the toggle button OR click on Fx to pass a boolean value or a logical expression that returns a boolean value i.e. either {{true}} or {{false}}\nGeneral​\nBox Shadow\n\nThe Box Shadow property is used to add shadow effects around a component's frame. You can specify the horizontal and vertical offsets(through X and Y sliders), blur and spread radius, and color of the shadow.\n\nComponent Specific Actions (CSA)​\n\nFollowing actions of the Text component can be controlled using Component-Specific Actions(CSA):\n\nActions\tDescription\nvisibility\tSets the visibility of the text via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.text1.visibility(false).\nsetText\tSets a text value on the text component via a component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.text1.setText('this is a text').\nEdit this page\nPrevious\nText Input\nNext\nTextarea\nHow To Use Text Component\nProperties\nGeneral\nLayout\nStyles\nGeneral\nComponent Specific Actions (CSA)"
  },
  {
    "title": "Number Input | ToolJet",
    "url": "https://docs.tooljet.com/docs/widgets/number-input/",
    "html": "Components CatalogComponents libraryNumber Input\nVersion: 2.27.0\nNumber Input\n\nThe Number Input component allows users to enter numbers. It can be used as a standalone component or in form fields. In this document, we'll go through all the configuration options for the Number Input component.\n\nProperties​\nProperty\tDescription\tExpected Value\nDefault Value\tDefault Value is the initial value in the Number Input field when the application is loaded. It is a pre-established value that will be retrieved from the number input component if no modifications are made to it.\tAny numeric value\nMinimum value\tSets the minimum value that can be entered in the input field.\tAny numerical value\nMaximum value\tSets the maximum value that can be entered in the input field.\tAny numerical value\nPlaceholder\tThe placeholder value is displayed when no user input has been made yet. It disappears once the user interacts with the control, such as typing a number or using the arrow keys on the right side of the component.\tEnter some instructional text as the value (example: \"Type number here\")\nLoading state\tThe loading state can be enabled to show a spinner as the content of the number input. This is commonly used with the isLoading property of queries to indicate a loading status while a query is being executed.\tUse the toggle button or dynamically configure the value by clicking on Fx and entering a logical expression that results in either {{true}} or {{false}}\nDecimal places\tThis controls decimal places in the number input. You pick how many decimals you want. If you choose {{2}}, any decimals will be rounded to two places. Use {{0}} for whole numbers or increase for more precision.\tAny numeric value\nEvents​\n\nTo add an event to the Number Input component, go to the Events section and click on Add handler.\n\nEvent\tDescription\nOn change\tThis event fires whenever the value of the number input component is changed.\nINFO\n\nCheck Action Reference docs to get the detailed information about all the Actions.\n\nGeneral​\nTooltip\n\nA Tooltip is commonly used to provide additional information about an element. This information becomes visible when the user hovers the mouse pointer over the respective component.\n\nIn the input field under Tooltip, you can enter some text and the component will show the specified text as a tooltip when it is hovered over.\n\nLayout​\nShow on desktop\n\nUse this toggle to show or hide the component in the desktop view. You can dynamically configure the value by clicking on Fx and entering a logical expression that results in either true or false. Alternatively, you can directly set the values to {{true}} or {{false}}.\n\nShow on mobile\n\nUse this toggle to show or hide the component in the mobile view. You can dynamically configure the value by clicking on Fx and entering a logical expression that results in either true or false. Alternatively, you can directly set the values to {{true}} or {{false}}.\n\nStyles​\nStyle\tDescription\tExpected Value\nVisibility\tControls the visibility of the component. If set to {{false}}, the component will not be visible after the app is deployed.\tUse the toggle button or dynamically configure the value by clicking on Fx and entering a logical expression that results in either {{true}} or {{false}}.\nDisable\tMakes the component non-functional when set to true.\tUse the toggle button or dynamically configure the value by clicking on Fx and entering a logical expression that results in either {{true}} or {{false}}.\nBorder radius\tAdjusts the roundness of the component's corners.\tNumeric value\nBackground color\tChanges the background color of the number-input component.\tHex color code/choose a color using the color picker\nBorder color\tChanges the border color of the component.\tHex color code/choose a color using the color picker\nText Color\tSets the color of the input value.\tHex color code/choose a color using the color picker\nExposed Variables​\nVariables\tDescription\nvalue\tThis variable updates whenever a user selects a number on the number input. You can access the value dynamically using JS: {{components.numberinput1.value}}\nComponent Specific Actions (CSA)​\n\nThere are currently no Component-Specific Actions (CSA) implemented to regulate or control the component.\n\nEdit this page\nPrevious\nMultiselect\nNext\nPassword Input\nProperties\nEvents\nGeneral\nLayout\nStyles\nExposed Variables\nComponent Specific Actions (CSA)"
  },
  {
    "title": "Table | ToolJet",
    "url": "https://docs.tooljet.com/docs/widgets/table/",
    "html": "Components CatalogComponents libraryTable\nVersion: 2.27.0\nTable\n\nTables can be used for both displaying and editing data. You can use the table widget to display data from a database or API. You can also use the table widget to edit data and save it back to the database or API.\n\nTable UI​\nFilter data​\n\nThe table data can be filtered using this option. You have the option to choose from various filters, such as:\n\ncontains\ndoes not contain\nmatches\ndoes not match\nequals\ndoes not equal\nis empty\nis not empty\ngreater than\ngreater than or equal to\nless than\nless than or equal to\n\nYou have the option to hide the filter button in the table properties.\n\nSearch​\n\nAt the top-right corner of the table component, there is a search box that allows users to input keywords and search for rows within the table data. You can also show/hide the search box from the table from the table properties.\n\nTIP\n\nYou can use the Tab key to navigate through cells on the table.\n\nPagination​\n\nThe table component supports both client-side pagination and server-side pagination. The << and >> button skips to the first and last page respectively. The < and > button skips to the previous and next page respectively. You can also hide the pagination buttons in the table properties.\n\nAdd new rows​\n\nUpon clicking this button, a popup modal will show, providing users with the ability to insert new rows. Initially, the modal will contain a single row, with columns mirroring those found in the table. If users input data into this row, it will be stored within the newRows variable associated with the table. Clicking on the Discard button will clear the data within this variable. However, if the users close the popup without any action (neither saving nor discarding), the data will persist, accompanied by a green indicator on the Add new row button. The table incorporates an Add new rows event handler, which can be employed to execute queries that store the data into the datasource upon clicking the Save button.\n\nINFO\n\nAt present, it is not possible to include columns of type Image when adding a new row to the table.\n\nDownload​\n\nThe table data can be downloaded in various file formats, including:\n\nCSV\nExcel\nPDF\n\nYou have the option to hide the download button in the table properties.\n\nTIP\n\nYou can utilize Component Specific Actions to retrieve the table data in the mentioned formats from the event handlers across the application.\n\nHide columns​\n\nYou can choose which columns to show or hide in the table using this option. You also have the option to hide the column selector button in the table properties.\n\nSorting​\n\nYou can sort the table data in ascending or descending order by clicking on the column header. You can also disable the sorting from the table properties.\n\nTable data​\n\n\n\nTo populate the table with the data, it is required to provide the data in the form of an array of objects. You can utilize data from queries, using {{queries.restapi1.data}}, to populate table.\n\nExample:\n\n{{[{ id: 1, name: 'Sarah', email: 'sarah@example.com'}]}}\n\n\nThe table also supports the loading of one level of nested data. Here is an example of the data structure:\n\n[\n   {\n      \"id\":1,\n      \"student\":{\n         \"name\":\"Anakin Skywalker\",\n         \"saber\":\"blue\"\n      },\n      \"teacher\":{\n         \"name\":\"Obi wan Kenobi\",\n         \"saber\":\"blue\"\n      }\n   },\n   {\n      \"id\":2,\n      \"student\":{\n         \"name\":\"Kevin\",\n         \"saber\":\"blue\"\n      },\n      \"teacher\":{\n         \"name\":\"Joe\",\n         \"saber\":\"blue\"\n      }\n   },\n   {\n      \"id\":3,\n      \"student\":{\n         \"name\":\"Alex\",\n         \"saber\":\"blue\"\n      },\n      \"teacher\":{\n         \"name\":\"Noah\",\n         \"saber\":\"blue\"\n      }\n   }\n]\n\n\n\n\nThe table component will automatically generate all the required columns when the data is provided in the form of an array of objects.\n\nColumns​\n\nWhenever data is loaded into a table, the columns are automatically generated. You can add, remove, or modify columns by accessing the table properties under the column section. You can also rearrange the columns by dragging and dropping them.\n\nUse dynamic column​\n\nEnabling the Use dynamic column toggle will allow users to set the Column data using which the user can link the column data dynamically from a query.\n\nThe column data field expects a JSON value:\n\n{\n   \"name\":\"Name\",\n   \"columnType\":\"string\",\n   \"key\":\"first_name\",\n   \"cellBackgroundColor\":\"#000\",\n   \"textColor\":\"#fff\",\n   \"isEditable\":true,\n   \"regex\":\"\",\n   \"maxLength\":10,\n   \"minLength\":5,\n   \"customRule\":\"\"\n}\n\nTypes of Columns​\n\nThe table component supports the following column types:\n\nString | Default\nNumber\nBadge\nMultiple Badges\nTags\nDropdown\nRadio\nMultiselect\nToggle switch\nDate Picker\nImage\nLink\nString | Default​\n\nThis column type is automatically selected by default when a column is added or when data is populated in the table.\n\nColumn property\tDescription\nColumn name\tSpecify the name to be displayed on the table column header\nOverflow\tManage the handling of content that exceeds the cell dimensions. Wrap wraps the content onto the next line within the cell, Scroll enables scrolling for content that exceeds the cell, and Hide conceals content that goes beyond the cell boundary.\nKey\tSpecify the key name associated with the loaded data in the table. If no key is provided, the Column name is used as the key for that column.\nHorizontal alignment\tPositions content left, center, or right within table column cells for improved readability and visual presentation.\nText color\tModify the color of the text in the column. You can use a hex color code or color name. The value can be dynamically assigned using JS. Refer to the how-to guide.\nCell background color\tAdjust the background color of the cell in the column. You can utilize a hex color code or color name. The value can be dynamically assigned using JS.\nMake editable\tThis option is disabled by default. Enabling it allows the column to be edited by app users. Its value can also be dynamically set to {{true}} or {{false}} to toggle it on or off.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nNumber​\n\nSelecting the column type as Number will only load numerical data in the column cells.\n\nColumn property\tDescription\nColumn name\tSpecify the name to be displayed on the table column header\nKey\tSpecify the key name associated with the loaded data in the table. If no key is provided, the Column name is used as the key for that column.\nHorizontal alignment\tPositions content left, center, or right within table column cells for improved readability and visual presentation.\nMake editable\tThis option is disabled by default. Enabling it allows the column to be edited by app users. Its value can also be dynamically set to {{true}} or {{false}} to toggle it on or off.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nBadge​\n\nThe Badge column type is utilized to exhibit labels on the columns using the column data.\n\nColumn property\tDescription\nColumn name\tSpecify the name to be displayed on the table column header\nKey\tSpecify the key name associated with the loaded data in the table. If no key is provided, the Column name is used as the key for that column.\nHorizontal alignment\tPositions content left, center, or right within table column cells for improved readability and visual presentation.\nValues\tProvide the values for the badge as an array\nLabels\tProvide the labels for the values in the badge as an array\nMake editable\tThis option is disabled by default. Enabling it allows the column to be edited by app users. Its value can also be dynamically set to {{true}} or {{false}} to toggle it on or off.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nMultiple Badges​\n\nSimilar to the Badge column type, the Multiple Badges type is used to display multiple badges within a column cell.\n\nColumn property\tDescription\nColumn name\tSpecify the name to be displayed on the table column header\nKey\tSpecify the key name associated with the loaded data in the table. If no key is provided, the Column name is used as the key for that column.\nHorizontal alignment\tPositions content left, center, or right within table column cells for improved readability and visual presentation.\nValues\tProvide the values for the multiple badges as an array\nLabels\tProvide the labels for the values in the multiple badges as an array\nMake editable\tThis option is disabled by default. Enabling it allows the column to be edited by app users. Its value can also be dynamically set to {{true}} or {{false}} to toggle it on or off.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nTags​\n\nThe Tags column type is utilized to display tags within the column cells using the column data. The provided key should have values in an array format.\n\nColumn property\tDescription\nColumn name\tSpecify the name to be displayed on the table column header\nKey\tSpecify the key name associated with the loaded data in the table. If no key is provided, the Column name is used as the key for that column.\nHorizontal alignment\tPositions content left, center, or right within table column cells for improved readability and visual presentation.\nMake editable\tThis option is disabled by default. Enabling it allows the column to be edited by app users. Its value can also be dynamically set to {{true}} or {{false}} to toggle it on or off.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nDropdown​\n\nThe Dropdown column type is used to display a dropdown in the column cells using the column data.\n\nColumn property\tDescription\nColumn name\tSpecify the name to be displayed on the table column header\nKey\tSpecify the key name associated with the loaded data in the table. If no key is provided, the Column name is used as the key for that column.\nHorizontal alignment\tPositions content left, center, or right within table column cells for improved readability and visual presentation.\nValues\tProvide the values for the dropdown as an array\nLabels\tProvide the labels for the values in the dropdown as an array\nMake editable\tThis option is disabled by default. Enabling it allows the column to be edited by app users. Its value can also be dynamically set to {{true}} or {{false}} to toggle it on or off.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nRadio​\n\nThe Radio column type is used to show radio buttons in the column cells using the column data.\n\nColumn property\tDescription\nColumn name\tSpecify the name to be displayed on the table column header\nKey\tSpecify the key name associated with the loaded data in the table. If no key is provided, the Column name is used as the key for that column.\nHorizontal alignment\tPositions content left, center, or right within table column cells for improved readability and visual presentation.\nValues\tProvide the values for the radio as an array\nLabels\tProvide the labels for the values in the radio as an array\nMake editable\tThis option is disabled by default. Enabling it allows the column to be edited by app users. Its value can also be dynamically set to {{true}} or {{false}} to toggle it on or off.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nMultiselect​\n\nThe Multiselect column type is used to show a multiselect dropdown in the column cells using the column data.\n\nColumn property\tDescription\nColumn name\tSpecify the name to be displayed on the table column header\nKey\tSpecify the key name associated with the loaded data in the table. If no key is provided, the Column name is used as the key for that column.\nHorizontal alignment\tPositions content left, center, or right within table column cells for improved readability and visual presentation.\nValues\tProvide the values for the multiselect as an array\nLabels\tProvide the labels for the values in the multiselect as an array\nMake editable\tThis option is disabled by default. Enabling it allows the column to be edited by app users. Its value can also be dynamically set to {{true}} or {{false}} to toggle it on or off.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nToggle Switch​\n\nThe Toggle Switch column type is used to display a toggle switch in the column cells using the column data. The provided key should be a boolean value, either true or false.\n\nColumn property\tDescription\nColumn name\tSpecify the name to be displayed on the table column header\nKey\tSpecify the key name associated with the loaded data in the table. If no key is provided, the Column name is used as the key for that column.\nHorizontal alignment\tPositions content left, center, or right within table column cells for improved readability and visual presentation.\nActive color\tSet the color of the toggle switch when it is active using this property.\n+ Add Event Handler\tAdd an event handler to perform actions whenever the toggle switch is turned on or off.\nMake editable\tThis option is disabled by default. Enabling it allows the column to be edited by app users. Its value can also be dynamically set to {{true}} or {{false}} to toggle it on or off.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nDate Picker​\n\nThe Date Picker column type is used to display a date picker in the column cells using the column data.\n\nColumn property\tDescription\nColumn name\tSpecify the name to be displayed on the table column header\nKey\tSpecify the key name associated with the loaded data in the table. The provided key should hold a date value.\nHorizontal alignment\tPositions content left, center, or right within table column cells for improved readability and visual presentation.\nDate Display Format\tDetermines how the date should be displayed in the table\nDate Parse Format\tSpecifies the format in which the date is stored in the database.\nParse in timezone\tThe timezone of the time stored in the database. Only required if the Show time option is enabled.\nDisplay in timezone\tThe timezone in which the date should be displayed. Only required if the Show time option is enabled.\nShow time\tDisplays the time along with the date.\nMake editable\tThis option is disabled by default. Enabling it allows the column to be edited by app users. Its value can also be dynamically set to {{true}} or {{false}} to toggle it on or off.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nImage​\n\nThe Image column type is used to display images in the column cells using the column data.\n\nColumn property\tDescription\nColumn name\tSpecify the name to be displayed on the table column header\nKey\tSpecify the key name associated with the loaded data in the table. The provided key should hold a URL for the image to be loaded in the column cells.\nHorizontal alignment\tPositions content left, center, or right within table column cells for improved readability and visual presentation.\nBorder radius\tSet a border radius for the image loaded in the column cell. The field accepts a numerical value from 0 to 100.\nWidth\tSet a width for the image loaded in the column cell. The field accepts a numerical value from 0 to 100.\nHeight\tSet a height for the image loaded in the column cell. The field accepts a numerical value from 0 to 100.\nObject fit\tThis option allows you to choose how the image should be fitted within its container. The available options are: Cover, Contain, and Fill. Cover maintains the aspect ratio of the image but may crop or clip parts of it to cover the container's width, Contain maintains the aspect ratio and resizes the image to fit within the given dimensions while displaying the entire image, and Fill stretches the image to cover 100% of the width.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nLink​\n\nThe Link column type enables cells to become clickable links that can be loaded on either the same page or a new page.\n\nColumn property\tDescription\nColumn name\tSpecifies the name displayed on the table column header.\nKey\tSpecify the key that holds the URL. By default. The provided key should hold either a string or a URL.\nLink Target\tSpecifies whether the link should be loaded on the same window or a new window. The values can also be set dynamically to _set for same window and _blank for new window.\nColumn Visibility\tThis option is enabled by default. Disabling it hides the column from the table. Its value can also be dynamically set to {{true}} or {{false}} to show or hide the column.\nINFO\n\nFor more information on using cellValue and rowData, refer to the how-to guide.\n\nAdd Column​\n\nYou can add a new column to the table by clicking on the + Add Column button. On clicking this button a new column will be added to the table and you can edit it's properties from the column section. Check Displaying Data section to learn more.\n\nDelete Column​\n\nHover on the column under the columns section and click on the three dots icon, a dropdown will appear with the option to delete the column. Click on the delete option to remove the column from the table.\n\nDisplaying Data​\n\nThe data object should be an array of objects. Table columns can be added, removed, rearranged from the inspector. key property is the accessor key used to get data from a single element of a table data object. For example:\n\nIf the table data is:\n\n[\n    {\n        \"review\": {\n            \"title\": \"An app review\"\n        },\n    \"user\": {\n            \"name\": \"sam\",\n            \"email\": \"sam@example.com\"\n        },\n    }\n]\n\n\nTo display email column, the key for the column should be user.email.\n\nSaving data​\n\nEnable editable property of a column to make the cells editable. If a data type is not selected, string is selected as the data type.\n\nTIP\n\nYou can programatically enable/disable the make editable field in the columns property by clicking on the Fx button.\n\nIf the data in a cell is changed, changeSet property of the table object will have the index of the row and the field that changed. For example, if the name field of second row of example in the 'Displaying Data' section is changed, changeSet will look like this:\n\n{\n    2: {\n        \"name\": \"new name\"\n    }\n}\n\n\nAlong with changeSet, dataUpdates property will also be changed when the value of a cell changes. dataUpdates will have the whole data of the changed index from the table data. dataUpdates will look like this for our example:\n\n[{\n    \"review\": {\n        \"title\": \"An app review\"\n    },\n    \"user\": {\n        \"name\": \"new name\",\n        \"email\": \"sam@example.com\"\n    },\n}]\n\n\nIf the data of a cell is changed, \"save changes\" button will be shown at the bottom of the table. This button when clicked will trigger the Bulk update query event. This event can be used to run a query to update the data on your data source.\n\nValidation​\n\nUnder column properties, expand the detailed view of a column type to access a toggle button called make editable. You can toggle it ON to apply the validations for each column respectively using the following.\n\nRegex​\n\nUse this field to enter a Regular Expression that will validate the password constraints.\n\nMin length​\n\nEnter the number for a minimum length of password allowed.\n\nMax length​\n\nEnter the number for the maximum length of password allowed.\n\nCustom validation​\n\nIf the condition is true, the validation passes, otherwise return a string that should be displayed as the error message. For example: {{components.passwordInput1.value === 'something' ? true: 'value should be something'}}\n\nAction buttons​\n\nAction buttons will be displayed as the last column of the table. The styles of these buttons can be customised and on click actions can be configured. when clicked, selectedRow property of the table will have the table data of the row.\n\nProperty\tDescription\nButton text\tSet the text that you want to be displayed on the action button.\nButton position\tSet the button position to the left or right\nBackground color (Action Button)\tBackground color of the action button.\nText color (Action Button)\tColor of button-text of the action button.\nDisable Action Button\tToggle on to disable the action button. You can programmatically set its value by clicking on the Fx button next to it, if set to {{true}}, the action button will be disabled and becomes non-functional. By default, its value is set to {{false}}.\nEvents​\nRow hovered\nRow clicked\nSave changes\nCancel changes\nPage changed\nSearch\nSort applied\nCell value changed\nFilter changed\nAdd new rows\nRow hovered​\n\nThis event is triggered when the mouse pointer is moved over a row in the table. The hoveredRowId exposed variable of the table will include the id of the latest hovered row and hoveredRow property of the table will have the data of the hovered row in the object format.\n\nRow clicked​\n\nThis event is triggered when a table row is clicked. The selectedRowId exposed variable of the table will include the id of the selected row and the selectedRow property of the table object will have the table data of the selected row.\n\nSave changes​\n\nIf any cell of the table is edited, the save changes button appears at the footer of the table. Save changes event is triggered when this button is clicked.\n\nCancel changes​\n\nIf any cell of the table is edited, the Discard changes button appears at the footer of the table. Cancel changes event is triggered when this button is clicked.\n\nPage changed​\n\nIf server-side pagination is enabled, this event is fired when the current page is changed. This event is triggered after updating the pageIndex variable.\n\nSearch​\n\nThis event is triggered when a text is entered to the search input box of the table. searchText variable is updated before triggering this event.\n\nSort applied​\n\nThis event is triggered when the column name header is clicked to apply sorting in asc or desc. The sortApplied variable is updated with an object having column and direction values.\n\nCell value changed​\n\nIf any cell of the table is edited, the cell value changed event is triggered.\n\nFilter changed​\n\nThis event is triggered when filter is added, removed, or updated from the filter section of the table. filters property of the table is updated to reflect the status of filters applied. The objects will have properties: condition, value, and column.\n\nAdd new rows​\n\nThis event is triggered when the Save button is clicked from the Add new row modal on the table.\n\nRow Selection​\nAllow selection​\n\nThis option is active by default. Enabling this functionality allows users to choose a row in the table by utilizing checkboxes placed next to each row. If this option is disabled, the ability to highlight selected rows and perform bulk selection will not be accessible.\n\nIf the option for allowing selection is enabled, a new option called Default selected row will become visible. However, if the option for allowing selection is disabled, the Default selected row option will not be displayed.\n\nHighlight selected row​\n\nActivate this option to visually emphasize the last clicked row. Enabling this feature will alter the row selection appearance of the table from a checkbox-based theme to a highlighting-based theme.\n\nBulk selection​\n\nTo enable the selection of one or more rows from the current page of a table, you can activate the 'Bulk selection' setting in the inspector. The values of the selected rows will be exposed as 'selectedRows'.\n\nDefault Selected Row​\n\nBy enabling this option, you can designate a default row to be pre-selected when the app loads. This means that whenever the app is opened for the first time, a specific row will already be highlighted in the table by default. Additionally, there is an accessible variable that stores the value for this setting. You can find a list of all accessible variables here.\n\nTo set a default selected row, you need to provide an object with a single key-value pair. For instance, you can use the id key and dynamically obtain the value from a variable, let's say x, to specify the default selected row in the table. We assume that the variable x holds a valid numerical id.\n\nExample:\n\n{{{\"id\": variables.x}}} //assuming variables.x is already set\n\n\nPlease ensure that the value provided in the object corresponds to a valid id in the table to ensure proper functionality.\n\nSearch Sort and Filter​\nShow search​\n\nIt can be used to show or hide Table Search box. Client-side search is enabled by default and server-side search can be enabled from the events section of the inspector. Whenever the search text is changed, the searchText property of the table component is updated. If server-side search is enabled, on search event is fired after the content of searchText property is changed. searchText can be used to run a specific query to search for the records in your data source.\n\nIf you don't wish to use the search feature altogether, you can disable it from the inspector.\n\nServer-side search​\n\nIf server-side search is enabled, on search event is fired after the content of searchText property is changed. searchText can be used to run a specific query to search for the records in your data source.\n\nEnable column sorting​\n\nDisable this option to lock the sorting of columns when clicked on column header.\n\nServer-side sort​\n\nWhen Server-side sort is enabled, clicking on the column headers will not automatically sort the table, instead, the Sort applied event will be fired and the applied sorting will be exposed as sortApplied. You can use this data to run any query that feeds data to the table in a manner that reflects the sorting applied.\n\nEnable filtering​\n\nThe filter button in the table header is visible by default. You can choose to hide it by disabling this option. You can dynamically set the value to {{true}} or {{false}} to show or hide the filter button by clicking on the Fx button.\n\nServer-side filter​\n\nWhen Server-side filter is enabled, applying filters will not automatically filter the table, instead, the Filter changed event will be fired and the applied filters will be exposed as filters. You can use this data to run any query that feeds data to the table in a manner that reflects the filters applied.\n\nPagination​\nClient-side pagination​\n\nClient-side pagination is enabled by default. When the client-side pagination is enabled({{true}}), another property Number of rows per page will be shown that can be used to set the number of records per page. By default, the value is set to 10 and if it is disabled({{false}}) then it will show all the records in the single page.\n\nServer-side pagination​\n\nServer-side pagination can be used to run a query whenever the page is changed. Go to events section of the inspector and change the action for on page changed event. Number of records per page needs to be handled in your query. If server-side pagination is enabled, pageIndex property will be exposed on the table object, this property will have the current page index. pageIndex can be used to query the next set of results when page is changed.\n\nWhen Server-side pagination is enabled, you'll be able to set three other table properties:\n\nEnable previous page button: When server-side pagination is enabled, this button is enabled by default. Toggle this off to disable the previous page button from the table.\nEnable next page button: When server-side pagination is enabled, this button is enabled by default. Toggle this off to disable the next page button from the table.\nTotal records server side: Set a numerical value to display particular number of records.\nTIP\n\nCheck this how-to guide to learn more about server-side pagination.\n\nAddional actions​\nShow add new row button​\n\nThe Add new row button in the table header is visible by default. You can choose to hide it by disabling this option. You can dynamically set the value to {{true}} or {{false}} to show or hide the Add new row button by clicking on the Fx button.\n\nShow download button​\n\nThe download button in the table header is visible by default. You can choose to hide it by disabling this option. You can dynamically set the value to {{true}} or {{false}} to show or hide the download button by clicking on the Fx button.\n\nHide column selector button​\n\nThe column selector button on the table header is visible by default. You can choose to hide it by disabling this option. You can dynamically set the value to {{true}} or {{false}} to show or hide the column selector button by clicking on the Fx button.\n\nLoading state (Boolean)​\n\nLoading state shows a loading skeleton for the table. This property can be used to show a loading status on the table while data is being loaded. isLoading property of a query can be used to get the status of a query.\n\nShow update buttons​\n\nIt's enabled by default. Table footer will show two update buttons Save changes & Discard changes whenever a cell is edited. Toggle off to hide update buttons.\n\nDevices​\nOption\tDescription\tExpected value\nShow on desktop\tToggle on or off to show or hide the component on desktop devices\t{{true}} or {{false}}\nShow on mobile\tToggle on or off to show or hide the component on mobile devices\t{{true}} or {{false}}\nStyles​\nStyle\tDescription\nText color\tChange the color of the text in table by providing hex color code or choosing one from the picker\nAction button radius\tThis field can be used to give a radius to all action buttons. The default value is 0\nTable type\tSelect a type of table from the dropdown: Bordered, Regular, or Striped.\nCell size\tThis decides the size of table cells. You can choose between a Condensed size for table cells or a Regular size\nVisibility\tToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the Fx button next to it. If {{false}} the widget will not visible after the app is deployed. By default, it's set to {{true}}.\nDisable\tToggle on to lock the widget. You can programmatically change its value by clicking on the Fx button next to it, if set to {{true}}, the widget will be locked and becomes non-functional. By default, its value is set to {{false}}.\nBorder radius\tUse this property to modify the border radius of the button.\nINFO\n\nAny property having Fx button next to its field can be programmatically configured.\n\nExposed variables​\nvariable\tdescription\ncurrentData\tData that is currently being displayed by the table ( including edits if any )\ncurrentPageData\tData that is displayed on the current page if pagination is enabled ( including edits if any )\npageIndex\tIndex of the current page, starting from 1\nchangeSet\tObject with row number as the key and object of edited fields and their values as the value\ndataUpdates\tJust like changeSet but includes the data of the entire row\nselectedRow\tContains the data of the row that was most recently clicked. When an action button is clicked, selectedRow is also updated. Its initial value is set to the data of the first row when the app is loaded.\nselectedRowId\tStores the ID of the row that was last clicked. Similar to selectedRow, it gets updated when an action button is clicked. You can access its value using {{components.table1.selectedRowId}}. By default, it is set to 0, representing the ID of the first row when the app is loaded.\nselectedCell\tThe data of the cell that was last clicked on the table.\nsearchText\tThe value of the search field if server-side pagination is enabled\nnewRows\tThe newRows variable stores an array of objects, each containing data for a row that was added to the table using the \"Add new row\" button. When the user clicks either the \"Save\" or \"Discard\" button in the modal, this data is cleared.\nComponent specific actions (CSA)​\n\nFollowing actions of color picker component can be controlled using the component specific actions(CSA):\n\nActions\tDescription\nsetPage\tSet the page on the table via component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.table1.setPage(2)\nselectRow\tSelect the row on the table using via component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.table1.selectRow('id','11')\ndeselectRow\tDeselect the row on the table via component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.table1.deselectRow()\ndiscardChanges\tDiscard the changes from the table when a cell is edited via component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.table1.discardChanges()\ndiscardNewlyAddedRows\tDiscard the newly added rows from the add new row popup on the table via component-specific action within any event handler. Additionally, you have the option to employ a RunJS query to execute component-specific actions such as await components.table1.discardNewlyAddedRows()\ndownloadTableData\tRetrieve the data from the table in the PDF, CSV, or Excel sheet by using a component-specific action within an event handler. Furthermore, you have the choice to utilize a RunJS query to execute component-specific actions. For downloading the table data as a PDF, you can use the following code: await components.table1.downloadTableData('pdf'). Similarly, for downloading as a CSV: await components.table1.downloadTableData('csv'), and for downloading as an Excel sheet: await components.table1.downloadTableData('xlsx').\nEdit this page\nPrevious\nSvg Image\nNext\nTabs\nTable UI\nFilter data\nSearch\nPagination\nAdd new rows\nDownload\nHide columns\nSorting\nTable data\nColumns\nUse dynamic column\nTypes of Columns\nAdd Column\nDelete Column\nDisplaying Data\nSaving data\nValidation\nRegex\nMin length\nMax length\nCustom validation\nAction buttons\nEvents\nRow hovered\nRow clicked\nSave changes\nCancel changes\nPage changed\nSearch\nSort applied\nCell value changed\nFilter changed\nAdd new rows\nRow Selection\nAllow selection\nHighlight selected row\nBulk selection\nDefault Selected Row\nSearch Sort and Filter\nShow search\nEnable column sorting\nEnable filtering\nPagination\nClient-side pagination\nServer-side pagination\nAddional actions\nShow add new row button\nShow download button\nHide column selector button\nLoading state (Boolean)\nShow update buttons\nDevices\nStyles\nExposed variables\nComponent specific actions (CSA)"
  },
  {
    "title": "Container | ToolJet",
    "url": "https://docs.tooljet.com/docs/widgets/container/",
    "html": "Components CatalogComponents libraryContainer\nVersion: 2.27.0\nContainer\n\nContainers are used to group widgets together. You can move the desired number of widgets inside a container to organize your app better.\n\nRESTRICTED COMPONENTS\n\nIn order to avoid excessively complex situations, certain components, namely Calendar and Kanban, are restricted from being placed within the Container component using drag-and-drop functionality.\n\nIf the builder attempts to add any of the aforementioned components inside the container, an error message will be displayed:\n\n<Restricted component> cannot be used as a child component within the container.\n\nEnabling vertical scroll on container​\n\nTo enable the vertical scroll on the container, drag and place any component to the bottom grid of the container and the container will automatically enable the scrolling.\n\nLoading state​\n\nTo activate the loader on the container component, access its properties and dynamically adjust the Loading State property by clicking the Fx button. You can set it to either {{true}} or {{false}}.\n\nFor instance, if you wish to display the loader on the container when the query named restapi1 is in progress, set the Loading State value to {{queries.restapi1.isLoading}}.\n\nGeneral​\nTooltip​\n\nA Tooltip is often used to specify extra information about something when the user hovers themouse pointer over the widget.\n\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\nLayout​\nLayout\tdescription\nShow on desktop\tThis property have toggle switch. If enabled, the Container widget will display in the desktop view else it will not appear. This is enabled by default.\nShow on mobile\tThis property have toggle switch. If enabled, the Container wisget will display in the mobile view else it will not appear.\nStyles​\nStyle\tDescription\nBackground Color\tYou can change the background color of the Container by entering the Hex color code or choosing a color of your choice from the color picker.\nBorder radius\tUse this property to modify the border radius of the container. The field expects only numerical value from 1 to 100, default is 0.\nBorder Color\tYou can change the border color of the Container by entering the Hex color code or choosing a color of your choice from the color picker.\nVisibility\tThis is to control the visibility of the widget. If {{false}} the widget will not visible after the app is deployed. It can only have boolean values i.e. either {{true}} or {{false}}. By default, it's set to {{true}}.\nDisable\tThis property only accepts boolean values. If set to {{true}}, the widget will be locked and becomes non-functional. By default, its value is set to {{false}}.\nINFO\n\nAny property having Fx button next to its field can be programmatically configured.\n\nExposed variables​\n\nThere are currently no exposed variables for the component.\n\nComponent specific actions (CSA)​\n\nThere are currently no CSA (Component-Specific Actions) implemented to regulate or control the component.\n\nEdit this page\nPrevious\nColor Picker\nNext\nCustom Component\nEnabling vertical scroll on container\nLoading state\nGeneral\nTooltip\nLayout\nStyles\nExposed variables\nComponent specific actions (CSA)"
  },
  {
    "title": "Image | ToolJet",
    "url": "https://docs.tooljet.com/docs/widgets/image/",
    "html": "Components CatalogComponents libraryImage\nVersion: 2.27.0\nImage\n\nImage widget is used to display images in your app.\n\nEvents​\nOn click​\n\nOn click event is triggered when an image is clicked.\n\nINFO\n\nCheck Action Reference docs to get the detailed information about all the Actions.\n\nProperties​\nURL​\n\nEnter the URL of the image to display it on the widget.\n\nLoading state​\n\nLoading state can be used to show a spinner as the image content. Loading state is commonly used with isLoading property of the queries to show a loading status while a query is being run. Switch the toggle On or click on fx to programmatically set the value {{true}} or {{false}}.\n\nAlternative text​\n\nUsed for alt text of images.\n\nZoom buttons​\n\nToggle this to enable zoom options inside image.\n\nRotate buttons​\n\nToggle this on to enable rotate button in the image.\n\nGeneral​\nTooltip​\n\nA Tooltip is often used to specify extra information about something when the user hovers the mouse pointer over the widget.\n\nUnder the General accordion, you can set the value in the string format. Now hovering over the widget will display the string as the tooltip.\n\nLayout​\nShow on desktop​\n\nToggle on or off to display the widget in desktop view. You can programmatically determine the value by clicking on Fx to set the value {{true}} or {{false}.\n\nShow on mobile​\n\nToggle on or off to display the widget in mobile view. You can programmatically determine the value by clicking on Fx to set the value {{true}} or {{false}}.\n\nStyles​\nBorder type​\n\nChoose a border type for the image from available options:\n\nNone\nRounded\nCircle\nThumbnail\nImage fit​\n\nChoose a image fit - similar to object fit for the image from available options:\n\nfill\ncover\ncontain\nscale-down\nBackground color​\n\nAdd a background color to widget by providing the HEX color code or choosing the color of your choice from the color-picker.\n\nPadding​\n\nAdds padding between the image and widget border. It accepts any numerical value from 0 to 100.\n\nVisibility​\n\nToggle on or off to control the visibility of the widget. You can programmatically change its value by clicking on the Fx button next to it. If {{false}} the widget will not be visible after the app is deployed. By default, it's set to {{true}}.\n\nDisable​\n\nThis is off by default, toggle on the switch to lock the widget and make it non-functional. You can also programmatically set the value by clicking on the Fx button next to it. If set to {{true}}, the widget will be locked and becomes non-functional. By default, its value is set to {{false}}.\n\nINFO\n\nAny property having Fx button next to its field can be programmatically configured.\n\nExposed variables​\n\nThere are currently no exposed variables for the component.\n\nComponent specific actions (CSA)​\n\nThere are currently no CSA (Component-Specific Actions) implemented to regulate or control the component.\n\nEdit this page\nPrevious\nIframe\nNext\nKanban\nEvents\nOn click\nProperties\nURL\nLoading state\nAlternative text\nZoom buttons\nRotate buttons\nGeneral\nTooltip\nLayout\nShow on desktop\nShow on mobile\nStyles\nBorder type\nImage fit\nBackground color\nPadding\nVisibility\nDisable\nExposed variables\nComponent specific actions (CSA)"
  },
  {
    "title": "Audit logs | ToolJet",
    "url": "https://docs.tooljet.com/docs/enterprise/audit_logs/",
    "html": "Org ManagementAudit logs\nVersion: 2.27.0\nAudit logs\nAvailable on: Paid plans\n\nThe audit log is the report of all the activities done in your ToolJet account. It will capture and display events automatically by recording who performed an activity, what when, and where the activity was performed, along with other information such as IP address.\n\nDate Range​\n\nRetrieve the log of events that occurred within the specified date and time range using the range picker. By default, the system loads 24-hour logs for the initial view. The maximum duration that can be specified for the \"from\" and \"to\" dates is 30 days.\n\nINFO\n\nPagination at the bottom allows navigation through the pages, with each page displaying a maximum of 7 logs.\n\nFilter Audit Logs​\n\nYou can apply filters to the audited events based on the following criteria.\n\nSelect Users​\n\nChoose a specific user from the dropdown list to view all their activities.\n\nSelect Apps​\n\nThe dropdown will display all the apps associated with your account. Select an app to filter the logs related to that particular app.\n\nSelect Resources​\nResources\tdescription\nUser\tFilter all the User events like USER_LOGIN, USER_SIGNUP, USER_INVITE, AND USER_INVITE_REDEEM.\nApp\tFilter all the App events like APP_CREATE, APP_UPDATE,APP_VIEW,APP_DELETE,APP_IMPORT,APP_EXPORT,APP_CLONE.\nData Query\tFilters the events associated with Data Query like DATA_QUERY_RUN.\nGroup Permission\tAll the events associated with Group Permissions will be filtered. Group Permissions include GROUP_CREATE, GROUP_UPDATE, GROUP_DELETE.\nApp Group Permission\tWithin each group, you can set apps for read or edit privileges. These events get recorded as App Group Permissions.\nSelect Actions​\nActions\tdescription\nUSER_LOGIN\tThis event is recorded everytime a user logins.\nUSER_SIGNUP\tThis event is recorded everytime a new signup is made.\nUSER_INVITE\tYou can invite users to your account from Manage Users section and an event is audited everytime an invite is sent.\nUSER_INVITE_REDEEM\tThis event is recorded whenever an invite is redeemed.\nAPP_CREATE\tThis event is recorded when a user creates a new app.\nAPP_UPDATE\tThis event is recorded whenever actions like renaming the app, making the app public, editing shareable link, or deploying the app are made.\nAPP_VIEW\tThis event is logged when someone views the launched app. (public apps aren't accounted for)\nAPP_DELETE\tThis event is recorded whenever a user deletes an app from the dashboard.\nAPP_IMPORT\tThis event is recorded whenever a user imports an app.\nAPP_EXPORT\tThis event is recorded whenever an app is exported.\nAPP_CLONE\tThis event is recorded whenever a clone of the existing app is created.\nDATA_QUERY_RUN\tThis event is logged whenever a data source is added, a query is created, or whenever a query is run either from the query editor or from the launched app.\nGROUP_PERMISSION_CREATE\tThis event is recorded whenever a group is created.\nGROUP_PERMISSION_UPDATE\tThis event is recorded whenever an app or user is added to or removed from a group, or the permissions for a group are updated.\nGROUP_PERMISSION_DELETE\tThis event is recorded whenever a user group is deleted from an account.\nAPP_GROUP_PERMISSION_UPDATE\tFor every app added in to user group, you can set privileges like View or Edit and whenever these privileges are updated this event is recorded. By default, the permission of an app for a user group is set to View.\nUnderstanding Log Information​\nProperty\tDescription\naction_type\tThis indicates the type of action that was logged in the event. Refer to this for more information on actions.\ncreated_at\tShows the date and time when the event was logged.\nid\tEach logged event is assigned a unique event ID.\nip_address\tDisplays the IP address from which the event was logged.\nmetadata\tThe metadata includes two sub-properties: tooljet_version and user_agent. tooljet_version shows the version of ToolJet used for the event, while user_agent contains information about the device and browser used.\norganization_id\tEvery organization in ToolJet has a unique ID associated with it, which is recorded when an event occurs.\nresource_id\tDifferent resources have their respective IDs associated with them. These IDs are assigned when the resources are created.\nresource_name\tShows the name of the resources that were involved in the logged event. For example, if an app was created or deleted, it will display the name of that app.\nresource_type\tIndicates the type of the resources involved in the logged event.\nuser_id\tEach user account in ToolJet has a unique ID associated with it, which is recorded when an event occurs.\nLog file​\n\nThe file will contain all the data from audit logs. The log file can be created by specifying the path in the environment variables. The log file is rotated on a daily basis and is updated dynamically every time a new audit log is generated.\n\nLearn more about setting up the log file generation here.\n\nLog Rotation​\n\nThe log file is configured to rotate on a daily basis. This means that a new log file will be created every day, ensuring efficient management and organization of audit data.\n\nLog File Path​\n\nThe path for the log file is defined using the LOG_FILE_PATH variable in the environment. It's important to understand that this path is relative to the home directory of the machine. For instance, if LOG_FILE_PATH is set to hsbc/dashboard/log, the resulting log file path will be structured as follows:\n\nhomepath/hsbc/dashboard/log/tooljet_log/{process_id}-{date}/audit.log\n\n\nHere, {process_id} is a placeholder for the unique process identifier, and {date} represents the current date. This structured path ensures that audit logs are organized by both process and date, facilitating easy traceability and analysis.\n\nVariable\tDescription\nLOG_FILE_PATH\tthe path where the log file will be created ( eg: tooljet/log/tooljet-audit.log)\nExample Log file data\nEdit this page\nPrevious\nManaging Users and Groups\nNext\nWhite Label\nDate Range\nFilter Audit Logs\nUnderstanding Log Information\nLog file"
  },
  {
    "title": "Permissions | ToolJet",
    "url": "https://docs.tooljet.com/docs/org-management/permissions/",
    "html": "Org ManagementPermissions\nVersion: 2.27.0\nPermissions\n\nPermissions allow you to create and share resources to easily ensure what level of access each User has to ToolJet Apps and other resources.\n\nAdmins can invite Users to their workspaces and assign them to the Groups that have Permissions to access Apps, folders, or workspace variables.\n\nINFO\n\nSee Manage Users and Groups to know more about managing users and groups on your workspace.\n\nRole-Based Access Control (RBAC) Glossary​\nUsers - Users can be added to more than one or more Groups. Each User is associated with an email.\nGroups - By default, there are two groups: All Users and Admin. Additionally, you can create custom groups like Support, Engineering, etc.\nAll Users - Contains all the users in your workspace. When New Users are invited they are added to this group by default.\nAdmins - Contains all Admins in your workspace. Everyone added to this group will Permission to access all the ToolJet resources.\nApps, Folder, Workspace Variables - Resources that Admins can set permissions on.\nPermissions - Create, Update and Delete.\nEdit this page\nPrevious\nWorkspace Constants\nNext\nManaging Users and Groups\nRole-Based Access Control (RBAC) Glossary"
  },
  {
    "title": "Try ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/setup/try-tooljet/",
    "html": "SetupTry ToolJet\nVersion: 2.27.0\nTry ToolJet\nOn local with Docker​\n\nYou can run the command below to have ToolJet up and running right away.\n\ndocker run -d \\\n  --name tooljet \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  --platform linux/amd64 \\\n  -v tooljet_data:/var/lib/postgresql/13/main \\\n  tooljet/try:latest\n\n\nIf you have any questions feel free to join our Slack Community or send us an email at hello@tooljet.com.\n\nSetup information​\nRuns the ToolJet server on the port 80 on your machine.\nContainer has postgres already configured within. All the data will be available in the docker volume tooljet_data.\nYou can make use of --env or --env-file flag to test against various env configurables mentioned here.\nUse docker stop tooljet to stop the container and docker start tooljet to start the container thereafter.\nOn Play with docker​\n\nYou can deploy ToolJet on PWD for free with the one-click-deployment button below.\n\nSetup information​\nOpen port 80 after the docker containers are up and running\nVisit the url shared on the dashboard to try out tooljet\nEdit this page\nPrevious\nSetup ToolJet\nNext\nDigitalOcean\nOn local with Docker\nOn Play with docker"
  },
  {
    "title": "Overview | ToolJet",
    "url": "https://docs.tooljet.com/docs/app-builder/overview/",
    "html": "App BuilderOverview\nVersion: 2.27.0\nApp-Builder: Overview\n\nToolJet's App Builder allows you to build applications. ToolJet's app builder has the following major components:\n\nTopbar: configure app settings\nCanvas: Arrange the components to build the interface of app\nLeft-sidebar: Add pages, inspect the components, queries or variables, and debug the errors.\nComponents library(right sidebar): Drag any component or modify the property or styling\nQuery Panel: Create, edit or manage the queries from the datasources\nEdit this page\nPrevious\nDashboard\nNext\nTopbar"
  },
  {
    "title": "Transformations | ToolJet",
    "url": "https://docs.tooljet.com/docs/tutorial/transformations/",
    "html": "Datasource CatalogTransformations\nVersion: 2.27.0\nTransformations\n\nTransformations can be enabled on queries to transform the query results. ToolJet allows you to transform the query results using two programming languages:\n\nJavaScript\nPython\nCAUTION\nEvery transformation is scoped to the query it's written for.\nActions and CSA(Component Specific Actions) cannot be called within the transformation, they can only be called within RunJS query or RunPy query.\nTransform using JavaScript​\n\nLet's assume a query is returning the customers data with a name row, so we will write a simple transformation to compute first_name and last_name for all the customers.\n\n// write your code here\n// return value will be set as data and the original data will be available as rawData\nreturn data.map((row) => {\n  return {\n    ...row,\n    first_name: row.name.split(' ')[0],\n    last_name: row.name.split(' ')[1],\n  };\n});\n\n\nThe query will now look like this:\n\nTransform using Python​\n\nLet's use Python transformation to compute first_name and last_name for all the customers that we fetch in the previous step.\n\nreturn list(map(lambda row: {\n  **row,\n  'first_name': row['name'].split(' ')[0],\n  'last_name': row['name'].split(' ')[1],\n}, data))\n\nExample​\n\nLet's take a look at the data returned by a RESTAPI (using mock data here):\n\nNow we will transform the returned data using Python that will append a new key in the returned data called user and that user will have the value from the exposed global variables of ToolJet which is globals.currentUser.email\n\nreturn list(map(lambda item: {**item, \"user\": f\"{globals['currentUser']['email']}\"}, data))\n\n\nNow, you can click on the preview button to check the transformed data.\n\nClick the Save button to create the query. Saved queries can be run using the Run button on the top-right of query panel. Queries run using the run button will behave just as if it was triggered by an app event like button click and thus will alter the state of the app. You can view the query results using the state inspector on the left side-bar of the app builder.\n\nWe can see that first_name and last_name are added to all the rows in the data object of the query. If you need the original data of the query, it will be available in the rawData object of the query.\n\nEdit this page\nPrevious\nZendesk\nNext\nOverview\nTransform using JavaScript\nTransform using Python"
  },
  {
    "title": "Run Python code | ToolJet",
    "url": "https://docs.tooljet.com/docs/data-sources/run-py/",
    "html": "Datasource CatalogDatasources libraryRun Python code\nVersion: 2.27.0\nRun Python code\n\nYou can write custom Python code to interact with components and queries. To do that, you just need to create a new query and select Run Python Code from the available datasources.\n\nExample: Using Python code to trigger component specific actions​\n\nLet's drag a button and a text widget onto the canvas. We will set a text on the text component and trigger button click event from the Python query.\n\nClick on the + on the query panel to create a query and select Run Python code from the available datasources\n\nLet's write the code in Python Editor and save the query:\n\nclass Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n    \n  def myfunc(self):\n    return \"Hello my name is \" + self.name\n    \np1 = Person(tj_globals.currentUser.firstName, 36)\n\ncomponents.text1.setText(p1.myfunc())\ncomponents.button1.click()\n\n\nThe code above has a function myfunc which returns a string and we using the component specific action to set the text component's value from the Python query. We are also triggering the button click using components.button1.click()\n\nTIP\nToolJet's global variables can be accessed using tj_globals. ex: tj_globals.currentUser.firstName\nAs of now, Run Python code only supports the Python standard library only.\nCheck RunPy Limitations\nLet's edit the properties of widgets:\nAdd an event handler to the button - Select On Click event, Show alert action, and set a success message Triggered using RunPy. This will show a success alert popup whenever the button click event is triggered from the Python code.\nFor the text component, we don't have to edit any property since we are changing the value directly from the Python code.\n\nYou can also write custom Python code to get the data from External APIs and manipulate the response for graphical representation.\n\nINFO\n\nIssues with writing custom Python code? Ask in our Slack community.\n\nEdit this page\nPrevious\nRun JavaScript code\nNext\nSAP HANA"
  },
  {
    "title": "Run JavaScript code | ToolJet",
    "url": "https://docs.tooljet.com/docs/data-sources/run-js/",
    "html": "Datasource CatalogDatasources libraryRun JavaScript code\nVersion: 2.27.0\nRun JavaScript code\n\nYou can write custom JavaScript code to interact with components and queries. To do that, you just need to create a new query and select Run JavaScript Code from the default datasources section.\n\nJS parameters​\n\nJS parameters in RunJS queries offer a convenient way to customize JavaScript code execution without altering the code directly. You can add parameters by clicking the Add button in the RunJS query editor.\n\nEach parameter requires:\n\nName: Name for the parameter\nDefault value: The value can be constant strings, numbers and object.\n\nSyntax for calling the parameter: parameters.<name>\n\nExample: Alert a parameter​\n\nLet's create a new parameter named object1 and set the value as object {key1: 'value1'} and use the alert js method to show the value on the pop-up.\n\nSyntax:\n\nalert(parameters.object1)\n\n\nWhen the query is triggered the alert will show the parameters value.\n\nExample: Providing custom parameters by calling another query​\n\nLet's demonstrate how to utilize parameters in RunJS queries and call one query from another by providing custom parameter values:\n\nBegin by creating a new RunJS query named multiply. In this query, add the following parameters: num1 with a default value of 10 and num2 with a default value of 2. To display the result, place a text component on the canvas and set its text to {{queries.multiply.data}}. Save and Run the query.\n\nNow, let's create another RunJS query called callMultiply, where we will invoke the multiply query created earlier using custom parameter values. Here's the code snippet for callMultiply:\n\nqueries.multiply.run({num1: 20, num2: 20})\n\n\nBy executing this code within callMultiply, we trigger the multiply query with specific values for its parameters.\n\nWith this setup, the multiply query can be called from other queries, such as callMultiply, by providing custom parameter values. This allows you to reuse the multiply query with different inputs and display the results accordingly.\n\nRunJS query examples​\nDisplaying random number​\nLet's drag a button and a text widget inside a container widget.\nClick on the + on the query panel to create a query and select Run JavaScript code from the available datasources\nWrite the code in JavaScript editor and save the query:\nconst a = Math.floor(Math.random() * (10 - 1)) + 1;\nreturn a;\n\nTIP\nThe return statement is used to end the code and the value specified to the return statement will be stored in the data property of the query. ex: {{queries.runjs1.data}}\nYou cannot use console.log in Run JavaScript code\nLet's edit the properties of widgets:\nAdd an event handler to the button - Select On Click event, Run Query action, and select the runjs1 query that we created. This will run the JavaScript code every time the button is clicked.\nEdit the property of text widget - In the text field enter Random number: {{queries.runjs1.data}}. It will display the output as Random number: result from JS code\nGenerating Unique ID​\nCode 1:​\nvar id = \"id\" + Math.random().toString(16).slice(2);\nreturn id;\n\n\nIn this code, the resulting ID will have the format \"id\" followed by a sequence of random hexadecimal characters. For example, it could be something like \"id2f4a1b\".\n\nCode 2:​\nreturn String(Date.now().toString(32) + Math.random().toString(16)).replace(/\\./g, '');\n\n\nIn this code, the resulting ID will have the format \"timestamp + randomHex\", where \"timestamp\" is the current time in base-32 and \"randomHex\" is a random hexadecimal value. This ID will be longer than the one generated by Code 1, and it could look like \"2g3h1d6a4h3\".\n\nBoth code snippets will produce IDs that are highly likely to be unique. However, Code 1 generates shorter IDs and follows a more straightforward approach with a fixed prefix (\"id\"). On the other hand, Code 2 generates longer IDs by incorporating the current timestamp and using a combination of base-32 and hexadecimal representations. The choice between the two methods depends on the specific requirements of the application and the desired length of the generated IDs.\n\nRESOURCES\nYou can also write custom JavaScript code to get the data from External APIs and manipulate the response for graphical representation. Here's the tutorial on how we used custom JavaScript code to build an app using GitHub API.\nImport external libraries using RunJS.\nIntentionally Fail a RunJS query.\nTrigger query at specified intervals using RunJS.\nLibraries​\n\nToolJet allows you to internally utilize these libraries:\n\nName\tDocumentation\nMoment\thttps://momentjs.com/docs/\nLodash\thttps://lodash.com/docs/\nAxios\thttps://axios-http.com/docs/intro\nINFO\n\nIssues with writing custom JavaScript code? Ask in our Slack Community.\n\nEdit this page\nPrevious\nRethinkDB\nNext\nRun Python code\nJS parameters\nExample: Alert a parameter\nExample: Providing custom parameters by calling another query\nRunJS query examples\nDisplaying random number\nGenerating Unique ID\nLibraries"
  },
  {
    "title": "Security | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/security/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSecurity\nVersion: 2.24.0\nSecurity\nUncompromised Data Security with SOC 2 Compliance​\n\nWith SOC 2 compliance, Tooljet ensures the highest level of data security. The adherence to SOC 2 standards mirrors the rigorous data protection measures in place, covering everything from encryption to robust access controls. It also guarantees a consistent level of service availability and process integrity, instilling confidence in our customers and stakeholders about the safe handling of their sensitive information.\n\nData storage​\n\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\n\nDatasource credentials​\n\nAll the datasource credentials are securely encrypted using aes-256-gcm. The credentials are never exposed to the frontend ( ToolJet client ).\n\nOther security features​\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n\nIf you notice a security vulnerability, please let the team know by sending an email to security@tooljet.com.\n\nEdit this page\nPrevious\nSlack Code of Conduct\nNext\nTracking\nUncompromised Data Security with SOC 2 Compliance\nData storage\nDatasource credentials\nOther security features"
  },
  {
    "title": "Tracking | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/tracking/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nTracking\nVersion: 2.24.0\nTracking\nTIP\n\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n\nServer​\nTIP\n\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of CHECK_FOR_UPDATES environment variable to 0. This feature is enabled by default.\n\nClient​\n\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.\n\nTracking can be disabled by setting the value environment variable ENABLE_TRACKING to 0.\n\nEdit this page\nPrevious\nSecurity\nServer\nClient"
  },
  {
    "title": "Slack Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/contributing-guide/slackcoc/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideSlack Code of Conduct\nVersion: 2.24.0\nSlack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction​\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities — online and in-person— as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\nExpected behavior​\nBe welcoming.\nBe kind.\nLook out for each other.\nUnacceptable Behavior​\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\nWhere does the Code of Conduct apply?​\n\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\n\nIn addition, violations of this code outside our spaces may affect a person’s ability to participate in them.\n\nEnforcement​\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\nINFO\n\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n\nEtiquettes to follow​\n1. Be nice to everyone​\n2. Check off your resolved questions​\n\nIf you have received a useful reply to your question, please drop a ✅ reaction or a reply for affirmation.\n\n3. Try not to repost question​\n\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n\n4. Post in public​\n\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n\n5. Don't spam tags​\n\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n\n6. Use threads for discussion​\n\nTo keep the main channel area clear, we request to use threads to keep an ongoing conversation organized.\n\nEdit this page\nPrevious\nContributor Code of Conduct\nNext\nSecurity\nIntroduction\nExpected behavior\nUnacceptable Behavior\nWhere does the Code of Conduct apply?\nEnforcement\nEtiquettes to follow"
  },
  {
    "title": "Contributor Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/contributing-guide/code-of-conduct/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideContributor Code of Conduct\nVersion: 2.24.0\nContributor Covenant Code of Conduct\nOur Pledge​\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nOur Standards​\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nOur Responsibilities​\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nScope​\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nEnforcement​\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@tooljet.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\nAttribution​\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n\nEdit this page\nPrevious\nRunPy limitations\nNext\nSlack Code of Conduct\nOur Pledge\nOur Standards\nOur Responsibilities\nScope\nEnforcement\nAttribution"
  },
  {
    "title": "Localization | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/contributing-guide/l10n/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideLocalization\nVersion: 2.24.0\nLocalization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\nAdding Translations​\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n\n\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. fr is the language code for French.\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Français\" }\n    ]\n}\n\nNOTE\n\nFeel free to reach us on Slack for any help related to Localization.\n\nEdit this page\nPrevious\nTesting\nNext\nEsLint\nAdding Translations"
  },
  {
    "title": "Testing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/contributing-guide/testing/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideTesting\nVersion: 2.24.0\nTesting\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\nSetting up​\nNavigate to the cypress-tests directory and enter the following command:\nnpm install\n\nRunning Tests​\nHeaded mode​\n\nTo run cypress in headed mode, run the following command:\n\nnpm run cy:open\n\n\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\nHeadless mode​\n\nTo run cypress in headless mode, run the following command:\n\nnpm run cy:run\n\n\nFor running specific spec in headless mode, run for specific spec\n\nnpm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js\n\nCAUTION\n\nIf some test specs need the environment variables, the user can pass them similar to the following command:\n\nnpm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'\n\n\nor the user can add env-vars in the cypress.config.js file\n\nINFO\n\nCheck all the Cypress commands here\n\nEdit this page\nPrevious\nToolJet CLI\nNext\nLocalization\nSetting up\nRunning Tests"
  },
  {
    "title": "ToolJet CLI | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/tooljet-cli/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideToolJet CLI\nVersion: 2.24.0\nToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\nINFO\n\nStarting from ToolJet CLI version 0.0.14, the creation of datasource plugins has been deprecated to prioritise marketplace plugins. This change enhances the plugin development experience and aligns with ToolJet's roadmap.\n\nInstallation​\n\nIn order to manage plugins for the ToolJet marketplace, including creating, updating, and deleting, you will need to utilize tooljet-cli. This can be installed via npm by entering the following command:\n\nnpm install -g @tooljet/cli\n\nEnsure the installation was successful​\ntooljet --version\n\nCommands​\ninfo​\n\nThis command returns the information about where tooljet is being run\n\ntooljet info\n\ncreate​\n\nThis command creates a new plugin.\n\ntooljet plugin create PLUGIN_NAME\n\nTIP\n\nRead the detailed guide on creating a marketplace plugin here.\n\ndelete​\n\nThis command deletes a plugin.\n\ntooljet plugin delete PLUGIN_NAME\n\n\nThe CLI will prompt developers to verify if the plugin to be deleted is a marketplace plugin before proceeding with the deletion.\n\ninstall​\n\nInstalls a new npm module inside a tooljet plugin\n\ntooljet plugin install [NPM_MODULE] --plugin <value>\n\nEdit this page\nPrevious\nMarketplace: Creating plugins\nNext\nTesting\nInstallation\nCommands\ninfo\ncreate\ndelete\ninstall"
  },
  {
    "title": "GitSync | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/gitsync/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGitSync\nVersion: 2.24.0\nGitSync\nAvailable on: Paid plans\n\nThe GitSync feature enables synchronization of workspace applications with a git repository, streamlining application management and version control on ToolJet.\n\nOverview​\n\nToolJet applications can be synchronized with a Git repository, offering the flexibility to tailor your application development and deployment processes across various environments while aligning with best practices for the application development lifecycle.\n\nKey Use-Cases:​\nBackup of Apps​\n\nGitSync provides a straightforward solution for creating backups of your applications. By pushing changes to a Git repository, users can ensure a secure and versioned history of their application. This serves as a reliable backup mechanism, safeguarding against accidental application/version deletion or corruption.\n\nEnvironment Migration​\n\nFacilitating the movement of applications across different ToolJet deployments (e.g., from development to staging to production), GitSync acts as a pivotal tool for environment migration. Users can effortlessly transfer their applications across environments by pushing changes to a Git repository.\n\n\n\nSetting up GitSyncing with GitHub\nSetting up GitSyncing with GitLab\nSetting up GitSyncing with GitHub​\nCAUTION\nToolJet support git repo managers like GitHub, GitLab, Bitbucket, AWS CodeCommit, and Azure Repos.\nOnly Admins have the permission to configure the GitSync feature on workspace level.\nThe default branch name for the git repository should be master.\nStep 1: Create a new repository on GitHub​\n\nCreate a new repository on GitHub. The repository can be public or private. You can also use an existing repository. Make sure that the repository is empty.\n\nStep 2: Obtain the repository URL​\n\nObtain the SSH URL of the repository. When a repository is created, GitHub shows a screen with the repository URL. If the repository is already created, you can obtain the URL by clicking on the Clone or download button.\n\nStep 3: Configure the GitSync feature on ToolJet​\n\nGo to the Workspace settings, and click on the Configure git tab.\n\n\n\n\nEnter the SSH URL of the repository (obtained in Step 2) in the Git repository URL field. Click on the Generate SSH key button, and copy the SSH key that is generated. The SSH key is used to authenticate ToolJet with the repository.\n\nStep 4: Deploy the SSH key to GitHub repository​\n\nGo to the Settings tab of the GitHub repository that you created in Step 1, and click on the Deploy keys tab. Click on the Add deploy key button.\n\nEnter a title for the SSH key in the Title field. Paste the SSH key that you copied in Step 3 in the Key field. Make sure that the Allow write access checkbox is checked, especially when configuring the GitSync feature to push changes to Git. However, it is not mandatory to check this option when setting up the GitSync feature for pulling changes from Git. Finally, click on the Add key button.\n\nStep 5: Finish the GitSync configuration on ToolJet​\n\nGo back to the Configure git tab on ToolJet, and click on the Finalize setup button. If the SSH key is configured correctly, you will see a success message.\n\nEnable/Disable GitSync​\n\nTo enable or disable the GitSync feature, go to the Configure git tab on the Workspace settings page, and toggle on/off the Connect switch. This is only available if the GitSync feature is configured.\n\nWhen enabled\n\nOn clicking the GitSync button, the users will be able to commit changes to the git repository.\n\nWhen disabled\n\nFor non-admin users: The users will not be able to commit changes to the git repository. They will see a dialogue box that the GitSync feature is not configured and they need to contact the admin to configure it.\nFor admin users: The users will see a dialogue box with a link to configure the GitSync feature.\nDelete GitSync configuration​\n\nTo delete the GitSync configuration, go to the Configure git tab on the Workspace settings page, and click on the Delete configuration button. This will delete the SSH key from the ToolJet configuration and the GitSync feature will be disabled.\n\nNote:\n\nDeleting the GitSync configuration will not delete the apps from the git repository. The apps will still be available in the git repository in the same state as they were before the GitSync configuration was deleted.\nGit repo​\n\nOnce the initial commit is made, you can see the app files in the git repository. The repository will have the individual app folders and a .meta folder. The app folders will be named as the app name and will have the respective JSON file of the application. The .meta folder will have the meta.json file that contains the meta information of each application synced to git repo.\n\nThe meta.json file holds information about apps such as the App name, last commit message, last commit user, last commit date, version name, and version id.\n\nPushing changes to git repo​\n\nOnce the GitSync feature is configured, you can start pushing changes to the git repository.\n\nApp creation​\n\nWhen you create a new app, you will see an option to select the Commit changes. If you select the commit changes option, the changes will be committed to the git repository.\n\nINFO\n\nIf the app name is same as the name of the existing app in the git repo, it will overwrite the existing app in the git repo.\n\n\n\n\nSelecting the Commit changes option will create a new commit in the git repository. The commit message will be App creation and the author will be the user who created the app.\n\nApp rename​\n\nWhenever an app is renamed, the changes will be automatically committed to the git repository. The commit message will be App is renamed and the author will be the user who renamed the app.\n\nApp updates​\n\nWhenever a user makes a change in an app, they can make a commit to the git repository by clicking on the GitSync button on the topbar. On clicking the GitSync button, a modal will open with the option to enter the commit message. The user can enter the commit message and click on the Commit changes button to commit the changes to the git repository. Along with the commit message, the user can also see the connnected Git repo URL and the last commit details.\n\nLast commit details helps the user to know the last commit message, author, date, and time. This helps the user to know the last commit details and make the commit message accordingly.\n\n\n\n\nOnce the changes are committed, the user can see the commit message, author, and date in the git repository.\n\nApp deletion​\n\nWhenever a user deleted an app from the workspace, the app will not be deleted from the git repository. The app will be available in the git repository in the same state as it was before the app was deleted.\n\nApp version update​\n\nWhenever a user creates a new app version and creates a commit to git repository, the JSON file in the app folder will be replaced with the new version of the app that was created. The meta.json file in the .meta folder will also be updated with the new version id and version name.\n\nPulling changes from git repo​\n\nYou can configure the GitSync feature on another workspace to pull the changes from the git repository. To configure the GitSync feature on another workspace, follow the steps mentioned in the Setting up GitSyncing with GitHub section.\n\nOnce the GitSync feature is configured, go to the ToolJet dashboard and click on the three dots on the right side of the Create new app button. Click on the Import from git repository option.\n\n\n\n\nOn clicking the Import from git repository option, a modal will open with the dropdown to select the app to be imported from the git repository. Once the app is selected, the app name and the last commit will be displayed. Click on the Import app button to import the app from the git repository.\n\nCAUTION\nThe app imported from the git repository cannot be edited.\nThe app imported from the Git repository should have a unique name. If the app's name is the same as that of an existing app in the workspace, the user will need to either rename the existing app or delete it to successfully import another app with the same name.\nWorkspace constants are not synced with the git repository. After pulling the app, if the app throws an error, the user will need to manually add the workspace constants.\nChecking for updates​\n\nYou can check for updates in the git repository by clicking on the GitSync button on the topbar. On clicking the GitSync button, a modal will open with the option to Check for updates. Click on the Check for updates button to check for updates in the git repository. If there are any updates, you will see the details of the updates such as commit message, author, and the date in the modal. Click on the Pull changes button to pull the changes from the git repository.\n\nEdit this page\nPrevious\nVersioning and Release\nNext\nMarketplace\nOverview\nKey Use-Cases:\nSetting up GitSyncing with GitHub\nStep 1: Create a new repository on GitHub\nStep 2: Obtain the repository URL\nStep 3: Configure the GitSync feature on ToolJet\nStep 4: Deploy the SSH key to GitHub repository\nStep 5: Finish the GitSync configuration on ToolJet\nEnable/Disable GitSync\nDelete GitSync configuration\nGit repo\nPushing changes to git repo\nApp creation\nApp rename\nApp updates\nApp deletion\nApp version update\nPulling changes from git repo\nChecking for updates\nSetting up GitSyncing with GitLab\nStep 1: Create a new repository\nStep 2: Obtain the repository URL\nStep 3: Configure the GitSync feature on ToolJet\nStep 4: Deploy the SSH key to GitLab repository\nStep 5: Finish the GitSync configuration on ToolJet\nEnable/Disable GitSync\nDelete GitSync configuration\nGit repo\nPushing changes to git repo\nApp creation\nApp rename\nApp updates\nApp deletion\nApp version update\nPulling changes from git repo\nChecking for updates"
  },
  {
    "title": "Architecture | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/contributing-guide/setup/architecture/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideArchitecture\nVersion: 2.24.0\nIntroduction\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n1. ToolJet Server​\n\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more.\n\nDependencies:\n\nPostgreSQL - ToolJet server persists data to a postgres database.\nEmail service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.\nPostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client​\n\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\n\nRequirements​\nNode version 18.3.0\nnpm version 8.11.0\nEdit this page\nPrevious\nContributing Guide\nNext\nGitHub Codespaces\n1. ToolJet Server\n2. ToolJet Client\nRequirements"
  },
  {
    "title": "Dashboard | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/dashboard/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nDashboard\nVersion: 2.24.0\nDashboard\n\nThe ToolJet Dashboard is the initial landing page that you see upon logging into your workspace. This interface serves as a central hub where you can access a variety of features. Primarily, it displays all the applications you've created within ToolJet. Moreover, you have the capability to create new workspaces and applications directly from this dashboard. Additionally, it provides an option to create folders for categorizing and managing applications for easier organization, access control, and workflow management.\n\nFurthermore, the dashboard serves as a gateway to various essential sections, such as Workflows, ToolJet Database, Data Sources, Marketplace, Workspace Settings, Settings, and Audit logs. You can effortlessly navigate to these sections directly from the dashboard.\n\nWorkspace Manager​\n\nThe workspace manager is located on the bottom left corner of the dashboard. Clicking on the workspace manager will open a dropdown menu with a list of all the workspaces you are a part of. You can switch between workspaces by clicking on the workspace name from the dropdown menu.\n\nAdd new workspace​\n\nOn clicking the Add new workspace button, a modal will open where you can enter the name of the workspace, enter the unique workspace slug, and can see the preview of the workspace URL. Click on the + Create Workspace button to create a new workspace.\n\nPreviously, the workspace slug was an automatically generated workspace ID, like this: https://tooljet.com/262750db-b2b8-4abb-9404-8995c2ecb2a0. Now, you can set a custom, unique slug for your workspace which will generate a more accessible or readable URL such as https://tooljet.com/apac-team).\n\nConditions for workspace slug​\nThe workspace slug should be unique.\nThe workspace slug should not contain any special characters except -.\nThe workspace slug should not contain any spaces.\nThe workspace slug should not contain any capital letters.\nThe workspace slug should not be empty.\nEdit workspace​\n\nSimilar to the Add new workspace button, clicking on the Edit workspace button will open a modal where you can edit the name of the workspace and the workspace slug. Click on the Save button to update the changes.\n\nCreate a new app​\n\nTo create a new app, click on the Create new app button on the top left corner of the dashboard. Clicking on this button will open a modal where you can enter the name of the app and then click on the + Create app button to create a new app.\n\n\n\n\nThere are three dots on the right side of the Create new app button. Clicking on these dots will open a dropdown menu with two options:\n\nChoose from templates\nImport\nChoose from templates​\n\nThis option will open a modal with a list of pre-built templates. You can choose any template from this list to create a new app.\n\nImport​\n\nThis option will open a file picker to import a JSON file. This JSON file should be the app exported from ToolJet.\n\nImporting app connected to marketplace plugins​\n\nWhen importing an app with marketplace plugins, the marketplace plugin should be installed in the tooljet workspace where the app is being imported. If the marketplace plugin is not installed, the app will be imported without the queries for that plugin.\n\nWhen marketplace plugin is installed​\n\nIf marketplace plugin is installed in the tooljet workspace where the app is being imported, the queries connected to the marketplace plugin will be available in the imported application. The queries will be linked to the data source with the same name if it is already present. If the data source is not present, a new data source will be created of that marketplace plugin and linked to the queries.\n\nWhen marketplace plugin is not installed​\n\nIf you have an app with a query linked to a marketplace plugin, and you import that app in a tooljet workspace where the marketplace plugin is not installed as the data source, the queries will be not be available in the imported application.\n\nImporting app connected to tooljet table​\n\nWhen the app(JSON file) that includes the table schema is imported, and the table is not present in the tooljet database of the workspace where the app is being imported, a new table will be created in the tooljet database with the same name as the table in the imported app.\n\nIf the table with the same name is already present in the workspace, the new table will be created with the name <table name>_<unix timestamp>. Example: <tablename>_1627980000.\n\nFolders​\nCreate a new folder​\n\nFolders can be created to organize your apps. To create a new folder, click on the + button on the left drawer of the dashboard. Clicking on this button will open a modal, enter the name of the folder and click on the Create Folder button to create a new folder.\n\nDelete or Edit Folder​\n\nA folder can be deleted or renamed. To delete or rename a folder, click on the kebab menu on the right side of the folder name. Clicking on kebab menu will open a dropdown menu with two options:\n\nEdit folder: This option will open a modal, enter the new name of the folder and click on the Edit button to rename the folder.\nDelete folder: This option will open a confirmation modal to delete the folder. Click on the Delete button to delete the folder.\nSearch folders​\n\nFolders can be searched by clicking on the search icon on the left drawer of the dashboard. Clicking on the search icon will open a search bar, enter the name of the folder to search.\n\nSlug for folders​\n\nThe folder's URL slug is generated automatically from its name, providing direct access to the folder using the slug.\n\nTo get the URL of a specific folder, the user will have to select that folder and then copy the URL from the address bar of the browser. The copied URL can be used to share with other users of the workspace.\n\nExample: If the name of the folder is customer support, The folder can be accessed directly from the URL https://tooljet.com/<workspace-name>?folder=customer%20support.\n\nApp cards​\n\nThe dashboard displays all the apps created in the workspace as cards. These cards are displayed in a grid layout. The app cards display the name of the app, the name of the creator, and the date of creation. The app cards also display the app icon, which can be changed by clicking on the Change Icon option from the app menu.\n\nApp menu​\n\nThe app menu is located on the top right corner of the app card. Clicking on the app menu will open a dropdown menu with a list of options. These options are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nChange Icon​\n\nThis option will open a modal with a list of icons. You can choose any icon from this list to change the app icon.\n\nAdd to folder​\n\nThis option will open a modal with a list of folders. You can choose any folder from this list to add the app to the folder.\n\nClone app​\n\nSelecting this option will immediately open the cloned app in the app builder with the same configuration as the original app. The new app will be named as <original app name> followed by unix timestamp. Example: <original app name> 1627980000.\n\nExport app​\n\nThis option will download a JSON file of the application. This JSON file can be imported to ToolJet to create a new app. The exported app will include all the queries connected to global data sources including the data source created from Marketplace plugins.\n\nThis option allows you to select a specific version of the app to export or export all the versions of the app. To export a specific version of the app, select a version from the list of available versions in the modal and click on the Export selected version and to export all the versions of the app, click on the Export All button.\n\nExport ToolJet table schema​\n\nSelecting this option will include the schema of the tooljet table connected to that application in the exported JSON file. This option is available for all the apps on ToolJet however only the apps with a tooljet table connected(includes tjdb query) will have the schema included in the exported JSON file.\n\nThis JSON file can be used to import the application to ToolJet along with the table schema that was connected to the application.\n\nDelete app​\n\nThis option will open a confirmation modal to delete the app. Click on the Delete button to delete the app.\n\nApp search​\n\nApps can be searched by clicking on the search bar on the center of the dashboard. Click on the search bar and enter the name of the app to search.\n\nCurrent ToolJet Version​\n\nThe current version of ToolJet is displayed on the top right corner of the dashboard.\n\nEdit this page\nPrevious\nControl component (Component Specific Actions)\nNext\nOverview\nWorkspace Manager\nAdd new workspace\nEdit workspace\nCreate a new app\nChoose from templates\nImport\nImporting app connected to marketplace plugins\nImporting app connected to tooljet table\nFolders\nCreate a new folder\nDelete or Edit Folder\nSearch folders\nSlug for folders\nApp cards\nApp menu\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nApp search\nCurrent ToolJet Version"
  },
  {
    "title": "Contributing Guide | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/category/contributing-guide/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing Guide\nVersion: 2.24.0\nContributing Guide\n\nGuides for contributing to ToolJet\n\n📄️ Architecture\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n🗃️ Setup\n\n5 items\n\n🗃️ Marketplace\n\n2 items\n\n📄️ ToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\n📄️ Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\n📄️ Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\n🗃️ Troubleshooting\n\n2 items\n\n📄️ Contributor Code of Conduct\n\nOur Pledge\n\n📄️ Slack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nPrevious\nPrint data from multiple tabs\nNext\nArchitecture"
  },
  {
    "title": "How To Guides | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/category/how-to/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nHow To\nVersion: 2.24.0\nHow To Guides\n\nHow To Guides for all the things ToolJet\n\n📄️ Setup log file generation (Rsyslog)\n\nThe log file serves as a comprehensive record of audit logs, capturing crucial information about various activities within the ToolJet. Follow the guide below to set up and utilize the log file feature effectively.\n\n📄️ Use Inspector\n\nIn this how-to guide, we will take a look at Inspector of the app-builder and see how it can be helpful in building applications.\n\n📄️ Use form component\n\nIn this how-to guide, we will be building a simple application that will leverage the form component for adding a record into the database. For this guide, we will be using Google Sheet datasource to read and write data.\n\n📄️ Change text color in columns of the table\n\nIn this how-to guide, we will build an app that will use a sample RestAPI to display the data in the table, and then we will change the text color of the columns according to the condition.\n\n📄️ Conditional Formatting in Table\n\nConditional formatting enhances the visual representation of data by allowing you to dynamically adjust the appearance of cells in table component based on specific conditions. This how-to guide will guide you through the process of implementing advanced conditional formatting for text color and background color in a Table component.\n\n📄️ Bulk update multiple rows in table\n\nCurrently, the data sources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query.\n\n📄️ Delete multiple rows in table\n\nThe table component in the ToolJet has the option for bulk selection of rows that can have various use cases such as updating or deleting records. However, the datasources does not support bulk delete or bulk update operations.\n\n📄️ Using server side pagination for efficient data handling in tables\n\nIn this guide we will learn how to use server side pagination in table component. This will be helpful if you have a large data set and you want to load data in chunks. This will also help you to improve the performance of your application. This guide will be helpful if you are using datasources like MySQL, PostgreSQL, MSSQL, MongoDB, etc. in which you can use limit and offset to fetch data in chunks. We have also included an example to load data from Google Sheets in chunks.\n\n📄️ Enable/Disable a component using current user's property\n\nLet's take look at the exposed variables of the current user property:\n\n📄️ Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\n\n📄️ Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query.\n\n📄️ Import external libraries using RunJS\n\nToolJet allows you to utilize external libraries in your app by importing them using the RunJS query.\n\n📄️ Run Actions from RunJS query\n\nNow you can trigger all the actions available in ToolJet from within the RunJS query. This guide includes the syntax for each action along with the example.\n\n📄️ Intentionally fail a RunJS query\n\nIn this how-to guide, we will create a RunJS query that will throw an error.\n\n📄️ Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\n📄️ Use the to_py() Function in RunPy: Converting JavaScript Objects to Python\n\nThis how-to guide will demonstrate the usage of to_py() function in RunPy queries for converting the JavaScript objects to Python.\n\n📄️ Access a user's location\n\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n\n📄️ Use S3 signed URL to upload documents\n\nIn this how-to guide, you'll learn to upload documents to S3 buckets using the S3 signed URL from a ToolJet application.\n\n📄️ Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage.\n\n📄️ Upload files on AWS S3 bucket\n\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\n\n📄️ Upload files using GCS\n\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\n\n📄️ Loading image/PDF from base64 string\n\nIn this how-to guide we will see how we can load an image or PDF file using the base64 string available on the database. In this how-to, we have used the postgres database which already has the base64 strings for the image or the PDF files available.\n\n📄️ Use Events on Chart\n\nCurrently, the chart component does not support events. However, you can use the Custom Component to create a chart using a third-party library that supports events. Plotly is one of the libraries that supports events. In this tutorial, we will build a chart using Plotly and add events to it.\n\n📄️ Print data from multiple tabs\n\nIn this guide, we will learn how to print data from multiple tabs in ToolJet. This will be useful when you want to print an invoice or a report from your ToolJet application. For example, a tooljet app that has a set of tabs for each invoice and you want to print all the tabs in one go.\n\nPrevious\nPlivo\nNext\nSetup log file generation (Rsyslog)"
  },
  {
    "title": "Marketplace | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/category/marketplace/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nMarketplace\nVersion: 2.24.0\nMarketplace\n📄️ Marketplace : Overview\n\nWith ToolJet Marketplace, ToolJet users can conveniently add custom plugins (datasources) to their workspaces. This feature enables users to create plugins that cater to their specific needs and integrate them seamlessly with ToolJet.\n\n🗃️ Marketplace Plugins\n\n5 items\n\nPrevious\nGitSync\nNext\nMarketplace : Overview"
  },
  {
    "title": "Copilot | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/tooljet-copilot/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nCopilot\nVersion: 2.24.0\nCopilot\nAvailable on: Paid plans\nBETA\n\nToolJet Copilot is currently in private beta for Business and Enterprise users only.\n\nToolJet Copilot helps you write your queries faster. It uses OpenAI to suggest queries based on your data.\n\nActivating Copilot​\n\nTo gain access to Copilot, all users, including administrators, can individually sign up for the waitlist program. Upon successful sign up, each user will be issued a distinctive API key linked to their account. However, the exclusive authority to activate Copilot within the workspace settings lies solely with administrators. Administrators can proceed to the Copilot section in the workspace settings, where they can utilize their respective API key to set the \"Enable Copilot\" toggle option.\n\nYou can join the waitlist here: https://tooljet.com/copilot\n\nINFO\nCopilot can be used by users who have permissions to edit the app with the copilot setup.\nUsing Copilot​\n\nOnce activated, the Copilot feature can be accessed while editing any query within the transformations section in the query editor.\n\nCopilot's functionality relies on the provision of clear and concise plain English prompts. It possesses the capability to interact with and retrieve information from various components, enabling it to generate code specific to the desired actions associated with those components. This capability is facilitated by Copilot's comprehensive understanding of the application's present state.\n\nToken Limit per Workspace​\n\nA token is a unit of text that language models like ChatGPT process, such as a word or a character. To ensure fair usage and resource allocation among workspaces, a token limit is implemented. Currently, the token limit is set to 400. If the token limit is surpassed, the request is declined with the message \"Unable to process request. Max tokens exceeded.\"\n\nRate-Limiting​\n\nTo prevent abuse or excessive usage of the Copilot API, rate-limiting measures are in place. The following rules apply:\n\nEach user is restricted to a maximum number of requests within a specific time frame.\nThe current rate limit allows for 100 requests per minute per user.\nIf a user surpasses the rate limit, subsequent requests from that user will be rejected.\nINFO\n\nWhen generating an API key, if a workspace has 5 editors, the daily request limit will be 500 (100 requests per editor). Even if the workspace later expands to 10 editors after a week, the maximum number of requests allowed per day will still be 500.\n\nExample: Generating a SQL statement​\n\nThis example demonstrates the usage of copilot by generating a SQL query to fetch the order details from a PostgreSQL database based on the key provided in the REST API data.\n\nCreate a RESTAPI query using this mock api endpoint: https://fakestoreapi.com/users/1\nEnable transformation on the query editor\n\nTo generate a SQL query using Copilot, first enter the desired prompt within comments in the transformations code editor. Once the prompt has been entered, simply click the Generate Code button, and Copilot will generate the corresponding SQL query.\n\nAssuming that a PostgreSQL data source is already connected and there are two tables in it, namely customer and orders, enter the provided prompt in the code editor:\n\n/*\nAssume the data is an object which has email key.\nassume we have a database with two tables: \"customer\" and \"orders.\" The \"customer\" table has columns such as \"customer_id,\" \"customer_name,\" and \"country.\" The \"orders\" table has columns such as \"order_id,\" \"customer_id,\" \"order_date,\" and \"total_amount.\"\nreturn a SQL query to retrieve the total order amounts for customers from the email key retrieved from the data, who have placed more than three orders.*/\n\n\nClick on the \"Generate Code\" button to generate the SQL query.\n\nOnce the code is generated, add a return statement below the code to return the generated SQL query. The variable name for the query might be different in your generated code.\n\nreturn query //the variable might be different in your generated code\n\n\nPreview the returned SQL statement in the preview block to check if it is correct. Then click on the \"Run\" button to trigger the query.\n\nOnce the query is executed, create a new PostgreSQL query in SQL mode and use JavaScript to get the data query data dynamically:\n\n{{queries.restapi1.data}}\n\nCAUTION\n\nWhile using ToolJet Copilot, it is important to note that the accuracy of the output cannot be guaranteed by the platform. Ultimately, it is your responsibility to assess and evaluate any query before executing it.\n\nIf you have feedback or questions about ToolJet Copilot, feel free to join our slack community.\n\nEdit this page\nPrevious\nToolJet Database\nNext\nOverview\nActivating Copilot\nUsing Copilot\nToken Limit per Workspace\nRate-Limiting\nExample: Generating a SQL statement"
  },
  {
    "title": "Security | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/security/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSecurity\nVersion: 2.25.0\nSecurity\nUncompromised Data Security with SOC 2 Compliance​\n\nWith SOC 2 compliance, Tooljet ensures the highest level of data security. The adherence to SOC 2 standards mirrors the rigorous data protection measures in place, covering everything from encryption to robust access controls. It also guarantees a consistent level of service availability and process integrity, instilling confidence in our customers and stakeholders about the safe handling of their sensitive information.\n\nData storage​\n\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\n\nDatasource credentials​\n\nAll the datasource credentials are securely encrypted using aes-256-gcm. The credentials are never exposed to the frontend ( ToolJet client ).\n\nOther security features​\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n\nIf you notice a security vulnerability, please let the team know by sending an email to security@tooljet.com.\n\nEdit this page\nPrevious\nSlack Code of Conduct\nNext\nTracking\nUncompromised Data Security with SOC 2 Compliance\nData storage\nDatasource credentials\nOther security features"
  },
  {
    "title": "Tracking | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/tracking/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nTracking\nVersion: 2.25.0\nTracking\nTIP\n\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n\nServer​\nTIP\n\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of CHECK_FOR_UPDATES environment variable to 0. This feature is enabled by default.\n\nClient​\n\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.\n\nTracking can be disabled by setting the value environment variable ENABLE_TRACKING to 0.\n\nEdit this page\nPrevious\nSecurity\nServer\nClient"
  },
  {
    "title": "ToolJet Database | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/tooljet-database/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nToolJet Database\nVersion: 2.24.0\nToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\nEnabling the ToolJet Database for your instance​\n\nRequires:\n\nPostgREST server\nAdditional configuration for ToolJet server\n\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to true.\n\nPostgREST server​\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n\nTIP\n\nIf you have openssl installed, you can run the following command openssl rand -hex 32 to generate the value for PGRST_JWT_SECRET.\n\nIf this parameter is not specified then PostgREST refuses authentication requests.\n\nvariable\tdescription\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_DB_URI\tdatabase connection string for tooljet database\nPGRST_LOG_LEVEL\tinfo\nINFO\n\nPlease make sure that DB_URI is given in the format postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]\n\nAdditional ToolJet server configuration​\nvariable\tdescription\nENABLE_TOOLJET_DB\ttrue or false\nTOOLJET_DB\tDefault value is tooljet_db\nTOOLJET_DB_HOST\tdatabase host\nTOOLJET_DB_USER\tdatabase username\nTOOLJET_DB_PASS\tdatabase password\nTOOLJET_DB_PORT\tdatabase port\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_HOST\tpostgrest database host\n\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n\nTIP\n\nWhen this feature is enabled, the database name provided for TOOLJET_DB will be utilized to create a new database during server boot process in all of our production deploy setups. Incase you want to trigger it manually, use the command npm run db:create on ToolJet server.\n\nFeatures​\n\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\nExport table from the ToolJet Database to a JSON file.\nAccessing ToolJet Database​\n\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\n\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\nDatabase Editor​\n\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\nCreate New Table​\n\nFor creating a new table in ToolJet Database, click on the Create New Table button on the top left corner of the Database editor.\n\nWhen the Create New Table button is clicked, a drawer opens up from the right from where you can enter the details of your new table.\n\nFor creating a new table, you'll need to:​\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\nSupported data types​\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\nbigint: bigint is a numeric data type that is used to store whole numbers, that is, numbers without fractional components.\n\nClick on Create button to create a new table.\n\nSearch Table​\n\nYou can enter a search term to search through all tables in the database.\n\nAdd column​\n\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\n\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n\nColumn name: name of the column (key)\nData type: Check available data types here\nDefault Value Any default value for the column (not mandatory)\nDelete column​\n\nTo delete a particular column, just click on the column header and the delete button will appear, click on it to delete the column.\n\nAdd new row​\n\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\nEdit row​\n\nTo edit the rows from the ToolJet database dashboard, click on the Edit row button. A drawer will open from the right from where first you need to select the id of the row to be edited from the dropdown and then you can edit the cell values of the selected row.\n\nBulk upload data​\n\nYou can bulk upload data to the ToolJet database by clicking on the Bulk upload data button on the top of the database editor. On clicking the button, a drawer will open from the right from where you can upload a CSV file. This file is used to upsert records onto the table. If data for id column is missing it will insert new record with the row data else if id is present it will update the corresponding record with the corresponding row data.\n\nFrom the drawer, users can download the template CSV file in which they can enter the data to be uploaded to the ToolJet database's table or format their CSV file in the same way as the template file.\n\nOnce the CSV file is ready, click on the file picker to select the file or drag and drop the file in the file picker. Now, click on the Upload data button to upload the data to the ToolJet database.\n\nRequirements:\n\nThe data types of columns in the CSV file should match those in the ToolJet database table.\nThe id column with a serial data type should not contain duplicate values.\n\nLimitations:\n\nThere is a limit of 1000 rows per CSV file that can be uploaded to the ToolJet database.\nThe CSV file should not exceed 2MB in size.\nDelete records​\n\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\nFilter​\n\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\n\nAdding a filter on the table data​\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\nAvailable operations are:​\nequals: This operation is used to check if the value of the column is equal to the value entered in the input field.\ngreater than: This operation is used to check if the value of the column is greater than the value entered in the input field.\ngreater than or equal: This operation is used to check if the value of the column is greater than or equal to the value entered in the input field.\nless than: This operation is used to check if the value of the column is less than the value entered in the input field.\nless than or equal: This operation is used to check if the value of the column is less than or equal to the value entered in the input field.\nnot equal: This operation is used to check if the value of the column is not equal to the value entered in the input field.\nlike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nilike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. ex: ToolJet will match tooljet\nmatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nimatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nin: This operation is used to check if the value of the column is in the list of values entered in the input field. ex: 1,2,3\ncontains: This operation is used to check if the value of the column contains the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\ncontained: This operation is used to check if the value of the column is contained in the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nnot: This operation is used to negate the result of the operation selected in the dropdown. ex: not equals will return all the records where the value of the column is not equal to the value entered in the input field.\nSort​\n\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\nEdit table​\n\nTo edit the table name, click on the three vertical dots icon on the right of the table name and then click on the Edit option. A drawer will open from the right from where you can edit the table name.\n\nExport table​\n\nThe export table option allows you to download the selected table schema in a JSON file. This does not export the table data.\n\nWhile exporting the app, you can choose to export the app with or without table schema connected to the app.\n\nTo export the table schema, click on the three vertical dots icon on the right of the table name and then click on the Export option. A JSON file will be downloaded with the table schema.\n\nDelete table​\n\nTo delete a table, click on the three vertical dots icon on the right of the table name and then click on the Delete option. A confirmation modal will appear, click on the Delete button to delete the table.\n\nQuerying data from the ToolJet database​\n\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\nGo to the query panel, and click on the +Add button to add a new query, and select ToolJet Database\n\nSelect the table that you want to query from the dropdown, choose an operation from the dropdown, and then enter the required parameters for the selected operation. Click on the Run button to execute the query.\n\nINFO\nPreview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed as JSON or Raw.\nWhen a new query is created, by default the query name is set to tooljetdbN (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\nAvailable operations​\nList rows​\n\nThis operation returns all the records from the table\n\nOptional parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records.\nSort: Sort the query response by choosing a column and the order (ascending or descending).\nLimit: Limit the number of records to be returned by entering a number.\nCreate row​\n\nThis operation creates a new record in the table. You can create a single record or multiple records at once.\n\nRequired parameters​\nColumns: Choose the columns for which you want to add values for the new record and enter the values for the selected columns. You can also add a new column by clicking on the +Add column button.\nUpdate row​\n\nThis operation updates a record in the table. You can update a single record or multiple records at once.\n\nRequired parameter​\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\nColumns: Choose the columns for which you want to update the values for the selected record and enter the values for the selected columns.\nDelete row​\n\nThis operation deletes a record in the table. You can delete a single record or multiple records at once.\n\nRequired parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\nLimit: Limit the number of records to be deleted by entering a number.\nJoin tables​\n\nYou can join two or more tables in the ToolJet database by using the Join operation.\n\nRequired parameters​\n\nFrom: In the From section, there are the following parameters:\n\nSelected Table: Select the table from which you want to join the other table.\nType of Join: Select the type of join you want to perform. The available options are: Inner Join, Left Join, RIght Join, and Full Outer Join.\nJoining Table: Select the table that you want to join with the selected table.\nOn: Select the column from the selected table and the joining table on which you want to join the tables. Currently, only = operation is supported for joining tables.\nAND or OR condition: You can add multiple conditions by clicking on the +Add more button below each join. The conditions can be joined by AND or OR operation.\n\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records. The operations supported are same as the filter operations for the List rows operation.\n\nSort: Sort the query response by choosing a column and the order (ascending or descending).\n\nLimit: Limit the number of records to be returned by entering a number.\n\nOffset: Offset the number of records to be returned by entering a number. This parameter is used for pagination.\n\nSelect: Select the columns that you want to return in the query response. By default, all the columns are selected.\n\nINFO\n\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community\n\nEdit this page\nPrevious\nV2 migration guide\nNext\nCopilot\nEnabling the ToolJet Database for your instance\nPostgREST server\nFeatures\nAccessing ToolJet Database\nDatabase Editor\nCreate New Table\nSearch Table\nAdd column\nDelete column\nAdd new row\nEdit row\nBulk upload data\nDelete records\nFilter\nSort\nEdit table\nExport table\nDelete table\nQuerying data from the ToolJet database\nAvailable operations\nList rows\nCreate row\nUpdate row\nDelete row\nJoin tables"
  },
  {
    "title": "Setup ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/setup/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSetup\nVersion: 2.24.0\nSetup ToolJet\n\nCheck out the different methods you can use to deploy ToolJet on your machine\n\nTry ToolJet\n\nTry out ToolJet with single docker command\n\nDigitalOcean\n\nQuickly deploy ToolJet using the Deploy to DigitalOcean button\n\nDocker\n\nDeploy ToolJet on a server using docker-compose\n\nAWS EC2\n\nDeploy ToolJet on AWS EC2 instances\n\nAWS ECS\n\nDeploy ToolJet on AWS ECS instances\n\nOpenshift\n\nDeploy ToolJet on Openshift\n\nHelm\n\nDeploy ToolJet with Helm Chart\n\nKubernetes\n\nDeploy ToolJet on a Kubernetes cluster\n\nKubernetes (GKE)\n\nDeploy ToolJet on a GKE Kubernetes cluster\n\nKubernetes (AKS)\n\nDeploy ToolJet on a AKS Kubernetes cluster\n\nAzure container apps\n\nDeploy ToolJet on a Azure Container Apps\n\nGoogle Cloud Run\n\nDeploy ToolJet on Cloud Run with GCloud CLI\n\nDeploying ToolJet client\n\nDeploy ToolJet Client on static website hosting services\n\nEnvironment variables\n\nEnvironment variables required by ToolJet Client and Server to start running\n\nConnecting via HTTP proxy\n\nEnvironment variables required by ToolJet to connect via HTTP proxy\n\nDeploying ToolJet on a subpath\n\nSteps to deploy ToolJet on a subpath rather than root of domain\n\nV2 migration guide\n\nThings to know before migrating to ToolJet V2\n\nEdit this page\nPrevious\nGetting Started\nNext\nTry ToolJet"
  },
  {
    "title": "Slack Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/contributing-guide/slackcoc/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideSlack Code of Conduct\nVersion: 2.25.0\nSlack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction​\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities — online and in-person— as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\nExpected behavior​\nBe welcoming.\nBe kind.\nLook out for each other.\nUnacceptable Behavior​\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\nWhere does the Code of Conduct apply?​\n\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\n\nIn addition, violations of this code outside our spaces may affect a person’s ability to participate in them.\n\nEnforcement​\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\nINFO\n\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n\nEtiquettes to follow​\n1. Be nice to everyone​\n2. Check off your resolved questions​\n\nIf you have received a useful reply to your question, please drop a ✅ reaction or a reply for affirmation.\n\n3. Try not to repost question​\n\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n\n4. Post in public​\n\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n\n5. Don't spam tags​\n\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n\n6. Use threads for discussion​\n\nTo keep the main channel area clear, we request to use threads to keep an ongoing conversation organized.\n\nEdit this page\nPrevious\nContributor Code of Conduct\nNext\nSecurity\nIntroduction\nExpected behavior\nUnacceptable Behavior\nWhere does the Code of Conduct apply?\nEnforcement\nEtiquettes to follow"
  },
  {
    "title": "Contributor Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/contributing-guide/code-of-conduct/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideContributor Code of Conduct\nVersion: 2.25.0\nContributor Covenant Code of Conduct\nOur Pledge​\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nOur Standards​\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nOur Responsibilities​\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nScope​\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nEnforcement​\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@tooljet.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\nAttribution​\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n\nEdit this page\nPrevious\nRunPy limitations\nNext\nSlack Code of Conduct\nOur Pledge\nOur Standards\nOur Responsibilities\nScope\nEnforcement\nAttribution"
  },
  {
    "title": "Localization | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/contributing-guide/l10n/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideLocalization\nVersion: 2.25.0\nLocalization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\nAdding Translations​\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n\n\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. fr is the language code for French.\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Français\" }\n    ]\n}\n\nNOTE\n\nFeel free to reach us on Slack for any help related to Localization.\n\nEdit this page\nPrevious\nTesting\nNext\nEsLint\nAdding Translations"
  },
  {
    "title": "Testing | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/contributing-guide/testing/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideTesting\nVersion: 2.25.0\nTesting\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\nSetting up​\nNavigate to the cypress-tests directory and enter the following command:\nnpm install\n\nRunning Tests​\nHeaded mode​\n\nTo run cypress in headed mode, run the following command:\n\nnpm run cy:open\n\n\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\nHeadless mode​\n\nTo run cypress in headless mode, run the following command:\n\nnpm run cy:run\n\n\nFor running specific spec in headless mode, run for specific spec\n\nnpm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js\n\nCAUTION\n\nIf some test specs need the environment variables, the user can pass them similar to the following command:\n\nnpm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'\n\n\nor the user can add env-vars in the cypress.config.js file\n\nINFO\n\nCheck all the Cypress commands here\n\nEdit this page\nPrevious\nToolJet CLI\nNext\nLocalization\nSetting up\nRunning Tests"
  },
  {
    "title": "ToolJet CLI | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/tooljet-cli/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideToolJet CLI\nVersion: 2.25.0\nToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\nINFO\n\nStarting from ToolJet CLI version 0.0.14, the creation of datasource plugins has been deprecated to prioritise marketplace plugins. This change enhances the plugin development experience and aligns with ToolJet's roadmap.\n\nInstallation​\n\nIn order to manage plugins for the ToolJet marketplace, including creating, updating, and deleting, you will need to utilize tooljet-cli. This can be installed via npm by entering the following command:\n\nnpm install -g @tooljet/cli\n\nEnsure the installation was successful​\ntooljet --version\n\nCommands​\ninfo​\n\nThis command returns the information about where tooljet is being run\n\ntooljet info\n\ncreate​\n\nThis command creates a new plugin.\n\ntooljet plugin create PLUGIN_NAME\n\nTIP\n\nRead the detailed guide on creating a marketplace plugin here.\n\ndelete​\n\nThis command deletes a plugin.\n\ntooljet plugin delete PLUGIN_NAME\n\n\nThe CLI will prompt developers to verify if the plugin to be deleted is a marketplace plugin before proceeding with the deletion.\n\ninstall​\n\nInstalls a new npm module inside a tooljet plugin\n\ntooljet plugin install [NPM_MODULE] --plugin <value>\n\nEdit this page\nPrevious\nMarketplace: Creating plugins\nNext\nTesting\nInstallation\nCommands\ninfo\ncreate\ndelete\ninstall"
  },
  {
    "title": "Architecture | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/contributing-guide/setup/architecture/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing GuideArchitecture\nVersion: 2.25.0\nIntroduction\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n1. ToolJet Server​\n\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more.\n\nDependencies:\n\nPostgreSQL - ToolJet server persists data to a postgres database.\nEmail service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.\nPostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client​\n\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\n\nRequirements​\nNode version 18.3.0\nnpm version 8.11.0\nEdit this page\nPrevious\nContributing Guide\nNext\nGitHub Codespaces\n1. ToolJet Server\n2. ToolJet Client\nRequirements"
  },
  {
    "title": "Contributing Guide | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/category/contributing-guide/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nContributing Guide\nVersion: 2.25.0\nContributing Guide\n\nGuides for contributing to ToolJet\n\n📄️ Architecture\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n🗃️ Setup\n\n5 items\n\n🗃️ Marketplace\n\n2 items\n\n📄️ ToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\n📄️ Testing\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\n📄️ Localization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\n🗃️ Troubleshooting\n\n2 items\n\n📄️ Contributor Code of Conduct\n\nOur Pledge\n\n📄️ Slack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nPrevious\nPrint data from multiple tabs\nNext\nArchitecture"
  },
  {
    "title": "How To Guides | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/category/how-to/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nHow To\nVersion: 2.25.0\nHow To Guides\n\nHow To Guides for all the things ToolJet\n\n📄️ Setup log file generation (Rsyslog)\n\nThe log file serves as a comprehensive record of audit logs, capturing crucial information about various activities within the ToolJet. Follow the guide below to set up and utilize the log file feature effectively.\n\n📄️ Use Inspector in App-Builder\n\nThis guide introduces Inspector in the app-builder, a feature that lets you view data related to queries, components, global variables, page-related variables, user-set variables and constants.\n\n📄️ Use Form Component\n\nIn this guide, we'll create a simple app that uses a Form component to add records to a database. We'll use ToolJet Database as our data source.\n\n📄️ Dynamically Change Cell Colors in Table\n\nThis guide shows how to change the text color and background color of certain cells in a Table component based on specific conditions.\n\n📄️ Conditional Formatting in Table\n\nConditional formatting enhances the visual representation of data by allowing you to dynamically adjust the appearance of cells in table component based on specific conditions. This how-to guide will guide you through the process of implementing advanced conditional formatting for text color and background color in a Table component.\n\n📄️ Bulk update multiple rows in table\n\nCurrently, the data sources in ToolJet have operation for bulk update(GUI mode) but that only works for changes made in the single row. We will soon be adding a new operation for bulk updating the multiple rows but for now we can bulk update multiple rows by creating a Custom JS query.\n\n📄️ Delete multiple rows in table\n\nThe table component in the ToolJet has the option for bulk selection of rows that can have various use cases such as updating or deleting records. However, the datasources does not support bulk delete or bulk update operations.\n\n📄️ Using server side pagination for efficient data handling in tables\n\nIn this guide we will learn how to use server side pagination in table component. This will be helpful if you have a large data set and you want to load data in chunks. This will also help you to improve the performance of your application. This guide will be helpful if you are using datasources like MySQL, PostgreSQL, MSSQL, MongoDB, etc. in which you can use limit and offset to fetch data in chunks. We have also included an example to load data from Google Sheets in chunks.\n\n📄️ Enable/Disable a Component Using Current User's Property\n\nLet's take a look at the exposed variables of the currentUser property by clicking on the inspector icon on the left sidebar:\n\n📄️ Use Axios in RunJS\n\nToolJet allows you to utilize the three libraries - Moment.js, Lodash, and Axios. In this guide, we will see a few examples on how to use Axios library using RunJS query.\n\n📄️ Import external libraries using RunPy\n\nToolJet allows you to utilize python packages in your app by importing them using the RunPy query.\n\n📄️ Import external libraries using RunJS\n\nToolJet allows you to utilize external libraries in your app by importing them using the RunJS query.\n\n📄️ Run Actions from RunJS query\n\nNow you can trigger all the actions available in ToolJet from within the RunJS query. This guide includes the syntax for each action along with the example.\n\n📄️ Intentionally fail a RunJS query\n\nIn this how-to guide, we will create a RunJS query that will throw an error.\n\n📄️ Run query at specified intervals\n\nIn this how-to guide, we will learn how to make a query trigger at the specific intervals.\n\n📄️ Use the to_py() Function in RunPy: Converting JavaScript Objects to Python\n\nThis how-to guide will demonstrate the usage of to_py() function in RunPy queries for converting the JavaScript objects to Python.\n\n📄️ Access a user's location\n\nIn this how-to guide, we will build a ToolJet application that will utilize the JavaScript Geolocation API to get the user's location. The Geolocation API provides access to geographical location data associated with a user's device. This can be determined using GPS, WIFI, IP Geolocation and so on.\n\n📄️ Use S3 signed URL to upload documents\n\nIn this how-to guide, you'll learn to upload documents to S3 buckets using the S3 signed URL from a ToolJet application.\n\n📄️ Use custom endpoint for s3 hosts\n\nIn this how-to guide, we will see how we can connect to different S3 compatible object storages using the custom endpoint. In this guide, we are using Minio since it is an S3-compatible object storage.\n\n📄️ Upload files on AWS S3 bucket\n\nThis guide will help you in quickly building a basic UI for uploading or downloading files from AWS S3 buckets.\n\n📄️ Upload files using GCS\n\nIn this guide, we are going to create an interface to upload PDFs to Google Cloud Storage.\n\n📄️ Upload And View Images and PDFs Using Base64 String\n\nThis guide shows how to upload and view images and PDFs using the base64 string format.\n\n📄️ Use Events on Chart\n\nCurrently, the chart component does not support events. However, you can use the Custom Component to create a chart using a third-party library that supports events. Plotly is one of the libraries that supports events. In this tutorial, we will build a chart using Plotly and add events to it.\n\n📄️ Print data from multiple tabs\n\nIn this guide, we will learn how to print data from multiple tabs in ToolJet. This will be useful when you want to print an invoice or a report from your ToolJet application. For example, a tooljet app that has a set of tabs for each invoice and you want to print all the tabs in one go.\n\nPrevious\nPlivo\nNext\nSetup log file generation (Rsyslog)"
  },
  {
    "title": "Marketplace | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/category/marketplace/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nMarketplace\nVersion: 2.25.0\nMarketplace\n📄️ Marketplace : Overview\n\nWith ToolJet Marketplace, ToolJet users can conveniently add custom plugins (datasources) to their workspaces. This feature enables users to create plugins that cater to their specific needs and integrate them seamlessly with ToolJet.\n\n🗃️ Marketplace Plugins\n\n5 items\n\nPrevious\nGitSync\nNext\nMarketplace : Overview"
  },
  {
    "title": "GitSync | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/gitsync/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGitSync\nVersion: 2.25.0\nGitSync\nAvailable on: Paid plans\n\nThe GitSync feature enables synchronization of workspace applications with a git repository, streamlining application management and version control on ToolJet.\n\nOverview​\n\nToolJet applications can be synchronized with a Git repository, offering the flexibility to tailor your application development and deployment processes across various environments while aligning with best practices for the application development lifecycle.\n\nKey Use-Cases:​\nBackup of Apps​\n\nGitSync provides a straightforward solution for creating backups of your applications. By pushing changes to a Git repository, users can ensure a secure and versioned history of their application. This serves as a reliable backup mechanism, safeguarding against accidental application/version deletion or corruption.\n\nEnvironment Migration​\n\nFacilitating the movement of applications across different ToolJet deployments (e.g., from development to staging to production), GitSync acts as a pivotal tool for environment migration. Users can effortlessly transfer their applications across environments by pushing changes to a Git repository.\n\n\n\nSetting up GitSyncing with GitHub\nSetting up GitSyncing with GitLab\nSetting up GitSyncing with GitHub​\nCAUTION\nToolJet support git repo managers like GitHub, GitLab, Bitbucket, AWS CodeCommit, and Azure Repos.\nOnly Admins have the permission to configure the GitSync feature on workspace level.\nThe default branch name for the git repository should be master.\nStep 1: Create a new repository on GitHub​\n\nCreate a new repository on GitHub. The repository can be public or private. You can also use an existing repository. Make sure that the repository is empty.\n\nStep 2: Obtain the repository URL​\n\nObtain the SSH URL of the repository. When a repository is created, GitHub shows a screen with the repository URL. If the repository is already created, you can obtain the URL by clicking on the Clone or download button.\n\nStep 3: Configure the GitSync feature on ToolJet​\n\nGo to the Workspace settings, and click on the Configure git tab.\n\n\n\n\nEnter the SSH URL of the repository (obtained in Step 2) in the Git repository URL field. Click on the Generate SSH key button, and copy the SSH key that is generated. The SSH key is used to authenticate ToolJet with the repository.\n\nStep 4: Deploy the SSH key to GitHub repository​\n\nGo to the Settings tab of the GitHub repository that you created in Step 1, and click on the Deploy keys tab. Click on the Add deploy key button.\n\nEnter a title for the SSH key in the Title field. Paste the SSH key that you copied in Step 3 in the Key field. Make sure that the Allow write access checkbox is checked, especially when configuring the GitSync feature to push changes to Git. However, it is not mandatory to check this option when setting up the GitSync feature for pulling changes from Git. Finally, click on the Add key button.\n\nStep 5: Finish the GitSync configuration on ToolJet​\n\nGo back to the Configure git tab on ToolJet, and click on the Finalize setup button. If the SSH key is configured correctly, you will see a success message.\n\nEnable/Disable GitSync​\n\nTo enable or disable the GitSync feature, go to the Configure git tab on the Workspace settings page, and toggle on/off the Connect switch. This is only available if the GitSync feature is configured.\n\nWhen enabled\n\nOn clicking the GitSync button, the users will be able to commit changes to the git repository.\n\nWhen disabled\n\nFor non-admin users: The users will not be able to commit changes to the git repository. They will see a dialogue box that the GitSync feature is not configured and they need to contact the admin to configure it.\nFor admin users: The users will see a dialogue box with a link to configure the GitSync feature.\nDelete GitSync configuration​\n\nTo delete the GitSync configuration, go to the Configure git tab on the Workspace settings page, and click on the Delete configuration button. This will delete the SSH key from the ToolJet configuration and the GitSync feature will be disabled.\n\nNote:\n\nDeleting the GitSync configuration will not delete the apps from the git repository. The apps will still be available in the git repository in the same state as they were before the GitSync configuration was deleted.\nGit repo​\n\nOnce the initial commit is made, you can see the app files in the git repository. The repository will have the individual app folders and a .meta folder. The app folders will be named as the app name and will have the respective JSON file of the application. The .meta folder will have the meta.json file that contains the meta information of each application synced to git repo.\n\nThe meta.json file holds information about apps such as the App name, last commit message, last commit user, last commit date, version name, and version id.\n\nPushing changes to git repo​\n\nOnce the GitSync feature is configured, you can start pushing changes to the git repository.\n\nApp creation​\n\nWhen you create a new app, you will see an option to select the Commit changes. If you select the commit changes option, the changes will be committed to the git repository.\n\nINFO\n\nIf the app name is same as the name of the existing app in the git repo, it will overwrite the existing app in the git repo.\n\n\n\n\nSelecting the Commit changes option will create a new commit in the git repository. The commit message will be App creation and the author will be the user who created the app.\n\nApp rename​\n\nWhenever an app is renamed, the changes will be automatically committed to the git repository. The commit message will be App is renamed and the author will be the user who renamed the app.\n\nApp updates​\n\nWhenever a user makes a change in an app, they can make a commit to the git repository by clicking on the GitSync button on the topbar. On clicking the GitSync button, a modal will open with the option to enter the commit message. The user can enter the commit message and click on the Commit changes button to commit the changes to the git repository. Along with the commit message, the user can also see the connnected Git repo URL and the last commit details.\n\nLast commit details helps the user to know the last commit message, author, date, and time. This helps the user to know the last commit details and make the commit message accordingly.\n\n\n\n\nOnce the changes are committed, the user can see the commit message, author, and date in the git repository.\n\nApp deletion​\n\nWhenever a user deleted an app from the workspace, the app will not be deleted from the git repository. The app will be available in the git repository in the same state as it was before the app was deleted.\n\nApp version update​\n\nWhenever a user creates a new app version and creates a commit to git repository, the JSON file in the app folder will be replaced with the new version of the app that was created. The meta.json file in the .meta folder will also be updated with the new version id and version name.\n\nPulling changes from git repo​\n\nYou can configure the GitSync feature on another workspace to pull the changes from the git repository. To configure the GitSync feature on another workspace, follow the steps mentioned in the Setting up GitSyncing with GitHub section.\n\nOnce the GitSync feature is configured, go to the ToolJet dashboard and click on the three dots on the right side of the Create new app button. Click on the Import from git repository option.\n\n\n\n\nOn clicking the Import from git repository option, a modal will open with the dropdown to select the app to be imported from the git repository. Once the app is selected, the app name and the last commit will be displayed. Click on the Import app button to import the app from the git repository.\n\nCAUTION\nThe app imported from the git repository cannot be edited.\nThe app imported from the Git repository should have a unique name. If the app's name is the same as that of an existing app in the workspace, the user will need to either rename the existing app or delete it to successfully import another app with the same name.\nWorkspace constants are not synced with the git repository. After pulling the app, if the app throws an error, the user will need to manually add the workspace constants.\nChecking for updates​\n\nYou can check for updates in the git repository by clicking on the GitSync button on the topbar. On clicking the GitSync button, a modal will open with the option to Check for updates. Click on the Check for updates button to check for updates in the git repository. If there are any updates, you will see the details of the updates such as commit message, author, and the date in the modal. Click on the Pull changes button to pull the changes from the git repository.\n\nEdit this page\nPrevious\nVersioning and Release\nNext\nMarketplace\nOverview\nKey Use-Cases:\nSetting up GitSyncing with GitHub\nStep 1: Create a new repository on GitHub\nStep 2: Obtain the repository URL\nStep 3: Configure the GitSync feature on ToolJet\nStep 4: Deploy the SSH key to GitHub repository\nStep 5: Finish the GitSync configuration on ToolJet\nEnable/Disable GitSync\nDelete GitSync configuration\nGit repo\nPushing changes to git repo\nApp creation\nApp rename\nApp updates\nApp deletion\nApp version update\nPulling changes from git repo\nChecking for updates\nSetting up GitSyncing with GitLab\nStep 1: Create a new repository\nStep 2: Obtain the repository URL\nStep 3: Configure the GitSync feature on ToolJet\nStep 4: Deploy the SSH key to GitLab repository\nStep 5: Finish the GitSync configuration on ToolJet\nEnable/Disable GitSync\nDelete GitSync configuration\nGit repo\nPushing changes to git repo\nApp creation\nApp rename\nApp updates\nApp deletion\nApp version update\nPulling changes from git repo\nChecking for updates"
  },
  {
    "title": "Dashboard | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/dashboard/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nDashboard\nVersion: 2.25.0\nDashboard\n\nThe ToolJet Dashboard is the initial landing page that you see upon logging into your workspace. This interface serves as a central hub where you can access a variety of features. Primarily, it displays all the applications you've created within ToolJet. Moreover, you have the capability to create new workspaces and applications directly from this dashboard. Additionally, it provides an option to create folders for categorizing and managing applications for easier organization, access control, and workflow management.\n\nFurthermore, the dashboard serves as a gateway to various essential sections, such as Workflows, ToolJet Database, Data Sources, Marketplace, Workspace Settings, Settings, and Audit logs. You can effortlessly navigate to these sections directly from the dashboard.\n\nWorkspace Manager​\n\nThe workspace manager is located on the bottom left corner of the dashboard. Clicking on the workspace manager will open a dropdown menu with a list of all the workspaces you are a part of. You can switch between workspaces by clicking on the workspace name from the dropdown menu.\n\nAdd new workspace​\n\nOn clicking the Add new workspace button, a modal will open where you can enter the name of the workspace, enter the unique workspace slug, and can see the preview of the workspace URL. Click on the + Create Workspace button to create a new workspace.\n\nPreviously, the workspace slug was an automatically generated workspace ID, like this: https://tooljet.com/262750db-b2b8-4abb-9404-8995c2ecb2a0. Now, you can set a custom, unique slug for your workspace which will generate a more accessible or readable URL such as https://tooljet.com/apac-team).\n\nConditions for workspace slug​\nThe workspace slug should be unique.\nThe workspace slug should not contain any special characters except -.\nThe workspace slug should not contain any spaces.\nThe workspace slug should not contain any capital letters.\nThe workspace slug should not be empty.\nEdit workspace​\n\nSimilar to the Add new workspace button, clicking on the Edit workspace button will open a modal where you can edit the name of the workspace and the workspace slug. Click on the Save button to update the changes.\n\nCreate a new app​\n\nTo create a new app, click on the Create new app button on the top left corner of the dashboard. Clicking on this button will open a modal where you can enter the name of the app and then click on the + Create app button to create a new app.\n\n\n\n\nThere are three dots on the right side of the Create new app button. Clicking on these dots will open a dropdown menu with two options:\n\nChoose from templates\nImport\nChoose from templates​\n\nThis option will open a modal with a list of pre-built templates. You can choose any template from this list to create a new app.\n\nImport​\n\nThis option will open a file picker to import a JSON file. This JSON file should be the app exported from ToolJet.\n\nImporting app connected to marketplace plugins​\n\nWhen importing an app with marketplace plugins, the marketplace plugin should be installed in the tooljet workspace where the app is being imported. If the marketplace plugin is not installed, the app will be imported without the queries for that plugin.\n\nWhen marketplace plugin is installed​\n\nIf marketplace plugin is installed in the tooljet workspace where the app is being imported, the queries connected to the marketplace plugin will be available in the imported application. The queries will be linked to the data source with the same name if it is already present. If the data source is not present, a new data source will be created of that marketplace plugin and linked to the queries.\n\nWhen marketplace plugin is not installed​\n\nIf you have an app with a query linked to a marketplace plugin, and you import that app in a tooljet workspace where the marketplace plugin is not installed as the data source, the queries will be not be available in the imported application.\n\nImporting app connected to tooljet table​\n\nWhen the app(JSON file) that includes the table schema is imported, and the table is not present in the tooljet database of the workspace where the app is being imported, a new table will be created in the tooljet database with the same name as the table in the imported app.\n\nIf the table with the same name is already present in the workspace, the new table will be created with the name <table name>_<unix timestamp>. Example: <tablename>_1627980000.\n\nFolders​\nCreate a new folder​\n\nFolders can be created to organize your apps. To create a new folder, click on the + button on the left drawer of the dashboard. Clicking on this button will open a modal, enter the name of the folder and click on the Create Folder button to create a new folder.\n\nDelete or Edit Folder​\n\nA folder can be deleted or renamed. To delete or rename a folder, click on the kebab menu on the right side of the folder name. Clicking on kebab menu will open a dropdown menu with two options:\n\nEdit folder: This option will open a modal, enter the new name of the folder and click on the Edit button to rename the folder.\nDelete folder: This option will open a confirmation modal to delete the folder. Click on the Delete button to delete the folder.\nSearch folders​\n\nFolders can be searched by clicking on the search icon on the left drawer of the dashboard. Clicking on the search icon will open a search bar, enter the name of the folder to search.\n\nSlug for folders​\n\nThe folder's URL slug is generated automatically from its name, providing direct access to the folder using the slug.\n\nTo get the URL of a specific folder, the user will have to select that folder and then copy the URL from the address bar of the browser. The copied URL can be used to share with other users of the workspace.\n\nExample: If the name of the folder is customer support, The folder can be accessed directly from the URL https://tooljet.com/<workspace-name>?folder=customer%20support.\n\nApp cards​\n\nThe dashboard displays all the apps created in the workspace as cards. These cards are displayed in a grid layout. The app cards display the name of the app, the name of the creator, and the date of creation. The app cards also display the app icon, which can be changed by clicking on the Change Icon option from the app menu.\n\nApp menu​\n\nThe app menu is located on the top right corner of the app card. Clicking on the app menu will open a dropdown menu with a list of options. These options are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nChange Icon​\n\nThis option will open a modal with a list of icons. You can choose any icon from this list to change the app icon.\n\nAdd to folder​\n\nThis option will open a modal with a list of folders. You can choose any folder from this list to add the app to the folder.\n\nClone app​\n\nSelecting this option will immediately open the cloned app in the app builder with the same configuration as the original app. The new app will be named as <original app name> followed by unix timestamp. Example: <original app name> 1627980000.\n\nExport app​\n\nThis option will download a JSON file of the application. This JSON file can be imported to ToolJet to create a new app. The exported app will include all the queries connected to global data sources including the data source created from Marketplace plugins.\n\nThis option allows you to select a specific version of the app to export or export all the versions of the app. To export a specific version of the app, select a version from the list of available versions in the modal and click on the Export selected version and to export all the versions of the app, click on the Export All button.\n\nExport ToolJet table schema​\n\nSelecting this option will include the schema of the tooljet table connected to that application in the exported JSON file. This option is available for all the apps on ToolJet however only the apps with a tooljet table connected(includes tjdb query) will have the schema included in the exported JSON file.\n\nThis JSON file can be used to import the application to ToolJet along with the table schema that was connected to the application.\n\nDelete app​\n\nThis option will open a confirmation modal to delete the app. Click on the Delete button to delete the app.\n\nApp search​\n\nApps can be searched by clicking on the search bar on the center of the dashboard. Click on the search bar and enter the name of the app to search.\n\nCurrent ToolJet Version​\n\nThe current version of ToolJet is displayed on the top right corner of the dashboard.\n\nEdit this page\nPrevious\nControl component (Component Specific Actions)\nNext\nOverview\nWorkspace Manager\nAdd new workspace\nEdit workspace\nCreate a new app\nChoose from templates\nImport\nImporting app connected to marketplace plugins\nImporting app connected to tooljet table\nFolders\nCreate a new folder\nDelete or Edit Folder\nSearch folders\nSlug for folders\nApp cards\nApp menu\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nApp search\nCurrent ToolJet Version"
  },
  {
    "title": "ToolJet Database | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/tooljet-database/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nToolJet Database\nVersion: 2.25.0\nToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\nEnabling the ToolJet Database for your instance​\n\nRequires:\n\nPostgREST server\nAdditional configuration for ToolJet server\n\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to true.\n\nPostgREST server​\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n\nTIP\n\nIf you have openssl installed, you can run the following command openssl rand -hex 32 to generate the value for PGRST_JWT_SECRET.\n\nIf this parameter is not specified then PostgREST refuses authentication requests.\n\nvariable\tdescription\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_DB_URI\tdatabase connection string for tooljet database\nPGRST_LOG_LEVEL\tinfo\nINFO\n\nPlease make sure that DB_URI is given in the format postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]\n\nAdditional ToolJet server configuration​\nvariable\tdescription\nENABLE_TOOLJET_DB\ttrue or false\nTOOLJET_DB\tDefault value is tooljet_db\nTOOLJET_DB_HOST\tdatabase host\nTOOLJET_DB_USER\tdatabase username\nTOOLJET_DB_PASS\tdatabase password\nTOOLJET_DB_PORT\tdatabase port\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_HOST\tpostgrest database host\n\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n\nTIP\n\nWhen this feature is enabled, the database name provided for TOOLJET_DB will be utilized to create a new database during server boot process in all of our production deploy setups. Incase you want to trigger it manually, use the command npm run db:create on ToolJet server.\n\nFeatures​\n\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\nExport table from the ToolJet Database to a JSON file.\nAccessing ToolJet Database​\n\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\n\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\nDatabase Editor​\n\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\nCreate New Table​\n\nFor creating a new table in ToolJet Database, click on the Create New Table button on the top left corner of the Database editor.\n\nWhen the Create New Table button is clicked, a drawer opens up from the right from where you can enter the details of your new table.\n\nFor creating a new table, you'll need to:​\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\nSupported data types​\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\nbigint: bigint is a numeric data type that is used to store whole numbers, that is, numbers without fractional components.\n\nClick on Create button to create a new table.\n\nSearch Table​\n\nYou can enter a search term to search through all tables in the database.\n\nAdd column​\n\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\n\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n\nColumn name: name of the column (key)\nData type: Check available data types here\nDefault Value Any default value for the column (not mandatory)\nDelete column​\n\nTo delete a particular column, just click on the column header and the delete button will appear, click on it to delete the column.\n\nAdd new row​\n\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\nEdit row​\n\nTo edit the rows from the ToolJet database dashboard, click on the Edit row button. A drawer will open from the right from where first you need to select the id of the row to be edited from the dropdown and then you can edit the cell values of the selected row.\n\nBulk upload data​\n\nYou can bulk upload data to the ToolJet database by clicking on the Bulk upload data button on the top of the database editor. On clicking the button, a drawer will open from the right from where you can upload a CSV file. This file is used to upsert records onto the table. If data for id column is missing it will insert new record with the row data else if id is present it will update the corresponding record with the corresponding row data.\n\nFrom the drawer, users can download the template CSV file in which they can enter the data to be uploaded to the ToolJet database's table or format their CSV file in the same way as the template file.\n\nOnce the CSV file is ready, click on the file picker to select the file or drag and drop the file in the file picker. Now, click on the Upload data button to upload the data to the ToolJet database.\n\nRequirements:\n\nThe data types of columns in the CSV file should match those in the ToolJet database table.\nThe id column with a serial data type should not contain duplicate values.\n\nLimitations:\n\nThere is a limit of 1000 rows per CSV file that can be uploaded to the ToolJet database.\nThe CSV file should not exceed 2MB in size.\nDelete records​\n\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\nFilter​\n\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\n\nAdding a filter on the table data​\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\nAvailable operations are:​\nequals: This operation is used to check if the value of the column is equal to the value entered in the input field.\ngreater than: This operation is used to check if the value of the column is greater than the value entered in the input field.\ngreater than or equal: This operation is used to check if the value of the column is greater than or equal to the value entered in the input field.\nless than: This operation is used to check if the value of the column is less than the value entered in the input field.\nless than or equal: This operation is used to check if the value of the column is less than or equal to the value entered in the input field.\nnot equal: This operation is used to check if the value of the column is not equal to the value entered in the input field.\nlike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nilike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. ex: ToolJet will match tooljet\nmatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nimatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nin: This operation is used to check if the value of the column is in the list of values entered in the input field. ex: 1,2,3\ncontains: This operation is used to check if the value of the column contains the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\ncontained: This operation is used to check if the value of the column is contained in the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nnot: This operation is used to negate the result of the operation selected in the dropdown. ex: not equals will return all the records where the value of the column is not equal to the value entered in the input field.\nSort​\n\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\nEdit table​\n\nTo edit the table name, click on the three vertical dots icon on the right of the table name and then click on the Edit option. A drawer will open from the right from where you can edit the table name.\n\nExport table​\n\nThe export table option allows you to download the selected table schema in a JSON file. This does not export the table data.\n\nWhile exporting the app, you can choose to export the app with or without table schema connected to the app.\n\nTo export the table schema, click on the three vertical dots icon on the right of the table name and then click on the Export option. A JSON file will be downloaded with the table schema.\n\nDelete table​\n\nTo delete a table, click on the three vertical dots icon on the right of the table name and then click on the Delete option. A confirmation modal will appear, click on the Delete button to delete the table.\n\nQuerying data from the ToolJet database​\n\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\nGo to the query panel, and click on the +Add button to add a new query, and select ToolJet Database\n\nSelect the table that you want to query from the dropdown, choose an operation from the dropdown, and then enter the required parameters for the selected operation. Click on the Run button to execute the query.\n\nINFO\nPreview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed as JSON or Raw.\nWhen a new query is created, by default the query name is set to tooljetdbN (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\nAvailable operations​\nList rows​\n\nThis operation returns all the records from the table\n\nOptional parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records.\nSort: Sort the query response by choosing a column and the order (ascending or descending).\nLimit: Limit the number of records to be returned by entering a number.\nCreate row​\n\nThis operation creates a new record in the table. You can create a single record or multiple records at once.\n\nRequired parameters​\nColumns: Choose the columns for which you want to add values for the new record and enter the values for the selected columns. You can also add a new column by clicking on the +Add column button.\nUpdate row​\n\nThis operation updates a record in the table. You can update a single record or multiple records at once.\n\nRequired parameter​\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\nColumns: Choose the columns for which you want to update the values for the selected record and enter the values for the selected columns.\nDelete row​\n\nThis operation deletes a record in the table. You can delete a single record or multiple records at once.\n\nRequired parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\nLimit: Limit the number of records to be deleted by entering a number.\nJoin tables​\n\nYou can join two or more tables in the ToolJet database by using the Join operation.\n\nRequired parameters​\n\nFrom: In the From section, there are the following parameters:\n\nSelected Table: Select the table from which you want to join the other table.\nType of Join: Select the type of join you want to perform. The available options are: Inner Join, Left Join, RIght Join, and Full Outer Join.\nJoining Table: Select the table that you want to join with the selected table.\nOn: Select the column from the selected table and the joining table on which you want to join the tables. Currently, only = operation is supported for joining tables.\nAND or OR condition: You can add multiple conditions by clicking on the +Add more button below each join. The conditions can be joined by AND or OR operation.\n\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records. The operations supported are same as the filter operations for the List rows operation.\n\nSort: Sort the query response by choosing a column and the order (ascending or descending).\n\nLimit: Limit the number of records to be returned by entering a number.\n\nOffset: Offset the number of records to be returned by entering a number. This parameter is used for pagination.\n\nSelect: Select the columns that you want to return in the query response. By default, all the columns are selected.\n\nINFO\n\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community\n\nEdit this page\nPrevious\nV2 migration guide\nNext\nCopilot\nEnabling the ToolJet Database for your instance\nPostgREST server\nFeatures\nAccessing ToolJet Database\nDatabase Editor\nCreate New Table\nSearch Table\nAdd column\nDelete column\nAdd new row\nEdit row\nBulk upload data\nDelete records\nFilter\nSort\nEdit table\nExport table\nDelete table\nQuerying data from the ToolJet database\nAvailable operations\nList rows\nCreate row\nUpdate row\nDelete row\nJoin tables"
  },
  {
    "title": "Copilot | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/tooljet-copilot/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nCopilot\nVersion: 2.25.0\nCopilot\nAvailable on: Paid plans\nBETA\n\nToolJet Copilot is currently in private beta for Business and Enterprise users only.\n\nToolJet Copilot helps you write your queries faster. It uses OpenAI to suggest queries based on your data.\n\nActivating Copilot​\n\nTo gain access to Copilot, all users, including administrators, can individually sign up for the waitlist program. Upon successful sign up, each user will be issued a distinctive API key linked to their account. However, the exclusive authority to activate Copilot within the workspace settings lies solely with administrators. Administrators can proceed to the Copilot section in the workspace settings, where they can utilize their respective API key to set the \"Enable Copilot\" toggle option.\n\nYou can join the waitlist here: https://tooljet.com/copilot\n\nINFO\nCopilot can be used by users who have permissions to edit the app with the copilot setup.\nUsing Copilot​\n\nOnce activated, the Copilot feature can be accessed while editing any query within the transformations section in the query editor.\n\nCopilot's functionality relies on the provision of clear and concise plain English prompts. It possesses the capability to interact with and retrieve information from various components, enabling it to generate code specific to the desired actions associated with those components. This capability is facilitated by Copilot's comprehensive understanding of the application's present state.\n\nToken Limit per Workspace​\n\nA token is a unit of text that language models like ChatGPT process, such as a word or a character. To ensure fair usage and resource allocation among workspaces, a token limit is implemented. Currently, the token limit is set to 400. If the token limit is surpassed, the request is declined with the message \"Unable to process request. Max tokens exceeded.\"\n\nRate-Limiting​\n\nTo prevent abuse or excessive usage of the Copilot API, rate-limiting measures are in place. The following rules apply:\n\nEach user is restricted to a maximum number of requests within a specific time frame.\nThe current rate limit allows for 100 requests per minute per user.\nIf a user surpasses the rate limit, subsequent requests from that user will be rejected.\nINFO\n\nWhen generating an API key, if a workspace has 5 editors, the daily request limit will be 500 (100 requests per editor). Even if the workspace later expands to 10 editors after a week, the maximum number of requests allowed per day will still be 500.\n\nExample: Generating a SQL statement​\n\nThis example demonstrates the usage of copilot by generating a SQL query to fetch the order details from a PostgreSQL database based on the key provided in the REST API data.\n\nCreate a RESTAPI query using this mock api endpoint: https://fakestoreapi.com/users/1\nEnable transformation on the query editor\n\nTo generate a SQL query using Copilot, first enter the desired prompt within comments in the transformations code editor. Once the prompt has been entered, simply click the Generate Code button, and Copilot will generate the corresponding SQL query.\n\nAssuming that a PostgreSQL data source is already connected and there are two tables in it, namely customer and orders, enter the provided prompt in the code editor:\n\n/*\nAssume the data is an object which has email key.\nassume we have a database with two tables: \"customer\" and \"orders.\" The \"customer\" table has columns such as \"customer_id,\" \"customer_name,\" and \"country.\" The \"orders\" table has columns such as \"order_id,\" \"customer_id,\" \"order_date,\" and \"total_amount.\"\nreturn a SQL query to retrieve the total order amounts for customers from the email key retrieved from the data, who have placed more than three orders.*/\n\n\nClick on the \"Generate Code\" button to generate the SQL query.\n\nOnce the code is generated, add a return statement below the code to return the generated SQL query. The variable name for the query might be different in your generated code.\n\nreturn query //the variable might be different in your generated code\n\n\nPreview the returned SQL statement in the preview block to check if it is correct. Then click on the \"Run\" button to trigger the query.\n\nOnce the query is executed, create a new PostgreSQL query in SQL mode and use JavaScript to get the data query data dynamically:\n\n{{queries.restapi1.data}}\n\nCAUTION\n\nWhile using ToolJet Copilot, it is important to note that the accuracy of the output cannot be guaranteed by the platform. Ultimately, it is your responsibility to assess and evaluate any query before executing it.\n\nIf you have feedback or questions about ToolJet Copilot, feel free to join our slack community.\n\nEdit this page\nPrevious\nToolJet Database\nNext\nOverview\nActivating Copilot\nUsing Copilot\nToken Limit per Workspace\nRate-Limiting\nExample: Generating a SQL statement"
  },
  {
    "title": "Quickstart Guide | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/getting-started/quickstart-guide/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting StartedQuickstart Guide\nVersion: 2.25.0\nQuickstart Guide\n\nThis Quickstart Guide will show you how to create an employee directory application in minutes using ToolJet. This app will let you track and update employee information with a beautiful user interface. Here are the step-by-step instructions:\n\n1. Create Your First Application\n2. Create Employee Database\n3. Integrate Data\n4. List Employees\n5. Add New Employee\n6. Preview, Release And Share\n\n\n1. Create Your First Application​\n\nOnce you have created an account with ToolJet, go to the dashboard and click on the Create new app button. Name your application as \"Employee Directory\". You are ready to design your application now.\n\nClick and drag a Table component to the canvas.\n\nOptionally, you can style the Table by adjusting its styling properties and create a header by placing Text components over a Container component and styling them.\n\n2. Create Employee Database​\n\nNow, create a new table in ToolJet’s Database to store employee records. Name the table employees and add the following columns: firstname, lastname, email, phone, department, position, joining, and status. Also, add a few employee records in the table.\n\n3. Integrate Data​\n\nTo display employees in the application, we first need to fetch data from the database using a query:\n\nClick on the Add button in the Query Panel, select ToolJet Database\nRename the query to getEmployees\nChoose employees as Table name, List rows as Operations\nToggle Run this query on application load? to automatically run the query when the app starts\nClick on Run to fetch data\n\nClick on the Preview button to see a preview of the fetched data.\n\n4. List Employees​\n\nNow, we need to bind the data returned by the getEmployees query above with the Table created in Step 1. Click on the Table component to open its configuration panel on the right. Under the Data property, paste the below code:\n\n{{queries.getEmployees.data}}\n\n\nNow the Table component is filled with the data returned by the getEmployees query.\n\n5. Add New Employee​\n\nNext step is to create a way to add data for new employees.\n\nClick on Add in the query panel, select ToolJet Database\nSelect employees as Table name, Create row as Operations\nRename the query to addEmployee\nClick Add Column to add required columns\nEnter code below for email and firstname column keys:\n{{components.table1.newRows[0].email}}\n{{components.table1.newRows[0].firstname}}\n...\n\n\nFrame all the remaining keys in the same format.\n\nLet's continue working on this query. The data needs to reload once this query runs since we want the Table component to be populated with the updated data. Follow the below steps to run the getEmployees query after the addEmployee query is completed.\n\nScroll down and click on New event handler\nSelect Query Success as Event and Run Query as Action\nSelect getEmployees as Query\n\nWe are now ready with a query that will allow us to add new employee data. Let's link this query to a button.\n\nIn the bottom-right corner of the Table component, there is a +/Add new row button. Follow the below steps to run the addEmployee query on click of the +/Add new row button:\n\nClick on the Table component, go to Events in configuration panel and add a New event handler\nChoose Add new rows as Event, Run Query as Action\nSelect addEmployee as the Query\n\nNow if you click on the +/Add new row button, enter the employee data and click on Save. The addEmployee query will run and the data will be written to the employees table in the ToolJet Database.\n\n6. Preview, Release And Share​\n\nThe preview, release and share buttons are on the top-right of the App-Builder.\n\nClick on the Preview on the top-right of app builder to review how your application is coming along while development.\nOnce the development is done and you are ready to use the application, click on Release button to deploy the app.\nFinally, share your application with your end users using Share button\n\nCongratulations! You've successfully built an employee directory application and, in the process, covered the fundamentals of ToolJet.\n\nTo learn more about how ToolJet works, explore the subjects covered in ToolJet Concepts.\n\nEdit this page\nPrevious\nPlatform Overview\nNext\nWhat Are Components?\n1. Create Your First Application\n2. Create Employee Database\n3. Integrate Data\n4. List Employees\n5. Add New Employee\n6. Preview, Release And Share"
  },
  {
    "title": "Setup ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/setup/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nSetup\nVersion: 2.25.0\nSetup ToolJet\n\nCheck out the different methods you can use to deploy ToolJet on your machine\n\nTry ToolJet\n\nTry out ToolJet with single docker command\n\nDigitalOcean\n\nQuickly deploy ToolJet using the Deploy to DigitalOcean button\n\nDocker\n\nDeploy ToolJet on a server using docker-compose\n\nAWS EC2\n\nDeploy ToolJet on AWS EC2 instances\n\nAWS ECS\n\nDeploy ToolJet on AWS ECS instances\n\nOpenshift\n\nDeploy ToolJet on Openshift\n\nHelm\n\nDeploy ToolJet with Helm Chart\n\nKubernetes\n\nDeploy ToolJet on a Kubernetes cluster\n\nKubernetes (GKE)\n\nDeploy ToolJet on a GKE Kubernetes cluster\n\nKubernetes (AKS)\n\nDeploy ToolJet on a AKS Kubernetes cluster\n\nAzure container apps\n\nDeploy ToolJet on a Azure Container Apps\n\nGoogle Cloud Run\n\nDeploy ToolJet on Cloud Run with GCloud CLI\n\nDeploying ToolJet client\n\nDeploy ToolJet Client on static website hosting services\n\nEnvironment variables\n\nEnvironment variables required by ToolJet Client and Server to start running\n\nConnecting via HTTP proxy\n\nEnvironment variables required by ToolJet to connect via HTTP proxy\n\nDeploying ToolJet on a subpath\n\nSteps to deploy ToolJet on a subpath rather than root of domain\n\nV2 migration guide\n\nThings to know before migrating to ToolJet V2\n\nEdit this page\nPrevious\nSecuring Applications Through Permissions\nNext\nTry ToolJet"
  },
  {
    "title": "Tracking | ToolJet",
    "url": "https://docs.tooljet.com/docs/tracking/",
    "html": "Tracking\nVersion: 2.27.0\nTracking\nTIP\n\nToolJet does not store any data fetched from the data sources. ToolJet acts as a proxy and the data from data sources is sent to the client application without storing.\n\nServer​\nTIP\n\nSelf-hosted version of ToolJet pings our server to fetch the latest product updates every 24 hours. You can disable this by setting the value of CHECK_FOR_UPDATES environment variable to 0. This feature is enabled by default.\n\nClient​\n\nToolJet tracks anonymous usage data such as page loads and clicks. ToolJet tracks only the events and doesn't capture data from data sources.\n\nTracking can be disabled by setting the value environment variable ENABLE_TRACKING to 0.\n\nEdit this page\nPrevious\nSecurity\nServer\nClient"
  },
  {
    "title": "Security | ToolJet",
    "url": "https://docs.tooljet.com/docs/security/",
    "html": "Security\nVersion: 2.27.0\nSecurity\nUncompromised Data Security with SOC 2 Compliance​\n\nWith SOC 2 compliance, Tooljet ensures the highest level of data security. The adherence to SOC 2 standards mirrors the rigorous data protection measures in place, covering everything from encryption to robust access controls. It also guarantees a consistent level of service availability and process integrity, instilling confidence in our customers and stakeholders about the safe handling of their sensitive information.\n\nData storage​\n\nToolJet does not store data returned from your data sources. ToolJet server acts as a proxy and passes the data as it is to the ToolJet client. The credentials for the data sources are handled by the server and never exposed to the client. For example, if you are making an API request, the query is run from the server and not from the frontend.\n\nDatasource credentials​\n\nAll the datasource credentials are securely encrypted using aes-256-gcm. The credentials are never exposed to the frontend ( ToolJet client ).\n\nOther security features​\nTLS: If you are using ToolJet cloud, all connections are encrypted using TLS. We also have documentation for setting up TLS for self-hosted installations of ToolJet.\nAudit logs: Audit logs are available on the enterprise edition of ToolJet. Every user action is logged along with the IP addresses and user information.\nRequest logging: All the requests to server are logged. If self-hosted, you can easily extend ToolJet to use your preferred logging service. ToolJet comes with built-in Sentry integration.\nWhitelisted IPs: If you are using ToolJet cloud, you can whitelist our IP address (3.129.198.40) so that your datasources are not exposed to the public.\nBackups: ToolJet cloud is hosted on AWS using EKS with autoscaling and regular backups.\n\nIf you notice a security vulnerability, please let the team know by sending an email to security@tooljet.com.\n\nEdit this page\nPrevious\nSlack Code of Conduct\nNext\nTracking\nUncompromised Data Security with SOC 2 Compliance\nData storage\nDatasource credentials\nOther security features"
  },
  {
    "title": "Slack Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/contributing-guide/slackcoc/",
    "html": "Contributing GuideSlack Code of Conduct\nVersion: 2.27.0\nSlack Code of Conduct\n\nThis code of conduct governs ToolJet's Slack Community events and discussions.\n\nIntroduction​\n\nDiversity and inclusion make our community strong. We encourage participation from the most varied and diverse backgrounds possible and want to be very clear about where we stand.\n\nOur goal is to maintain a safe, helpful and friendly community for everyone, regardless of experience, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, nationality, or other defining characteristic.\n\nThis code and related procedures apply to unacceptable behavior occurring in all community venues, including behavior outside the scope of community activities — online and in-person— as well as in all one-on-one communications, and anywhere such behavior has the potential to adversely affect the safety and well-being of community members.\n\nExpected behavior​\nBe welcoming.\nBe kind.\nLook out for each other.\nUnacceptable Behavior​\nConduct or speech which might be considered sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory or offensive in nature.\nDo not use unwelcome, suggestive, derogatory or inappropriate nicknames or terms.\nDo not show disrespect towards others. (Jokes, innuendo, dismissive attitudes.)\nIntimidation or harassment (online or in-person).\nDisrespect towards differences of opinion.\nInappropriate attention or contact. Be aware of how your actions affect others. If it makes someone uncomfortable, stop.\nNot understanding the differences between constructive criticism and disparagement.\nSustained disruptions.\nViolence, threats of violence or violent language.\nWhere does the Code of Conduct apply?​\n\nThis Code of Conduct applies to all spaces managed by ToolJet. This includes:\n\nConferences (including social events and peripheral activities)\nUnconferences and sprints\nMeetups, including their discussion boards\nWorkshops\nPresentation materials used in talks or sessions\nSlack\nGitHub\nTwitter hashtag and mentions\nAny forums created by the ToolJet which the community uses for communication.\n\nThe Code of Conduct does not exclusively apply to slack or events on an official agenda. For example, if after a scheduled social event you go to a bar with a group of fellow participants, and someone harasses you there, we would still treat that as a CoC violation. Similarly, harassment in Twitter direct messages related to ToolJet can still be covered under this Code of Conduct.\n\nIn addition, violations of this code outside our spaces may affect a person’s ability to participate in them.\n\nEnforcement​\nUnderstand that speech and actions have consequences, and unacceptable behavior will not be tolerated.\nIf you are the subject of, or witness to any violations of this Code of Conduct, please contact us via email at hello@tooljet.com or dm @navaneeth on slack.\nIf violations occur, organizers will take any action they deem appropriate for the infraction, up to and including expulsion.\nINFO\n\nPortions derived from the Django Code of Conduct, The Rust Code of Conduct and The Ada Initiative under a Creative Commons Attribution-ShareAlike license.\n\nEtiquettes to follow​\n1. Be nice to everyone​\n2. Check off your resolved questions​\n\nIf you have received a useful reply to your question, please drop a ✅ reaction or a reply for affirmation.\n\n3. Try not to repost question​\n\nIf you have asked a question and have not got a response in 24hrs, please review your question for clarity and revise it. If you still feel you haven't received adequate response, feel free to ping @navaneeth.\n\n4. Post in public​\n\nPlease don't direct message any individual member of ToolJet community without their explicit permission, independent of reason. Your question might be helpful for other community members.\n\n5. Don't spam tags​\n\nToolJet's community of volunteer is very active and helpful, generally avoid tagging members unless it is urgent.\n\n6. Use threads for discussion​\n\nTo keep the main channel area clear, we request to use threads to keep an ongoing conversation organized.\n\nEdit this page\nPrevious\nContributor Code of Conduct\nNext\nSecurity\nIntroduction\nExpected behavior\nUnacceptable Behavior\nWhere does the Code of Conduct apply?\nEnforcement\nEtiquettes to follow"
  },
  {
    "title": "Contributor Code of Conduct | ToolJet",
    "url": "https://docs.tooljet.com/docs/contributing-guide/code-of-conduct/",
    "html": "Contributing GuideContributor Code of Conduct\nVersion: 2.27.0\nContributor Covenant Code of Conduct\nOur Pledge​\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\nOur Standards​\n\nExamples of behavior that contributes to creating a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or advances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nOur Responsibilities​\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nScope​\n\nThis Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\nEnforcement​\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hello@tooljet.com . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\nAttribution​\n\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n\nEdit this page\nPrevious\nRunPy limitations\nNext\nSlack Code of Conduct\nOur Pledge\nOur Standards\nOur Responsibilities\nScope\nEnforcement\nAttribution"
  },
  {
    "title": "Localization | ToolJet",
    "url": "https://docs.tooljet.com/docs/contributing-guide/l10n/",
    "html": "Contributing GuideLocalization\nVersion: 2.27.0\nLocalization\n\nWelcome to ToolJet Localization Guide. The goal of the Localization is to make ToolJet easy to use and close to all countries, languages, and general cultural groups. On this page, you will find instructions on how to contribute to ToolJet through Localization and make a more friendly ToolJet for all regions.\n\nAdding Translations​\n\nFor adding the translations of your language in ToolJet, you'll need to create a new languagecode.json file which will include all the translations for the keywords in your language, and then list the language in the languages.json file for the language to be listed in the dashboard of the ToolJet.\n\nGo to the frontend directory which is at the root of ToolJet, then go to the assets and inside assets, you'll find the translations directory. You have created a new json file with the language code as the file name. The language code should follow ISO 639-1 Code.\n\n\\frontend\n|--\\assets\n|--\\--\\translations\n|--\\--\\--\\languages.json\n|--\\--\\--\\en.json\n\n\nLet's localize ToolJet in the French language. Create a new json file inside the translations directory and name it fr.json. fr is the language code for French.\n\nAfter creating the new file, open the en.json file and copy all the contents of the file to the newly created fr.json.\n\nOnce copied, you can now start adding the translations for the keywords in the french language.\n\nAfter completing the translation, all you need to do is list the language in languages.json file. You'll need to add an object with three key-value pairs. lang - the name of the language that you added, code - the language code, and the nativeLang - name of language in the native.\n\n{\n    \"languageList\":\n    [\n        { \"lang\": \"English\", \"code\": \"en\", \"nativeLang\": \"English\" },\n        { \"lang\": \"French\", \"code\": \"fr\", \"nativeLang\": \"Français\" }\n    ]\n}\n\nNOTE\n\nFeel free to reach us on Slack for any help related to Localization.\n\nEdit this page\nPrevious\nTesting\nNext\nEsLint\nAdding Translations"
  },
  {
    "title": "Testing | ToolJet",
    "url": "https://docs.tooljet.com/docs/contributing-guide/testing/",
    "html": "Contributing GuideTesting\nVersion: 2.27.0\nTesting\n\nFollow the steps below to setup and run the test specifications using Cypress. We recommend setting up ToolJet locally before proceeding.\n\nSetting up​\nNavigate to the cypress-tests directory and enter the following command:\nnpm install\n\nRunning Tests​\nHeaded mode​\n\nTo run cypress in headed mode, run the following command:\n\nnpm run cy:open\n\n\nIn headed mode, the user will be able to choose the test specs from the test runner:\n\nHeadless mode​\n\nTo run cypress in headless mode, run the following command:\n\nnpm run cy:run\n\n\nFor running specific spec in headless mode, run for specific spec\n\nnpm run cy:run --  --spec \"cypress/e2e/dashboard/multi-workspace/manageSSO.cy.js\n\nCAUTION\n\nIf some test specs need the environment variables, the user can pass them similar to the following command:\n\nnpm run cy:open -- --env='{\"pg_host\":\"localhost\",\"pg_user\":\"postgres\", \"pg_password\":\"postgres\"}'\n\n\nor the user can add env-vars in the cypress.config.js file\n\nINFO\n\nCheck all the Cypress commands here\n\nEdit this page\nPrevious\nToolJet CLI\nNext\nLocalization\nSetting up\nRunning Tests"
  },
  {
    "title": "ToolJet CLI | ToolJet",
    "url": "https://docs.tooljet.com/docs/tooljet-cli/",
    "html": "Contributing GuideToolJet CLI\nVersion: 2.27.0\nToolJet CLI\n\nToolJet CLI is a powerful tool that empowers developers to effortlessly create and enhance Marketplace plugins for ToolJet workspace.\n\nINFO\n\nStarting from ToolJet CLI version 0.0.14, the creation of datasource plugins has been deprecated to prioritise marketplace plugins. This change enhances the plugin development experience and aligns with ToolJet's roadmap.\n\nInstallation​\n\nIn order to manage plugins for the ToolJet marketplace, including creating, updating, and deleting, you will need to utilize tooljet-cli. This can be installed via npm by entering the following command:\n\nnpm install -g @tooljet/cli\n\nEnsure the installation was successful​\ntooljet --version\n\nCommands​\nInfo​\n\nThis command returns the information about where tooljet is being run\n\ntooljet info\n\nCreate​\n\nThis command creates a new plugin.\n\ntooljet plugin create PLUGIN_NAME\n\nTIP\n\nRead the detailed guide on creating a marketplace plugin here.\n\nDelete​\n\nThis command deletes a plugin.\n\ntooljet plugin delete PLUGIN_NAME\n\n\nThe CLI will prompt developers to verify if the plugin to be deleted is a marketplace plugin before proceeding with the deletion.\n\nInstall​\n\nInstalls a new npm module inside a tooljet plugin\n\ntooljet plugin install [NPM_MODULE] --plugin <value>\n\nEdit this page\nPrevious\nMarketplace: Creating plugins\nNext\nTesting\nInstallation\nCommands\nInfo\nCreate\nDelete\nInstall"
  },
  {
    "title": "GitSync | ToolJet",
    "url": "https://docs.tooljet.com/docs/gitsync/",
    "html": "GitSync\nVersion: 2.27.0\nGitSync\nAvailable on: Paid plans\n\nThe GitSync feature enables synchronization of workspace applications with a git repository, streamlining application management and version control on ToolJet.\n\nOverview​\n\nToolJet applications can be synchronized with a Git repository, offering the flexibility to tailor your application development and deployment processes across various environments while aligning with best practices for the application development lifecycle.\n\nKey Use-Cases:​\nBackup of Apps​\n\nGitSync provides a straightforward solution for creating backups of your applications. By pushing changes to a Git repository, users can ensure a secure and versioned history of their application. This serves as a reliable backup mechanism, safeguarding against accidental application/version deletion or corruption.\n\nEnvironment Migration​\n\nFacilitating the movement of applications across different ToolJet deployments (e.g., from development to staging to production), GitSync acts as a pivotal tool for environment migration. Users can effortlessly transfer their applications across environments by pushing changes to a Git repository.\n\n\n\nSetting up GitSyncing with GitHub\nSetting up GitSyncing with GitLab\nSetting up GitSyncing with GitHub​\nCAUTION\nToolJet support git repo managers like GitHub, GitLab, Bitbucket, AWS CodeCommit, and Azure Repos.\nOnly Admins have the permission to configure the GitSync feature on workspace level.\nThe default branch name for the git repository should be master.\nStep 1: Create a new repository on GitHub​\n\nCreate a new repository on GitHub. The repository can be public or private. You can also use an existing repository. Make sure that the repository is empty.\n\nStep 2: Obtain the repository URL​\n\nObtain the SSH URL of the repository. When a repository is created, GitHub shows a screen with the repository URL. If the repository is already created, you can obtain the URL by clicking on the Clone or download button.\n\nStep 3: Configure the GitSync feature on ToolJet​\n\nGo to the Workspace settings, and click on the Configure git tab.\n\n\n\n\nEnter the SSH URL of the repository (obtained in Step 2) in the Git repository URL field. Click on the Generate SSH key button, and copy the SSH key that is generated. The SSH key is used to authenticate ToolJet with the repository.\n\nStep 4: Deploy the SSH key to GitHub repository​\n\nGo to the Settings tab of the GitHub repository that you created in Step 1, and click on the Deploy keys tab. Click on the Add deploy key button.\n\nEnter a title for the SSH key in the Title field. Paste the SSH key that you copied in Step 3 in the Key field. Make sure that the Allow write access checkbox is checked, especially when configuring the GitSync feature to push changes to Git. However, it is not mandatory to check this option when setting up the GitSync feature for pulling changes from Git. Finally, click on the Add key button.\n\nStep 5: Finish the GitSync configuration on ToolJet​\n\nGo back to the Configure git tab on ToolJet, and click on the Finalize setup button. If the SSH key is configured correctly, you will see a success message.\n\nEnable/Disable GitSync​\n\nTo enable or disable the GitSync feature, go to the Configure git tab on the Workspace settings page, and toggle on/off the Connect switch. This is only available if the GitSync feature is configured.\n\nWhen enabled\n\nOn clicking the GitSync button, the users will be able to commit changes to the git repository.\n\nWhen disabled\n\nFor non-admin users: The users will not be able to commit changes to the git repository. They will see a dialogue box that the GitSync feature is not configured and they need to contact the admin to configure it.\nFor admin users: The users will see a dialogue box with a link to configure the GitSync feature.\nDelete GitSync configuration​\n\nTo delete the GitSync configuration, go to the Configure git tab on the Workspace settings page, and click on the Delete configuration button. This will delete the SSH key from the ToolJet configuration and the GitSync feature will be disabled.\n\nNote:\n\nDeleting the GitSync configuration will not delete the apps from the git repository. The apps will still be available in the git repository in the same state as they were before the GitSync configuration was deleted.\nGit repo​\n\nOnce the initial commit is made, you can see the app files in the git repository. The repository will have the individual app folders and a .meta folder. The app folders will be named as the app name and will have the respective JSON file of the application. The .meta folder will have the meta.json file that contains the meta information of each application synced to git repo.\n\nThe meta.json file holds information about apps such as the App name, last commit message, last commit user, last commit date, version name, and version id.\n\nPushing changes to git repo​\n\nOnce the GitSync feature is configured, you can start pushing changes to the git repository.\n\nApp creation​\n\nWhen you create a new app, you will see an option to select the Commit changes. If you select the commit changes option, the changes will be committed to the git repository.\n\nINFO\n\nIf the app name is same as the name of the existing app in the git repo, it will overwrite the existing app in the git repo.\n\n\n\n\nSelecting the Commit changes option will create a new commit in the git repository. The commit message will be App creation and the author will be the user who created the app.\n\nApp rename​\n\nWhenever an app is renamed, the changes will be automatically committed to the git repository. The commit message will be App is renamed and the author will be the user who renamed the app.\n\nApp updates​\n\nWhenever a user makes a change in an app, they can make a commit to the git repository by clicking on the GitSync button on the topbar. On clicking the GitSync button, a modal will open with the option to enter the commit message. The user can enter the commit message and click on the Commit changes button to commit the changes to the git repository. Along with the commit message, the user can also see the connnected Git repo URL and the last commit details.\n\nLast commit details helps the user to know the last commit message, author, date, and time. This helps the user to know the last commit details and make the commit message accordingly.\n\n\n\n\nOnce the changes are committed, the user can see the commit message, author, and date in the git repository.\n\nApp deletion​\n\nWhenever a user deleted an app from the workspace, the app will not be deleted from the git repository. The app will be available in the git repository in the same state as it was before the app was deleted.\n\nApp version update​\n\nWhenever a user creates a new app version and creates a commit to git repository, the JSON file in the app folder will be replaced with the new version of the app that was created. The meta.json file in the .meta folder will also be updated with the new version id and version name.\n\nPulling changes from git repo​\n\nYou can configure the GitSync feature on another workspace to pull the changes from the git repository. To configure the GitSync feature on another workspace, follow the steps mentioned in the Setting up GitSyncing with GitHub section.\n\nOnce the GitSync feature is configured, go to the ToolJet dashboard and click on the three dots on the right side of the Create new app button. Click on the Import from git repository option.\n\n\n\n\nOn clicking the Import from git repository option, a modal will open with the dropdown to select the app to be imported from the git repository. Once the app is selected, the app name and the last commit will be displayed. Click on the Import app button to import the app from the git repository.\n\nCAUTION\nThe app imported from the git repository cannot be edited.\nThe app imported from the Git repository should have a unique name. If the app's name is the same as that of an existing app in the workspace, the user will need to either rename the existing app or delete it to successfully import another app with the same name.\nWorkspace constants are not synced with the git repository. After pulling the app, if the app throws an error, the user will need to manually add the workspace constants.\nChecking for updates​\n\nYou can check for updates in the git repository by clicking on the GitSync button on the topbar. On clicking the GitSync button, a modal will open with the option to Check for updates. Click on the Check for updates button to check for updates in the git repository. If there are any updates, you will see the details of the updates such as commit message, author, and the date in the modal. Click on the Pull changes button to pull the changes from the git repository.\n\nEdit this page\nPrevious\nVersioning and Release\nNext\nMarketplace : Overview\nOverview\nKey Use-Cases:\nSetting up GitSyncing with GitHub\nStep 1: Create a new repository on GitHub\nStep 2: Obtain the repository URL\nStep 3: Configure the GitSync feature on ToolJet\nStep 4: Deploy the SSH key to GitHub repository\nStep 5: Finish the GitSync configuration on ToolJet\nEnable/Disable GitSync\nDelete GitSync configuration\nGit repo\nPushing changes to git repo\nApp creation\nApp rename\nApp updates\nApp deletion\nApp version update\nPulling changes from git repo\nChecking for updates\nSetting up GitSyncing with GitLab\nStep 1: Create a new repository\nStep 2: Obtain the repository URL\nStep 3: Configure the GitSync feature on ToolJet\nStep 4: Deploy the SSH key to GitLab repository\nStep 5: Finish the GitSync configuration on ToolJet\nEnable/Disable GitSync\nDelete GitSync configuration\nGit repo\nPushing changes to git repo\nApp creation\nApp rename\nApp updates\nApp deletion\nApp version update\nPulling changes from git repo\nChecking for updates"
  },
  {
    "title": "Dashboard | ToolJet",
    "url": "https://docs.tooljet.com/docs/dashboard/",
    "html": "Dashboard\nVersion: 2.27.0\nDashboard\n\nThe ToolJet Dashboard is the initial landing page that you see upon logging into your workspace. This interface serves as a central hub where you can access a variety of features. Primarily, it displays all the applications you've created within ToolJet. Moreover, you have the capability to create new workspaces and applications directly from this dashboard. Additionally, it provides an option to create folders for categorizing and managing applications for easier organization, access control, and workflow management.\n\nFurthermore, the dashboard serves as a gateway to various essential sections, such as Workflows, ToolJet Database, Data Sources, Marketplace, Workspace Settings, Settings, and Audit logs. You can effortlessly navigate to these sections directly from the dashboard.\n\nWorkspace Manager​\n\nThe workspace manager is located on the bottom left corner of the dashboard. Clicking on the workspace manager will open a dropdown menu with a list of all the workspaces you are a part of. You can switch between workspaces by clicking on the workspace name from the dropdown menu.\n\nAdd new workspace​\n\nOn clicking the Add new workspace button, a modal will open where you can enter the name of the workspace, enter the unique workspace slug, and can see the preview of the workspace URL. Click on the + Create Workspace button to create a new workspace.\n\nPreviously, the workspace slug was an automatically generated workspace ID, like this: https://tooljet.com/262750db-b2b8-4abb-9404-8995c2ecb2a0. Now, you can set a custom, unique slug for your workspace which will generate a more accessible or readable URL such as https://tooljet.com/apac-team).\n\nConditions for workspace slug​\n\nThe workspace slug must be unique, contain no special characters except hyphens, no spaces, no capital letters, and cannot be empty.\n\nEdit workspace​\n\nSimilar to the Add new workspace button, clicking on the Edit workspace button will open a modal where you can edit the name of the workspace and the workspace slug. Click on the Save button to update the changes.\n\nCreate a new app​\n\nTo create a new app, click on the Create new app button on the top left corner of the dashboard. Clicking on this button will open a modal where you can enter the name of the app and then click on the + Create app button to create a new app.\n\n\n\n\nThere are three dots on the right side of the Create new app button. Clicking on these dots will open a dropdown menu with two options:\n\nChoose from templates\nImport\nChoose from templates​\n\nThis option will open a modal with a list of pre-built templates. You can choose any template from this list to create a new app.\n\nImport​\n\nThis option will open a file picker to import a JSON file. This JSON file should be the app exported from ToolJet.\n\nImporting app connected to marketplace plugins​\n\nWhen importing an app with marketplace plugins, the marketplace plugin should be installed in the tooljet workspace where the app is being imported. If the marketplace plugin is not installed, the app will be imported without the queries for that plugin.\n\nWhen marketplace plugin is installed​\n\nIf marketplace plugin is installed in the tooljet workspace where the app is being imported, the queries connected to the marketplace plugin will be available in the imported application. The queries will be linked to the data source with the same name if it is already present. If the data source is not present, a new data source will be created of that marketplace plugin and linked to the queries.\n\nWhen marketplace plugin is not installed​\n\nIf you have an app with a query linked to a marketplace plugin, and you import that app in a tooljet workspace where the marketplace plugin is not installed as the data source, the queries will be not be available in the imported application.\n\nImporting app connected to tooljet table​\n\nWhen the app(JSON file) that includes the table schema is imported, and the table is not present in the tooljet database of the workspace where the app is being imported, a new table will be created in the tooljet database with the same name as the table in the imported app.\n\nIf the table with the same name is already present in the workspace, the new table will be created with the name <table name>_<unix timestamp>. Example: <tablename>_1627980000.\n\nFolders​\nCreate a new folder​\n\nFolders can be created to organize your apps. To create a new folder, click on the + button on the left drawer of the dashboard. Clicking on this button will open a modal, enter the name of the folder and click on the Create Folder button to create a new folder.\n\nDelete or Edit Folder​\n\nA folder can be deleted or renamed. To delete or rename a folder, click on the kebab menu on the right side of the folder name. Clicking on kebab menu will open a dropdown menu with two options:\n\nEdit folder: This option will open a modal, enter the new name of the folder and click on the Edit button to rename the folder.\nDelete folder: This option will open a confirmation modal to delete the folder. Click on the Delete button to delete the folder.\nSearch folders​\n\nFolders can be searched by clicking on the search icon on the left drawer of the dashboard. Clicking on the search icon will open a search bar, enter the name of the folder to search.\n\nSlug for folders​\n\nThe folder's URL slug is generated automatically from its name, providing direct access to the folder using the slug.\n\nTo get the URL of a specific folder, the user will have to select that folder and then copy the URL from the address bar of the browser. The copied URL can be used to share with other users of the workspace.\n\nExample: If the name of the folder is customer support, The folder can be accessed directly from the URL https://tooljet.com/<workspace-name>?folder=customer%20support.\n\nApp cards​\n\nThe dashboard displays all the apps created in the workspace as cards. These cards are displayed in a grid layout. The app cards display the name of the app, the name of the creator, and the date of creation. The app cards also display the app icon, which can be changed by clicking on the Change Icon option from the app menu.\n\nApp menu​\n\nThe app menu is located on the top right corner of the app card. Clicking on the app menu will open a dropdown menu with a list of options. These options are:\n\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nChange Icon​\n\nThis option will open a modal with a list of icons. You can choose any icon from this list to change the app icon.\n\nAdd to folder​\n\nThis option will open a modal with a list of folders. You can choose any folder from this list to add the app to the folder.\n\nClone app​\n\nSelecting this option will immediately open the cloned app in the app builder with the same configuration as the original app. The new app will be named as <original app name> followed by unix timestamp. Example: <original app name> 1627980000.\n\nExport app​\n\nThis option will download a JSON file of the application. This JSON file can be imported to ToolJet to create a new app. The exported app will include all the queries connected to global data sources including the data source created from Marketplace plugins.\n\nThis option allows you to select a specific version of the app to export or export all the versions of the app. To export a specific version of the app, select a version from the list of available versions in the modal and click on the Export selected version and to export all the versions of the app, click on the Export All button.\n\nExport ToolJet table schema​\n\nSelecting this option will include the schema of the tooljet table connected to that application in the exported JSON file. This option is available for all the apps on ToolJet however only the apps with a tooljet table connected(includes tjdb query) will have the schema included in the exported JSON file.\n\nThis JSON file can be used to import the application to ToolJet along with the table schema that was connected to the application.\n\nDelete app​\n\nThis option will open a confirmation modal to delete the app. Click on the Delete button to delete the app.\n\nApp search​\n\nApps can be searched by clicking on the search bar on the center of the dashboard. Click on the search bar and enter the name of the app to search.\n\nCurrent ToolJet Version​\n\nThe current version of ToolJet is displayed on the top right corner of the dashboard.\n\nEdit this page\nPrevious\nControl component (Component Specific Actions)\nNext\nOverview\nWorkspace Manager\nAdd new workspace\nEdit workspace\nCreate a new app\nChoose from templates\nImport\nImporting app connected to marketplace plugins\nImporting app connected to tooljet table\nFolders\nCreate a new folder\nDelete or Edit Folder\nSearch folders\nSlug for folders\nApp cards\nApp menu\nChange Icon\nAdd to folder\nClone app\nExport app\nDelete app\nApp search\nCurrent ToolJet Version"
  },
  {
    "title": "Architecture | ToolJet",
    "url": "https://docs.tooljet.com/docs/contributing-guide/setup/architecture/",
    "html": "Contributing GuideArchitecture\nVersion: 2.27.0\nIntroduction\n\nToolJet has two main components: ToolJet Server and ToolJet Client.\n\n1. ToolJet Server​\n\nToolJet server is a Node.js API application. Server is responsible for authentication, authorization, persisting application definitions, running queries, storing data source credentials securely and more.\n\nDependencies:\n\nPostgreSQL - ToolJet server persists data to a postgres database.\nEmail service (SMTP/Sendgrid/Mailgun/etc) - Required to send user invitations and password reset emails.\nPostgREST (Optional) - Standalone web server that converts PostgreSQL database into queryable RESTful APIs for Tooljet Database.\n2. ToolJet Client​\n\nToolJet client is a ReactJS application. Client is responsible for visually editing the applications, building & editing queries, rendering applications, executing events and their trigger, etc.\n\nRequirements​\nNode version 18.18.2\nnpm version 9.8.1\nEdit this page\nPrevious\nPrint data from multiple tabs\nNext\nGitHub Codespaces\n1. ToolJet Server\n2. ToolJet Client\nRequirements"
  },
  {
    "title": "Copilot | ToolJet",
    "url": "https://docs.tooljet.com/docs/tooljet-copilot/",
    "html": "Copilot\nVersion: 2.27.0\nCopilot\nAvailable on: Paid plans\nBETA\n\nToolJet Copilot is currently in private beta for Business and Enterprise users only.\n\nToolJet Copilot helps you write your queries faster. It uses OpenAI to suggest queries based on your data.\n\nActivating Copilot​\n\nTo gain access to Copilot, all users, including administrators, can individually sign up for the waitlist program. Upon successful sign up, each user will be issued a distinctive API key linked to their account. However, the exclusive authority to activate Copilot within the workspace settings lies solely with administrators. Administrators can proceed to the Copilot section in the workspace settings, where they can utilize their respective API key to set the \"Enable Copilot\" toggle option.\n\nYou can join the waitlist here: https://tooljet.com/copilot\n\nINFO\nCopilot can be used by users who have permissions to edit the app with the copilot setup.\nUsing Copilot​\n\nOnce activated, the Copilot feature can be accessed while editing any query within the transformations section in the query editor.\n\nCopilot's functionality relies on the provision of clear and concise plain English prompts. It possesses the capability to interact with and retrieve information from various components, enabling it to generate code specific to the desired actions associated with those components. This capability is facilitated by Copilot's comprehensive understanding of the application's present state.\n\nToken Limit per Workspace​\n\nA token is a unit of text that language models like ChatGPT process, such as a word or a character. To ensure fair usage and resource allocation among workspaces, a token limit is implemented. Currently, the token limit is set to 400. If the token limit is surpassed, the request is declined with the message \"Unable to process request. Max tokens exceeded.\"\n\nRate-Limiting​\n\nTo prevent abuse or excessive usage of the Copilot API, rate-limiting measures are in place. The following rules apply:\n\nEach user is restricted to a maximum number of requests within a specific time frame.\nThe current rate limit allows for 100 requests per minute per user.\nIf a user surpasses the rate limit, subsequent requests from that user will be rejected.\nINFO\n\nWhen generating an API key, if a workspace has 5 editors, the daily request limit will be 500 (100 requests per editor). Even if the workspace later expands to 10 editors after a week, the maximum number of requests allowed per day will still be 500.\n\nExample: Generating a SQL statement​\n\nThis example demonstrates the usage of copilot by generating a SQL query to fetch the order details from a PostgreSQL database based on the key provided in the REST API data.\n\nCreate a RESTAPI query using this mock api endpoint: https://fakestoreapi.com/users/1\nEnable transformation on the query editor\n\nTo generate a SQL query using Copilot, first enter the desired prompt within comments in the transformations code editor. Once the prompt has been entered, simply click the Generate Code button, and Copilot will generate the corresponding SQL query.\n\nAssuming that a PostgreSQL data source is already connected and there are two tables in it, namely customer and orders, enter the provided prompt in the code editor:\n\n/*\nAssume the data is an object which has email key.\nassume we have a database with two tables: \"customer\" and \"orders.\" The \"customer\" table has columns such as \"customer_id,\" \"customer_name,\" and \"country.\" The \"orders\" table has columns such as \"order_id,\" \"customer_id,\" \"order_date,\" and \"total_amount.\"\nreturn a SQL query to retrieve the total order amounts for customers from the email key retrieved from the data, who have placed more than three orders.*/\n\n\nClick on the \"Generate Code\" button to generate the SQL query.\n\nOnce the code is generated, add a return statement below the code to return the generated SQL query. The variable name for the query might be different in your generated code.\n\nreturn query //the variable might be different in your generated code\n\n\nPreview the returned SQL statement in the preview block to check if it is correct. Then click on the \"Run\" button to trigger the query.\n\nOnce the query is executed, create a new PostgreSQL query in SQL mode and use JavaScript to get the data query data dynamically:\n\n{{queries.restapi1.data}}\n\nCAUTION\n\nWhile using ToolJet Copilot, it is important to note that the accuracy of the output cannot be guaranteed by the platform. Ultimately, it is your responsibility to assess and evaluate any query before executing it.\n\nIf you have feedback or questions about ToolJet Copilot, feel free to join our slack community.\n\nEdit this page\nPrevious\nToolJet Database\nNext\nOverview\nActivating Copilot\nUsing Copilot\nToken Limit per Workspace\nRate-Limiting\nExample: Generating a SQL statement"
  },
  {
    "title": "ToolJet Database | ToolJet",
    "url": "https://docs.tooljet.com/docs/tooljet-database/",
    "html": "ToolJet Database\nVersion: 2.27.0\nToolJet Database\n\nUse the ToolJet-hosted database to build apps faster, and manage your data with ease. ToolJet database require no setup and give you a powerful user interface for managing your data.\n\nEnabling the ToolJet Database for your instance​\n\nRequires:\n\nPostgREST server\nAdditional configuration for ToolJet server\n\nThis feature is only enabled if ENABLE_TOOLJET_DB is set to true.\n\nPostgREST server​\n\nPostgREST is a standalone web server that turns your PostgreSQL database directly into queryable RESTful APIs which is utilized for Tooljet Database. This server only talks with ToolJet server and therefore does not have to be publicly exposed.\n\nTIP\n\nIf you have openssl installed, you can run the following command openssl rand -hex 32 to generate the value for PGRST_JWT_SECRET.\n\nIf this parameter is not specified then PostgREST refuses authentication requests.\n\nvariable\tdescription\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_DB_URI\tdatabase connection string for tooljet database\nPGRST_LOG_LEVEL\tinfo\nINFO\n\nPlease make sure that DB_URI is given in the format postgres://[USERNAME]:[PASSWORD]@[HOST]:[PORT]/[DATABASE]\n\nAdditional ToolJet server configuration​\nvariable\tdescription\nENABLE_TOOLJET_DB\ttrue or false\nTOOLJET_DB\tDefault value is tooljet_db\nTOOLJET_DB_HOST\tdatabase host\nTOOLJET_DB_USER\tdatabase username\nTOOLJET_DB_PASS\tdatabase password\nTOOLJET_DB_PORT\tdatabase port\nPGRST_JWT_SECRET\tJWT token client provided for authentication\nPGRST_HOST\tpostgrest database host\n\nIf you intent to make changes in the above configuration. Please refer PostgREST configuration docs.\n\nTIP\n\nWhen this feature is enabled, the database name provided for TOOLJET_DB will be utilized to create a new database during server boot process in all of our production deploy setups. Incase you want to trigger it manually, use the command npm run db:create on ToolJet server.\n\nFeatures​\n\nToolJet database allows you to:\n\nMaintain tables of data in a secure database that's only accessible within your ToolJet organization.\nEdit, search, filter, sort, and filter data using a spreadsheet-like interface.\nQuickly build applications and write queries to interact with the ToolJet Database, just like any other datasource but without any setup.\nExport table from the ToolJet Database to a JSON file.\nAccessing ToolJet Database​\n\nOnce you log-in to your ToolJet account, from the left sidebar of the dashboard you can navigate to ToolJet Database.\n\nThe ToolJet Database is available on: ToolJet Cloud, Self-Host, and Enterprise Edition. You can view and manage your database and the data it contains using the Database editor UI.\n\nDatabase Editor​\n\nYou can manage the ToolJet Database directly from the Database Editor. ToolJet Database organizes the data into tables that can have different structures. All the tables will be listed lexicographically on the left, click on any of the table to view the table data.\n\nCreate New Table​\n\nFor creating a new table in ToolJet Database, click on the Create New Table button on the top left corner of the Database editor.\n\nWhen the Create New Table button is clicked, a drawer opens up from the right from where you can enter the details of your new table.\n\nFor creating a new table, you'll need to:​\nEnter a Table name\nAdd Columns (Any one column is required to be set as Primary key)\nSupported data types​\nvarchar: varchar data type is used to store characters of indefinite length\nserial: serial is used to generate a sequence of integers which are often used as the Primary key of a table.\nint: It is a numeric data type used to store whole numbers, that is, numbers without fractional components.\nfloat: float is also a numeric data type that is used to store inexact, variable-precision values.\nboolean: boolean data type can hold true, false, and null values.\nbigint: bigint is a numeric data type that is used to store whole numbers, that is, numbers without fractional components.\n\nClick on Create button to create a new table.\n\nSearch Table​\n\nYou can enter a search term to search through all tables in the database.\n\nAdd column​\n\nYou can add a new column to the existing table by clicking on the Add new column button from the top of the database editor.\n\nA drawer from the right will open up from where you can create a new column by entering the values for the new column such as:\n\nColumn name: name of the column (key)\nData type: Check available data types here\nDefault Value Any default value for the column (not mandatory)\nDelete column​\n\nTo delete a particular column, just click on the column header and the delete button will appear, click on it to delete the column.\n\nAdd new row​\n\nTo add a new row to the existing table data, click on the Add new row button. A drawer will open from the right where you can enter the values for the new row.\n\nEdit row​\n\nTo edit the rows from the ToolJet database dashboard, click on the Edit row button. A drawer will open from the right from where first you need to select the id of the row to be edited from the dropdown and then you can edit the cell values of the selected row.\n\nBulk upload data​\n\nYou can bulk upload data to the ToolJet database by clicking on the Bulk upload data button on the top of the database editor. On clicking the button, a drawer will open from the right from where you can upload a CSV file. This file is used to upsert records onto the table. If data for id column is missing it will insert new record with the row data else if id is present it will update the corresponding record with the corresponding row data.\n\nFrom the drawer, users can download the template CSV file in which they can enter the data to be uploaded to the ToolJet database's table or format their CSV file in the same way as the template file.\n\nOnce the CSV file is ready, click on the file picker to select the file or drag and drop the file in the file picker. Now, click on the Upload data button to upload the data to the ToolJet database.\n\nRequirements:\n\nThe data types of columns in the CSV file should match those in the ToolJet database table.\nThe id column with a serial data type should not contain duplicate values.\n\nLimitations:\n\nThere is a limit of 1000 rows per CSV file that can be uploaded to the ToolJet database.\nThe CSV file should not exceed 2MB in size.\nDelete records​\n\nTo delete one or many records/rows, select on the checkbox at the right of the record or records that you want to delete. As soon as you select a single record, the button to delete record will appear on the top, click on the Delete record button to delete the selected records.\n\nFilter​\n\nYou can add as many filter as you want into the table by clicking on the Filter button present on the top of the database editor.\n\nAdding a filter on the table data​\nSelect a column from the Columns dropdown\nChoose an operation\nEnter a value for the selected operation\nAvailable operations are:​\nequals: This operation is used to check if the value of the column is equal to the value entered in the input field.\ngreater than: This operation is used to check if the value of the column is greater than the value entered in the input field.\ngreater than or equal: This operation is used to check if the value of the column is greater than or equal to the value entered in the input field.\nless than: This operation is used to check if the value of the column is less than the value entered in the input field.\nless than or equal: This operation is used to check if the value of the column is less than or equal to the value entered in the input field.\nnot equal: This operation is used to check if the value of the column is not equal to the value entered in the input field.\nlike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nilike: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. ex: ToolJet will match tooljet\nmatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nimatch: This operation is used to check if the value of the column is like the value entered in the input field. This operation is case-insensitive. This operation uses regular expressions. ex: ^ToolJet$ will match ToolJet but not ToolJet Inc.\nin: This operation is used to check if the value of the column is in the list of values entered in the input field. ex: 1,2,3\ncontains: This operation is used to check if the value of the column contains the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\ncontained: This operation is used to check if the value of the column is contained in the value entered in the input field. This operation is case-sensitive. ex: ToolJet will not match tooljet\nnot: This operation is used to negate the result of the operation selected in the dropdown. ex: not equals will return all the records where the value of the column is not equal to the value entered in the input field.\nSort​\n\nTo sort the table data, click on the Sort button on top, select a column from the dropdown, and then choose an order ascending or descending.\n\nEdit table​\n\nTo edit the table name, click on the three vertical dots icon on the right of the table name and then click on the Edit option. A drawer will open from the right from where you can edit the table name.\n\nExport table​\n\nThe export table option allows you to download the selected table schema in a JSON file. This does not export the table data.\n\nWhile exporting the app, you can choose to export the app with or without table schema connected to the app.\n\nTo export the table schema, click on the three vertical dots icon on the right of the table name and then click on the Export option. A JSON file will be downloaded with the table schema.\n\nDelete table​\n\nTo delete a table, click on the three vertical dots icon on the right of the table name and then click on the Delete option. A confirmation modal will appear, click on the Delete button to delete the table.\n\nQuerying data from the ToolJet database​\n\nQuerying ToolJet database is as easy as querying any other datasource on ToolJet.\n\nGo to the query panel, and click on the +Add button to add a new query, and select ToolJet Database\n\nSelect the table that you want to query from the dropdown, choose an operation from the dropdown, and then enter the required parameters for the selected operation. Click on the Run button to execute the query.\n\nINFO\nPreview button on the query panel returns the query response without executing the query. Once clicked, the response will be displayed on the Preview section of the query panel which can be viewed as JSON or Raw.\nWhen a new query is created, by default the query name is set to tooljetdbN (where N is a number) - you can rename the query by click on the query name or from the left sidebar of query panel.\nAvailable operations​\nList rows​\n\nThis operation returns all the records from the table\n\nOptional parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records.\nSort: Sort the query response by choosing a column and the order (ascending or descending).\nLimit: Limit the number of records to be returned by entering a number.\nCreate row​\n\nThis operation creates a new record in the table. You can create a single record or multiple records at once.\n\nRequired parameters​\nColumns: Choose the columns for which you want to add values for the new record and enter the values for the selected columns. You can also add a new column by clicking on the +Add column button.\nUpdate row​\n\nThis operation updates a record in the table. You can update a single record or multiple records at once.\n\nRequired parameter​\nFilter: Add a condition by choosing a column, an operation, and the value for updating a particular record.\nColumns: Choose the columns for which you want to update the values for the selected record and enter the values for the selected columns.\nDelete row​\n\nThis operation deletes a record in the table. You can delete a single record or multiple records at once.\n\nRequired parameters​\nFilter: Add a condition by choosing a column, an operation, and the value for deleting a particular record.\nLimit: Limit the number of records to be deleted by entering a number.\nJoin tables​\n\nYou can join two or more tables in the ToolJet database by using the Join operation.\n\nRequired parameters​\n\nFrom: In the From section, there are the following parameters:\n\nSelected Table: Select the table from which you want to join the other table.\nType of Join: Select the type of join you want to perform. The available options are: Inner Join, Left Join, RIght Join, and Full Outer Join.\nJoining Table: Select the table that you want to join with the selected table.\nOn: Select the column from the selected table and the joining table on which you want to join the tables. Currently, only = operation is supported for joining tables.\nAND or OR condition: You can add multiple conditions by clicking on the +Add more button below each join. The conditions can be joined by AND or OR operation.\n\nFilter: Add a condition by choosing a column, an operation, and the value for filtering the records. The operations supported are same as the filter operations for the List rows operation.\n\nSort: Sort the query response by choosing a column and the order (ascending or descending).\n\nLimit: Limit the number of records to be returned by entering a number.\n\nOffset: Offset the number of records to be returned by entering a number. This parameter is used for pagination.\n\nSelect: Select the columns that you want to return in the query response. By default, all the columns are selected.\n\nINFO\n\nIf you have any other questions or feedback about ToolJet Database, please reach us out at hello@tooljet.com or join our Slack Community\n\nEdit this page\nPrevious\nV2 migration guide\nNext\nCopilot\nEnabling the ToolJet Database for your instance\nPostgREST server\nFeatures\nAccessing ToolJet Database\nDatabase Editor\nCreate New Table\nSearch Table\nAdd column\nDelete column\nAdd new row\nEdit row\nBulk upload data\nDelete records\nFilter\nSort\nEdit table\nExport table\nDelete table\nQuerying data from the ToolJet database\nAvailable operations\nList rows\nCreate row\nUpdate row\nDelete row\nJoin tables"
  },
  {
    "title": "Setup ToolJet | ToolJet",
    "url": "https://docs.tooljet.com/docs/setup/",
    "html": "Setup\nVersion: 2.27.0\nSetup ToolJet\n\nCheck out the different methods you can use to deploy ToolJet on your machine\n\nTry ToolJet\n\nTry out ToolJet with single docker command\n\nDigitalOcean\n\nQuickly deploy ToolJet using the Deploy to DigitalOcean button\n\nDocker\n\nDeploy ToolJet on a server using docker-compose\n\nAWS EC2\n\nDeploy ToolJet on AWS EC2 instances\n\nAWS ECS\n\nDeploy ToolJet on AWS ECS instances\n\nOpenshift\n\nDeploy ToolJet on Openshift\n\nHelm\n\nDeploy ToolJet with Helm Chart\n\nKubernetes\n\nDeploy ToolJet on a Kubernetes cluster\n\nKubernetes (GKE)\n\nDeploy ToolJet on a GKE Kubernetes cluster\n\nKubernetes (AKS)\n\nDeploy ToolJet on a AKS Kubernetes cluster\n\nAzure container apps\n\nDeploy ToolJet on a Azure Container Apps\n\nGoogle Cloud Run\n\nDeploy ToolJet on Cloud Run with GCloud CLI\n\nDeploying ToolJet client\n\nDeploy ToolJet Client on static website hosting services\n\nEnvironment variables\n\nEnvironment variables required by ToolJet Client and Server to start running\n\nConnecting via HTTP proxy\n\nEnvironment variables required by ToolJet to connect via HTTP proxy\n\nDeploying ToolJet on a subpath\n\nSteps to deploy ToolJet on a subpath rather than root of domain\n\nV2 migration guide\n\nThings to know before migrating to ToolJet V2\n\nEdit this page\nPrevious\nSecuring Applications Through Permissions\nNext\nTry ToolJet"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.0.0/",
    "html": "This is documentation for ToolJet 2.0.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.0.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Add Table button, enter Table name and Add columns from the drawer that slides from the right.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Datasource manager on the left-sidebar of the app builder but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel -> Run ToolJetDb Query\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Introduction | ToolJet",
    "url": "https://docs.tooljet.com/docs/1.x.x/",
    "html": "This is documentation for ToolJet 1.x.x, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nIntroduction\nVersion: 1.x.x\nIntroduction\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools. ToolJet can connect to your data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ). Once the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc.\n\nHow ToolJet works​\n\nToolJet has just 3 fundamental principles for building apps:\n\nConnect to data sources: Connect to your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\nBuild queries: ToolJet comes with query builders for all supported data sources. ToolJet also supports the use of custom JavaScript code to transform the query results.\nCustomise widgets: Widgets are the UI components that can be edited using ToolJet's visual app builder ( Eg: tables, charts, forms, etc ). Widgets have events such as on click, on row selected, on page changed, etc. Every UI widget has a dark version.\n\nToolJet binds together the data sources, queries and widgets to convert business logic into custom applications.\n\nGetting Started​\n\nThese resources will help you quickly build and deploy apps using ToolJet:\n\nBasic Tutorial - Learn how to build simple UI and connect to data sources.\nDeploy - Learn how to deploy ToolJet on Heroku, Kubernetes, etc\n\nThe references for data sources and widgets:\n\nDatasource Reference\nWidget Reference\nComplete tutorials​\nBuild a GitHub star history tracker\nBuild an AWS S3 file explorer app\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\nBuild a coupon code manager app\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nHow ToolJet works\nGetting Started\nComplete tutorials\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.1.0/",
    "html": "This is documentation for ToolJet 2.1.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.1.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Add Table button, enter Table name and Add columns from the drawer that slides from the right.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Datasource manager on the left-sidebar of the app builder but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel -> Run ToolJetDb Query\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.2.0/",
    "html": "This is documentation for ToolJet 2.2.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.2.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Add Table button, enter Table name and Add columns from the drawer that slides from the right.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Datasource manager on the left-sidebar of the app builder but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel -> Run ToolJetDb Query\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.3.0/",
    "html": "This is documentation for ToolJet 2.3.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.3.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Add Table button, enter Table name and Add columns from the drawer that slides from the right.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Datasource manager on the left-sidebar of the app builder but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel -> Run ToolJetDb Query\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JS query or Python query to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.4.0/",
    "html": "This is documentation for ToolJet 2.4.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.4.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Add Table button, enter Table name and Add columns from the drawer that slides from the right.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Datasource manager on the left-sidebar of the app builder but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel -> Run ToolJetDb Query\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.6.0/",
    "html": "This is documentation for ToolJet 2.6.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.6.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.5.0/",
    "html": "This is documentation for ToolJet 2.5.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.5.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in both light and dark modes.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on-premises: the recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on your local machine: the fastest way to try out ToolJet on your computer using Docker. :::info\nData security is top priority at ToolJet, read about our data security here. :::\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet applications' user interface is constructed using components such as tables, forms, charts, or buttons, etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.7.0/",
    "html": "This is documentation for ToolJet 2.7.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.7.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.8.0/",
    "html": "This is documentation for ToolJet 2.8.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.8.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.9.0/",
    "html": "This is documentation for ToolJet 2.9.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.9.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, BigQuery, etc. ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc.) and cloud object storage services ( AWS S3, Google Cloud Storage, and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company, and your Customer Support/Operations team needs a Support Tool/Admin panel to manage the orders, update inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.9.4/",
    "html": "This is documentation for ToolJet 2.9.4, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.9.4\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.12.0/",
    "html": "This is documentation for ToolJet 2.12.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.12.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.10.0/",
    "html": "This is documentation for ToolJet 2.10.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.10.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.11.0/",
    "html": "This is documentation for ToolJet 2.11.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.11.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opneded version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.13.0/",
    "html": "This is documentation for ToolJet 2.13.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.13.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.14.0/",
    "html": "This is documentation for ToolJet 2.14.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.14.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.16.0/",
    "html": "This is documentation for ToolJet 2.16.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.16.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.17.0/",
    "html": "This is documentation for ToolJet 2.17.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.17.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nQuickstart Guide​\n\nIn this quickstart guide, we'll cover the fundamentals of ToolJet by building a Time Tracking Application that will allow end-users to record their daily working hours with supporting details.\n\nIf you don't already have a ToolJet account, head over to tooljet.com to sign up for free. Existing users can simply log in.\n\nCreate Database Table​\n\nWe'll first create a table in ToolJet's built-in database.\n\nNavigate to the Database tab from the left sidebar. Click on the Create new table button on the top-left. A dialog box will slide from the right to configure the database table properties.\n\nIn the Table name field, enter timeTracker.\n\nThe id field will be present by default to create a unique identifier for each record in our database table.\n\nClick on the Add more columns button and enter employee in the Name field and select varchar as the Type.\n\nSimilarly, add four more columns:\n\n- Name: taskname | Type: varchar\n\n- Name: duration | Type: integer\n\n- Name: dateoftask | Type: varchar\n\n- Name: description | Type: varchar\n\nClick on the Create button on the bottom right to create the table.\n\n\n\n\nFor every column, you can choose from four data types - varchar for text, integer for numbers, float for decimal or fractional numbers and boolean for true or false values. The Default field allows you to enter a default value that will be used if no value is received from the frontend.\n\nAdd three rows of dummy data by clicking on the Add New Row button and entering the required values. We are entering email IDs for the employee column. Later, we'll use this employee column to display data specific to the logged-in user.\n\nCreate UI For Home Page Using ToolJet App-Builder​\n\nWe'll now go ahead and build the Home page of our application using the ToolJet App-Builder.\n\nClick on the Dashboard button on the sidebar and click on the Create new app button. A new application will be created with an empty canvas.\n\nWe can see the Component Library on the right, we can drag and drop pre-built components from the Component Library on the canvas to create the UI. The Query Panel at the bottom can be used to create and manage queries to interact with the database.\n\nRename the application to Time Tracker. Minimize the Query Panel by clicking on the Hide Query Panel button on its top-left.\n\nClick and drag a Container component to the canvas. Adjust the borders of the Container and expand it till it covers the visible portion of the canvas.\n\nEach time you click and select the Container or any other component on the canvas, configuration related to the component will appear on the right.\n\nEach component will show a different configuration based on its overall functionality.\n\nRight at the top is an input field that lets us name the component. We'll click on it and rename the container to home.\n\nBelow we have the Properties and Styles tab.\n\nProperties tab lets us configure the functional behaviour of a component.\n\nStyle tab allows us to add custom styling to the components.\n\n\n\n\nWe'll give each component in this application a name that reflects its function. This naming strategy will become increasingly beneficial as the application expands and we need to identify specific components.\n\nLet's build the header of our application. Click and drag an Image component to the canvas from the library and rename it to Logo. Select the Image component, you'll see its configuration on the right. Enter the below value as URL:\n\nhttps://static-00.iconduck.com/assets.00/tooljet-icon-1024x908-0mi0u3op.png\n\nFeel free to add any other URL that you might wish to use as the logo.\n\n\n\nPlace a Text component next to it and rename the component to headerText. Paste following value under Text property:\n\nTime Tracker Application⏳\n\n\nUnder Styles, change the Text Size to 25. We are now ready with the Header of the application.\n\nNext we'll use a Table component to display all the time tracker logs. The Table component offers a simple and intuitive way to display and interact with data.\n\nDrag and drop a table component on the canvas. Adjust the width and make it slightly wider than the header. The default name of the table will be table1, rename it to trackerTable. We already have some dummy data in the Table component. We'll replace it with actual data later on.\n\nCreate Your First Query In ToolJet​\n\nIt's time to add some real data to our application.\n\nClick on the Show Query Panel button on the top-left of the Query Panel to expand it. Click on the +Add and select ToolJet Database - a new query will be created. Rename the query to getTrackerSummary. Select timeTracker (the database table that we had created at the start) as the Table name and List Rows as Operations.\n\nEnable Run this query on load? toggle, this will ensure that the query runs every time the application loads. We'll generally use this setting for queries that are used to fetch data. Click on the Run button to run the query.\n\nTo see the preview of the returned data, press on the Preview button in the Query Panel.\n\nAdding Queried Data To The Table​\n\nWe need to use double curly braces {{}} to write custom JavaScript code or access values such as query results, component variables and other variables available in the ToolJet App-Builder.\n\nThe general format to access queries is:\n\n{{queries.queryName.data}}\n\n\nA quick way to look at available queries (and other accessible values) would be to click on the Inspector button in the left side-bar and expand the queries dropdown.\n\nWe can use the queried data in our components. Let's insert the data returned by the getTrackerSummary query in our table. Hide the query panel and click on the Table component. Under the Data property, paste the below code:\n\n{{queries.getTrackerSummary.data}}\n\n\nWe've now replaced the static data with dynamic data that we are fetching from the database. The table now displays data fetched using the getTrackerSummary query.\n\nLet's make some more changes in the Table configuration. Disable all the properties under Search sort and filter and Additional Actions. We don't need them for our use-case.\n\nCreating Form To Submit Data​\n\nThe Modal component can be used to create a pop-up form to submit data.\n\nDrag a Modal component from the components library and place it at the bottom-right of the table - you will notice that only a button with the label Launch Modal shows up on the canvas. We'll first change the name of the button to logTimeButton and Trigger Button label property to Log Time.\n\nTo edit the modal, click on the Log Time button(named Launch Modal earlier) - a modal will open up on your canvas. The modal will stay open till you click on the X button/close button on the top-right. You can edit the modal and place other components over it while it is open. We'll place components on our modal to create a form layout to submit the time tracker details.\n\nLet's change the Title property of the modal to Log Details. Click on the back button/← on the top-left of Modal component's configuration and go back to the components library.\n\nDrag four Text components on the modal and align them vertically. We'll rename the components and their labels according to the table below:\n\nComponent\tComponent Name\tText property\nText\ttaskName\tTask Name\nText\tduration\tDuration (In Hours)\nText\tdateOfTask\tDate Of Task\nText\ttaskDescription\tTask Description\n\nWe are ready with the labels, let's place the input components next to the labels. Drag Text Input, Number Input, Date Picker and Textarea components and arrange them next to the labels. You'll find all the input fields under the Form section of the component library. We'll also add a Submit button below the input fields. Refer to the below table to rename the component name and default values:\n\nComponent\tComponent Name\tDefault Value\nText Input\ttaskNameInput\tDevelopment\nNumber Input\ttaskDurationInput\t1\nDate Picker\ttaskDateInput\t{{moment().format(\"DD/MM/YYYY\")}}\nTextarea\ttaskDescriptionInput\tCreating a modal component\n\nFor the Date Picker field, we are using double curly braces to pass JavaScript code. Using the Moment.js library, we are getting today's date in the dd/mm/yyyy format. ToolJet comes with Moment.js, Lodash and Axios libraries to make it more convenient for you to work with custom JavaScript code.\n\nWe'll close the modal by clicking on the X/close button on the top-right.\n\nCreating Query To Write Data​\n\nWe are ready with the form. Now we need to create a query that will help us add new entries to the timeTracker table in the database. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources.\n\nRename the query to addLog, select Create row as Operations and use the below configuration for the columns. We'll see how we can use custom code and use different keys to access the data available in the app-builder in the below table.\n\nColumn Name\tKeys\nemployee\t{{globals.currentUser.email}}\ntaskname\t{{components.taskNameInput.value}}\nduration\t{{components.taskDurationInput.value}}\ndateoftask\t{{components.taskDateInput.value}}\ntaskdescription\t{{components.taskDescriptionInput.value}}\n\nClick on the Inspector on the left-sidebar to look at the available values under globals and components.\n\nThe currentUser object holds all the values related to logged-in user.\n\nYou can refer to the logged-in user's firstName, lastName, email and groups using the currentUser object.\n\nSimilarly, the components object holds all the values related to the components in our application.\n\nNow every time the addLog query runs, the values present in the referred keys will be written to the database.\n\n\n\n\nLater, we'll plug this query to the Submit button on logTimeModal.\n\nUsing Events​\n\nEvents allow us to run queries and other application functions based on button clicks, query completion and an array of other triggers.\n\nThe addLog query will add data to the the timeTracker table in the database when it runs. But we would want our Table component to be reloaded with the new data every time we add or delete the entries. Since the data in the Table component is coming from the getTrackerSummary query, we'll trigger the getTrackerSummary query after running the addLog query.\n\nClick on the + New Event Handler button in the addLog query - a new event will be added. Click on the event and select Run Query as Action and getTrackerSummary as Query.\n\nNow the getTrackerSummary will run every time the addLog query is successfully executed, the Table component will also get updated with the new data since it displays the data returned by the getTrackerSummary.\n\nIt's time to add the addLog query to the modal and see it in action. Open the modal by clicking on logTimeButton and select the submit button that we've placed inside the modal.\n\nUnder Events configuration of the submit button, click on + Add Handler, leave the Event as On Click, select the Action as Run Query and select addLog as the query.\n\nNow whenever we click on the submit button, the addLog query will run and values present in the input fields will be written to the database.\n\nWe also need to show a prompt to indicate that the data has been added. Click on + Add Handler, leave the Event as On Click, select the Action as Show Alert and enter Log Added as the Message and leave Alert Type as Info.\n\nFinally, we would want our modal to close once we click on Submit and the required query and alert is triggered. Add one more Event, select Close Modal as the action type and logTimeModal as Modal.\n\nNow every time we click on the Submit button on the modal, the addLog query will run, followed by an alert and the modal being closed.\n\nAdding Actions To Tables​\n\nLet's create a way to delete entries from the Table component using Actions.\n\nWe'll first create the required query to perform the action. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources. Rename the query to deleteLog, select Delete rows as Operations.\n\nFor the Filter, select id as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{components.trackerTable.selectedRow.id}}\n\n\nWhen you click on a table row, its values get stored under the selectedRow key. To remove that row from the database, we match selectedRow.id with the database's id field.\n\nWe also need to run the getTrackerSummary query once the deleteLog query is completed to ensure that the Table component gets reloaded with the updated data. Click on the + New Event Handler button in the deleteLog query - a new event will be added. Click on the newly created event, leave Event as Query Success, select Run Query as Action and getTrackerSummary as Query.\n\nNow let's use this query with Actions in the Table component.\n\nGo to the Action Buttons section of the trackerTable properties. Click on + New action button and change Button Text to Delete, Background color to Red(first color in the palette) and Text color to White(last color in the palette.)\n\nClick on + New event handler and leave the Event as On click and select Run Query as the Action. Select deleteLog for the Query dropdown.\n\nNow every time we click on the Delete action button, the deleteLog query will run and delete the related row.\n\nFilter Data Based On The Logged-In User​\n\nIn a typical time-tracking application, we only need to show the data related to the logged-in user. To achieve that, we need to add a filter to our getTrackerSummary query.\n\nOpen the getTrackerSummary query in the Query Panel, click on the + Add Condition button associated with Filter.\n\nFor the Filter, select employee as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{globals.currentUser.email}}\n\n\nAdd some new entries to the Time Tracker. Earlier, we had put some test entries with test@gmail.com as the value for the employee column. Now, those entries will not appear and only the entries you have added with your current email(or logged in account) will appear on the table.\n\nCongratulations! You've successfully built a time tracker application and, in the process, covered the essential fundamentals of ToolJet. Now you're well-equipped to take on more complex projects. Happy building!\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nQuickstart Guide\nCreate Database Table\nCreate UI For Home Page Using ToolJet App-Builder\nCreate Your First Query In ToolJet\nAdding Queried Data To The Table\nCreating Form To Submit Data\nCreating Query To Write Data\nUsing Events\nAdding Actions To Tables\nFilter Data Based On The Logged-In User\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.15.0/",
    "html": "This is documentation for ToolJet 2.15.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.15.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nThe very quick quickstart​\n\nLet's say you're an eCommerce company and your Customer Support/Operations team need a Support Tool/Admin panel for managing the orders, updating inventory, and track revenue and metrics. This quickstart will guide you through building your first custom internal tool in less than 5 minutes.\n\nYou will:\n\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nTIP\n\nBefore getting into the quickstart, Sign up and create your account on ToolJet.\n\nCreate a database​\n\nNavigate to ToolJet DB Editor from the left sidebar on the dashboard\n\nClick on Create New Table button, enter Table name and Add columns from the drawer that slides from the right. Click on Create to add the table.\n\nOnce the table is created, click on the Add new row button to add the data to the table and click Create.\n\nINFO\n\nLearn more about the ToolJet Database here\n\nCreate a new application​\n\nTo create a new ToolJet application, go to the Dashboard -> Create new application.\n\nINFO\n\nYou can also use the existing UI templates for your application or import an application to your workspace.\n\nWhen you click on create new app the App-builder will open up. You can rename your application from untitled to Support Tool from the top left of app-builder.\n\nBuild the UI​\n\nLet's build the UI of the application by dragging and dropping the components on the canvas.\n\nTo build the UI, we will use:\n\nTable for displaying the customers data\nText components for the Title and description of the app as the header\nText Input component for getting product name input from the user\nNumber Input component for getting product quantity and price input from the user\nButton component that will be used to trigger the query for inserting a row in the database using the button's OnClick event handler\nINFO\n\nToolJet application's User interface is constructed using Components like Tables, Forms, Charts, or Buttons etc. Check Components Catalog to learn more.\n\nBuild queries and bind data to UI​\n\nWe can add a new datasource from the Global datasources page from the dashboard but since we are using ToolJet Database we don't need to add any external datasource. Go to the Query Panel and select ToolJet Database\n\nINFO\n\nToolJet can connect to several databases, APIs and external services to fetch and modify data. Check Datasource Catalog to learn more.\n\nChoose a Table from the dropdown, Select the List rows option from the Operation dropdown, You can leave other query parameters. Scroll down and enable Run this query on application load - this will trigger the query when the app is loaded.\n\nClick on Create to create the query and then click Run to trigger the query and get response. You can also check the query response by clicking Preview button without firing the query.\n\nGo to the Table properties by clicking on the component handle and bind the data returned by the query in the Table data property. When building apps in ToolJet anything inside {{}} is JavaScript and we javascript dot notation to get the data from query and populate the table using {{queries.tooljetdb1.data}}. The table will be auto-populated once the table data is entered.\n\nLet's create another query that will get the data from the input fields and will add a new row in the tooljet database. Create New Query -> Select Table (Customers) -> Select Operation (Create row) -> add the following columns with the respective value:\n\nid - {{components.textinput1.value}}\nquantity - {{components.numberinput1.value}}\nprice - {{components.numberinput2.value}}\ncreated_at - {{moment().format(\"DD/MM/YYYY hh:mm A\")}} (We are using momentjs library to get the current date from the system rather than getting input by the user )\nTIP\n\nYou can also add event handler to this query for On Success event to run the tooljetdb1 query that populates the table, so that whenever this is successful the table is refreshed.\n\nNow, let's bind this query to the Add Product button. Click on the button handle to open its properties, Add an handler -> Select Event (On Click) -> Select Action (Run Query) -> Select Query (tooljetdb2).\n\nINFO\nYou can manipulate the data returned by the queries using Transformations\nYou can also Run JavaScript code or Run Python code to perform custom behavior inside ToolJet\nPreview, Release and Share app​\nClick on the Preview on the top-right of app builder to immediately check the currently opened version of the app in production.\nClick on the Release button to publish the currently opened version of the app and push the changes to production.\nShare option allows you to share the released version of the application with other users or you can also make the app public and anyone with the URL will be able to use the app.\nTIP\n\nYou can control how much access to users have to your ToolJet apps and resources using Org Management.\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nThe very quick quickstart\nCreate a database\nCreate a new application\nBuild the UI\nBuild queries and bind data to UI\nPreview, Release and Share app\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.18.0/",
    "html": "This is documentation for ToolJet 2.18.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.18.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nQuickstart Guide​\n\nIn this quickstart guide, we'll cover the fundamentals of ToolJet by building a Time Tracking Application that will allow end-users to record their daily working hours with supporting details.\n\nIf you don't already have a ToolJet account, head over to tooljet.com to sign up for free. Existing users can simply log in.\n\nCreate Database Table​\n\nWe'll first create a table in ToolJet's built-in database.\n\nNavigate to the Database tab from the left sidebar. Click on the Create new table button on the top-left. A dialog box will slide from the right to configure the database table properties.\n\nIn the Table name field, enter timeTracker.\n\nThe id field will be present by default to create a unique identifier for each record in our database table.\n\nClick on the Add more columns button and enter employee in the Name field and select varchar as the Type.\n\nSimilarly, add four more columns:\n\n- Name: taskname | Type: varchar\n\n- Name: duration | Type: integer\n\n- Name: dateoftask | Type: varchar\n\n- Name: description | Type: varchar\n\nClick on the Create button on the bottom right to create the table.\n\n\n\n\nFor every column, you can choose from four data types - varchar for text, integer for numbers, float for decimal or fractional numbers and boolean for true or false values. The Default field allows you to enter a default value that will be used if no value is received from the frontend.\n\nAdd three rows of dummy data by clicking on the Add New Row button and entering the required values. We are entering email IDs for the employee column. Later, we'll use this employee column to display data specific to the logged-in user.\n\nCreate UI For Home Page Using ToolJet App-Builder​\n\nWe'll now go ahead and build the Home page of our application using the ToolJet App-Builder.\n\nClick on the Dashboard button on the sidebar and click on the Create new app button. A new application will be created with an empty canvas.\n\nWe can see the Component Library on the right, we can drag and drop pre-built components from the Component Library on the canvas to create the UI. The Query Panel at the bottom can be used to create and manage queries to interact with the database.\n\nRename the application to Time Tracker. Minimize the Query Panel by clicking on the Hide Query Panel button on its top-left.\n\nClick and drag a Container component to the canvas. Adjust the borders of the Container and expand it till it covers the visible portion of the canvas.\n\nEach time you click and select the Container or any other component on the canvas, configuration related to the component will appear on the right.\n\nEach component will show a different configuration based on its overall functionality.\n\nRight at the top is an input field that lets us name the component. We'll click on it and rename the container to home.\n\nBelow we have the Properties and Styles tab.\n\nProperties tab lets us configure the functional behaviour of a component.\n\nStyle tab allows us to add custom styling to the components.\n\n\n\n\nWe'll give each component in this application a name that reflects its function. This naming strategy will become increasingly beneficial as the application expands and we need to identify specific components.\n\nLet's build the header of our application. Click and drag an Image component to the canvas from the library and rename it to Logo. Select the Image component, you'll see its configuration on the right. Enter the below value as URL:\n\nhttps://static-00.iconduck.com/assets.00/tooljet-icon-1024x908-0mi0u3op.png\n\nFeel free to add any other URL that you might wish to use as the logo.\n\n\n\nPlace a Text component next to it and rename the component to headerText. Paste following value under Text property:\n\nTime Tracker Application⏳\n\n\nUnder Styles, change the Text Size to 25. We are now ready with the Header of the application.\n\nNext we'll use a Table component to display all the time tracker logs. The Table component offers a simple and intuitive way to display and interact with data.\n\nDrag and drop a table component on the canvas. Adjust the width and make it slightly wider than the header. The default name of the table will be table1, rename it to trackerTable. We already have some dummy data in the Table component. We'll replace it with actual data later on.\n\nCreate Your First Query In ToolJet​\n\nIt's time to add some real data to our application.\n\nClick on the Show Query Panel button on the top-left of the Query Panel to expand it. Click on the +Add and select ToolJet Database - a new query will be created. Rename the query to getTrackerSummary. Select timeTracker (the database table that we had created at the start) as the Table name and List Rows as Operations.\n\nEnable Run this query on load? toggle, this will ensure that the query runs every time the application loads. We'll generally use this setting for queries that are used to fetch data. Click on the Run button to run the query.\n\nTo see the preview of the returned data, press on the Preview button in the Query Panel.\n\nAdding Queried Data To The Table​\n\nWe need to use double curly braces {{}} to write custom JavaScript code or access values such as query results, component variables and other variables available in the ToolJet App-Builder.\n\nThe general format to access queries is:\n\n{{queries.queryName.data}}\n\n\nA quick way to look at available queries (and other accessible values) would be to click on the Inspector button in the left side-bar and expand the queries dropdown.\n\nWe can use the queried data in our components. Let's insert the data returned by the getTrackerSummary query in our table. Hide the query panel and click on the Table component. Under the Data property, paste the below code:\n\n{{queries.getTrackerSummary.data}}\n\n\nWe've now replaced the static data with dynamic data that we are fetching from the database. The table now displays data fetched using the getTrackerSummary query.\n\nLet's make some more changes in the Table configuration. Disable all the properties under Search sort and filter and Additional Actions. We don't need them for our use-case.\n\nCreating Form To Submit Data​\n\nThe Modal component can be used to create a pop-up form to submit data.\n\nDrag a Modal component from the components library and place it at the bottom-right of the table - you will notice that only a button with the label Launch Modal shows up on the canvas. We'll first change the name of the button to logTimeButton and Trigger Button label property to Log Time.\n\nTo edit the modal, click on the Log Time button(named Launch Modal earlier) - a modal will open up on your canvas. The modal will stay open till you click on the X button/close button on the top-right. You can edit the modal and place other components over it while it is open. We'll place components on our modal to create a form layout to submit the time tracker details.\n\nLet's change the Title property of the modal to Log Details. Click on the back button/← on the top-left of Modal component's configuration and go back to the components library.\n\nDrag four Text components on the modal and align them vertically. We'll rename the components and their labels according to the table below:\n\nComponent\tComponent Name\tText property\nText\ttaskName\tTask Name\nText\tduration\tDuration (In Hours)\nText\tdateOfTask\tDate Of Task\nText\ttaskDescription\tTask Description\n\nWe are ready with the labels, let's place the input components next to the labels. Drag Text Input, Number Input, Date Picker and Textarea components and arrange them next to the labels. You'll find all the input fields under the Form section of the component library. We'll also add a Submit button below the input fields. Refer to the below table to rename the component name and default values:\n\nComponent\tComponent Name\tDefault Value\nText Input\ttaskNameInput\tDevelopment\nNumber Input\ttaskDurationInput\t1\nDate Picker\ttaskDateInput\t{{moment().format(\"DD/MM/YYYY\")}}\nTextarea\ttaskDescriptionInput\tCreating a modal component\n\nFor the Date Picker field, we are using double curly braces to pass JavaScript code. Using the Moment.js library, we are getting today's date in the dd/mm/yyyy format. ToolJet comes with Moment.js, Lodash and Axios libraries to make it more convenient for you to work with custom JavaScript code.\n\nWe'll close the modal by clicking on the X/close button on the top-right.\n\nCreating Query To Write Data​\n\nWe are ready with the form. Now we need to create a query that will help us add new entries to the timeTracker table in the database. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources.\n\nRename the query to addLog, select Create row as Operations and use the below configuration for the columns. We'll see how we can use custom code and use different keys to access the data available in the app-builder in the below table.\n\nColumn Name\tKeys\nemployee\t{{globals.currentUser.email}}\ntaskname\t{{components.taskNameInput.value}}\nduration\t{{components.taskDurationInput.value}}\ndateoftask\t{{components.taskDateInput.value}}\ntaskdescription\t{{components.taskDescriptionInput.value}}\n\nClick on the Inspector on the left-sidebar to look at the available values under globals and components.\n\nThe currentUser object holds all the values related to logged-in user.\n\nYou can refer to the logged-in user's firstName, lastName, email and groups using the currentUser object.\n\nSimilarly, the components object holds all the values related to the components in our application.\n\nNow every time the addLog query runs, the values present in the referred keys will be written to the database.\n\n\n\n\nLater, we'll plug this query to the Submit button on logTimeModal.\n\nUsing Events​\n\nEvents allow us to run queries and other application functions based on button clicks, query completion and an array of other triggers.\n\nThe addLog query will add data to the the timeTracker table in the database when it runs. But we would want our Table component to be reloaded with the new data every time we add or delete the entries. Since the data in the Table component is coming from the getTrackerSummary query, we'll trigger the getTrackerSummary query after running the addLog query.\n\nClick on the + New Event Handler button in the addLog query - a new event will be added. Click on the event and select Run Query as Action and getTrackerSummary as Query.\n\nNow the getTrackerSummary will run every time the addLog query is successfully executed, the Table component will also get updated with the new data since it displays the data returned by the getTrackerSummary.\n\nIt's time to add the addLog query to the modal and see it in action. Open the modal by clicking on logTimeButton and select the submit button that we've placed inside the modal.\n\nUnder Events configuration of the submit button, click on + Add Handler, leave the Event as On Click, select the Action as Run Query and select addLog as the query.\n\nNow whenever we click on the submit button, the addLog query will run and values present in the input fields will be written to the database.\n\nWe also need to show a prompt to indicate that the data has been added. Click on + Add Handler, leave the Event as On Click, select the Action as Show Alert and enter Log Added as the Message and leave Alert Type as Info.\n\nFinally, we would want our modal to close once we click on Submit and the required query and alert is triggered. Add one more Event, select Close Modal as the action type and logTimeModal as Modal.\n\nNow every time we click on the Submit button on the modal, the addLog query will run, followed by an alert and the modal being closed.\n\nAdding Actions To Tables​\n\nLet's create a way to delete entries from the Table component using Actions.\n\nWe'll first create the required query to perform the action. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources. Rename the query to deleteLog, select Delete rows as Operations.\n\nFor the Filter, select id as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{components.trackerTable.selectedRow.id}}\n\n\nWhen you click on a table row, its values get stored under the selectedRow key. To remove that row from the database, we match selectedRow.id with the database's id field.\n\nWe also need to run the getTrackerSummary query once the deleteLog query is completed to ensure that the Table component gets reloaded with the updated data. Click on the + New Event Handler button in the deleteLog query - a new event will be added. Click on the newly created event, leave Event as Query Success, select Run Query as Action and getTrackerSummary as Query.\n\nNow let's use this query with Actions in the Table component.\n\nGo to the Action Buttons section of the trackerTable properties. Click on + New action button and change Button Text to Delete, Background color to Red(first color in the palette) and Text color to White(last color in the palette.)\n\nClick on + New event handler and leave the Event as On click and select Run Query as the Action. Select deleteLog for the Query dropdown.\n\nNow every time we click on the Delete action button, the deleteLog query will run and delete the related row.\n\nFilter Data Based On The Logged-In User​\n\nIn a typical time-tracking application, we only need to show the data related to the logged-in user. To achieve that, we need to add a filter to our getTrackerSummary query.\n\nOpen the getTrackerSummary query in the Query Panel, click on the + Add Condition button associated with Filter.\n\nFor the Filter, select employee as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{globals.currentUser.email}}\n\n\nAdd some new entries to the Time Tracker. Earlier, we had put some test entries with test@gmail.com as the value for the employee column. Now, those entries will not appear and only the entries you have added with your current email(or logged in account) will appear on the table.\n\nCongratulations! You've successfully built a time tracker application and, in the process, covered the essential fundamentals of ToolJet. Now you're well-equipped to take on more complex projects. Happy building!\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nQuickstart Guide\nCreate Database Table\nCreate UI For Home Page Using ToolJet App-Builder\nCreate Your First Query In ToolJet\nAdding Queried Data To The Table\nCreating Form To Submit Data\nCreating Query To Write Data\nUsing Events\nAdding Actions To Tables\nFilter Data Based On The Logged-In User\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.19.0/",
    "html": "This is documentation for ToolJet 2.19.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.19.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nQuickstart Guide​\n\nIn this quickstart guide, we'll cover the fundamentals of ToolJet by building a Time Tracking Application that will allow end-users to record their daily working hours with supporting details.\n\nIf you don't already have a ToolJet account, head over to tooljet.com to sign up for free. Existing users can simply log in.\n\nCreate Database Table​\n\nWe'll first create a table in ToolJet's built-in database.\n\nNavigate to the Database tab from the left sidebar. Click on the Create new table button on the top-left. A dialog box will slide from the right to configure the database table properties.\n\nIn the Table name field, enter timeTracker.\n\nThe id field will be present by default to create a unique identifier for each record in our database table.\n\nClick on the Add more columns button and enter employee in the Name field and select varchar as the Type.\n\nSimilarly, add four more columns:\n\n- Name: taskname | Type: varchar\n\n- Name: duration | Type: integer\n\n- Name: dateoftask | Type: varchar\n\n- Name: description | Type: varchar\n\nClick on the Create button on the bottom right to create the table.\n\n\n\n\nFor every column, you can choose from four data types - varchar for text, integer for numbers, float for decimal or fractional numbers and boolean for true or false values. The Default field allows you to enter a default value that will be used if no value is received from the frontend.\n\nAdd three rows of dummy data by clicking on the Add New Row button and entering the required values. We are entering email IDs for the employee column. Later, we'll use this employee column to display data specific to the logged-in user.\n\nCreate UI For Home Page Using ToolJet App-Builder​\n\nWe'll now go ahead and build the Home page of our application using the ToolJet App-Builder.\n\nClick on the Dashboard button on the sidebar and click on the Create new app button. A new application will be created with an empty canvas.\n\nWe can see the Component Library on the right, we can drag and drop pre-built components from the Component Library on the canvas to create the UI. The Query Panel at the bottom can be used to create and manage queries to interact with the database.\n\nRename the application to Time Tracker. Minimize the Query Panel by clicking on the Hide Query Panel button on its top-left.\n\nClick and drag a Container component to the canvas. Adjust the borders of the Container and expand it till it covers the visible portion of the canvas.\n\nEach time you click and select the Container or any other component on the canvas, configuration related to the component will appear on the right.\n\nEach component will show a different configuration based on its overall functionality.\n\nRight at the top is an input field that lets us name the component. We'll click on it and rename the container to home.\n\nBelow we have the Properties and Styles tab.\n\nProperties tab lets us configure the functional behaviour of a component.\n\nStyle tab allows us to add custom styling to the components.\n\n\n\n\nWe'll give each component in this application a name that reflects its function. This naming strategy will become increasingly beneficial as the application expands and we need to identify specific components.\n\nLet's build the header of our application. Click and drag an Image component to the canvas from the library and rename it to Logo. Select the Image component, you'll see its configuration on the right. Enter the below value as URL:\n\nhttps://static-00.iconduck.com/assets.00/tooljet-icon-1024x908-0mi0u3op.png\n\nFeel free to add any other URL that you might wish to use as the logo.\n\n\n\nPlace a Text component next to it and rename the component to headerText. Paste following value under Text property:\n\nTime Tracker Application⏳\n\n\nUnder Styles, change the Text Size to 25. We are now ready with the Header of the application.\n\nNext we'll use a Table component to display all the time tracker logs. The Table component offers a simple and intuitive way to display and interact with data.\n\nDrag and drop a table component on the canvas. Adjust the width and make it slightly wider than the header. The default name of the table will be table1, rename it to trackerTable. We already have some dummy data in the Table component. We'll replace it with actual data later on.\n\nCreate Your First Query In ToolJet​\n\nIt's time to add some real data to our application.\n\nClick on the Show Query Panel button on the top-left of the Query Panel to expand it. Click on the +Add and select ToolJet Database - a new query will be created. Rename the query to getTrackerSummary. Select timeTracker (the database table that we had created at the start) as the Table name and List Rows as Operations.\n\nEnable Run this query on load? toggle, this will ensure that the query runs every time the application loads. We'll generally use this setting for queries that are used to fetch data. Click on the Run button to run the query.\n\nTo see the preview of the returned data, press on the Preview button in the Query Panel.\n\nAdding Queried Data To The Table​\n\nWe need to use double curly braces {{}} to write custom JavaScript code or access values such as query results, component variables and other variables available in the ToolJet App-Builder.\n\nThe general format to access queries is:\n\n{{queries.queryName.data}}\n\n\nA quick way to look at available queries (and other accessible values) would be to click on the Inspector button in the left side-bar and expand the queries dropdown.\n\nWe can use the queried data in our components. Let's insert the data returned by the getTrackerSummary query in our table. Hide the query panel and click on the Table component. Under the Data property, paste the below code:\n\n{{queries.getTrackerSummary.data}}\n\n\nWe've now replaced the static data with dynamic data that we are fetching from the database. The table now displays data fetched using the getTrackerSummary query.\n\nLet's make some more changes in the Table configuration. Disable all the properties under Search sort and filter and Additional Actions. We don't need them for our use-case.\n\nCreating Form To Submit Data​\n\nThe Modal component can be used to create a pop-up form to submit data.\n\nDrag a Modal component from the components library and place it at the bottom-right of the table - you will notice that only a button with the label Launch Modal shows up on the canvas. We'll first change the name of the button to logTimeButton and Trigger Button label property to Log Time.\n\nTo edit the modal, click on the Log Time button(named Launch Modal earlier) - a modal will open up on your canvas. The modal will stay open till you click on the X button/close button on the top-right. You can edit the modal and place other components over it while it is open. We'll place components on our modal to create a form layout to submit the time tracker details.\n\nLet's change the Title property of the modal to Log Details. Click on the back button/← on the top-left of Modal component's configuration and go back to the components library.\n\nDrag four Text components on the modal and align them vertically. We'll rename the components and their labels according to the table below:\n\nComponent\tComponent Name\tText property\nText\ttaskName\tTask Name\nText\tduration\tDuration (In Hours)\nText\tdateOfTask\tDate Of Task\nText\ttaskDescription\tTask Description\n\nWe are ready with the labels, let's place the input components next to the labels. Drag Text Input, Number Input, Date Picker and Textarea components and arrange them next to the labels. You'll find all the input fields under the Form section of the component library. We'll also add a Submit button below the input fields. Refer to the below table to rename the component name and default values:\n\nComponent\tComponent Name\tDefault Value\nText Input\ttaskNameInput\tDevelopment\nNumber Input\ttaskDurationInput\t1\nDate Picker\ttaskDateInput\t{{moment().format(\"DD/MM/YYYY\")}}\nTextarea\ttaskDescriptionInput\tCreating a modal component\n\nFor the Date Picker field, we are using double curly braces to pass JavaScript code. Using the Moment.js library, we are getting today's date in the dd/mm/yyyy format. ToolJet comes with Moment.js, Lodash and Axios libraries to make it more convenient for you to work with custom JavaScript code.\n\nWe'll close the modal by clicking on the X/close button on the top-right.\n\nCreating Query To Write Data​\n\nWe are ready with the form. Now we need to create a query that will help us add new entries to the timeTracker table in the database. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources.\n\nRename the query to addLog, select Create row as Operations and use the below configuration for the columns. We'll see how we can use custom code and use different keys to access the data available in the app-builder in the below table.\n\nColumn Name\tKeys\nemployee\t{{globals.currentUser.email}}\ntaskname\t{{components.taskNameInput.value}}\nduration\t{{components.taskDurationInput.value}}\ndateoftask\t{{components.taskDateInput.value}}\ntaskdescription\t{{components.taskDescriptionInput.value}}\n\nClick on the Inspector on the left-sidebar to look at the available values under globals and components.\n\nThe currentUser object holds all the values related to logged-in user.\n\nYou can refer to the logged-in user's firstName, lastName, email and groups using the currentUser object.\n\nSimilarly, the components object holds all the values related to the components in our application.\n\nNow every time the addLog query runs, the values present in the referred keys will be written to the database.\n\n\n\n\nLater, we'll plug this query to the Submit button on logTimeModal.\n\nUsing Events​\n\nEvents allow us to run queries and other application functions based on button clicks, query completion and an array of other triggers.\n\nThe addLog query will add data to the the timeTracker table in the database when it runs. But we would want our Table component to be reloaded with the new data every time we add or delete the entries. Since the data in the Table component is coming from the getTrackerSummary query, we'll trigger the getTrackerSummary query after running the addLog query.\n\nClick on the + New Event Handler button in the addLog query - a new event will be added. Click on the event and select Run Query as Action and getTrackerSummary as Query.\n\nNow the getTrackerSummary will run every time the addLog query is successfully executed, the Table component will also get updated with the new data since it displays the data returned by the getTrackerSummary.\n\nIt's time to add the addLog query to the modal and see it in action. Open the modal by clicking on logTimeButton and select the submit button that we've placed inside the modal.\n\nUnder Events configuration of the submit button, click on + Add Handler, leave the Event as On Click, select the Action as Run Query and select addLog as the query.\n\nNow whenever we click on the submit button, the addLog query will run and values present in the input fields will be written to the database.\n\nWe also need to show a prompt to indicate that the data has been added. Click on + Add Handler, leave the Event as On Click, select the Action as Show Alert and enter Log Added as the Message and leave Alert Type as Info.\n\nFinally, we would want our modal to close once we click on Submit and the required query and alert is triggered. Add one more Event, select Close Modal as the action type and logTimeModal as Modal.\n\nNow every time we click on the Submit button on the modal, the addLog query will run, followed by an alert and the modal being closed.\n\nAdding Actions To Tables​\n\nLet's create a way to delete entries from the Table component using Actions.\n\nWe'll first create the required query to perform the action. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources. Rename the query to deleteLog, select Delete rows as Operations.\n\nFor the Filter, select id as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{components.trackerTable.selectedRow.id}}\n\n\nWhen you click on a table row, its values get stored under the selectedRow key. To remove that row from the database, we match selectedRow.id with the database's id field.\n\nWe also need to run the getTrackerSummary query once the deleteLog query is completed to ensure that the Table component gets reloaded with the updated data. Click on the + New Event Handler button in the deleteLog query - a new event will be added. Click on the newly created event, leave Event as Query Success, select Run Query as Action and getTrackerSummary as Query.\n\nNow let's use this query with Actions in the Table component.\n\nGo to the Action Buttons section of the trackerTable properties. Click on + New action button and change Button Text to Delete, Background color to Red(first color in the palette) and Text color to White(last color in the palette.)\n\nClick on + New event handler and leave the Event as On click and select Run Query as the Action. Select deleteLog for the Query dropdown.\n\nNow every time we click on the Delete action button, the deleteLog query will run and delete the related row.\n\nFilter Data Based On The Logged-In User​\n\nIn a typical time-tracking application, we only need to show the data related to the logged-in user. To achieve that, we need to add a filter to our getTrackerSummary query.\n\nOpen the getTrackerSummary query in the Query Panel, click on the + Add Condition button associated with Filter.\n\nFor the Filter, select employee as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{globals.currentUser.email}}\n\n\nAdd some new entries to the Time Tracker. Earlier, we had put some test entries with test@gmail.com as the value for the employee column. Now, those entries will not appear and only the entries you have added with your current email(or logged in account) will appear on the table.\n\nCongratulations! You've successfully built a time tracker application and, in the process, covered the essential fundamentals of ToolJet. Now you're well-equipped to take on more complex projects. Happy building!\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nQuickstart Guide\nCreate Database Table\nCreate UI For Home Page Using ToolJet App-Builder\nCreate Your First Query In ToolJet\nAdding Queried Data To The Table\nCreating Form To Submit Data\nCreating Query To Write Data\nUsing Events\nAdding Actions To Tables\nFilter Data Based On The Logged-In User\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.22.0/",
    "html": "This is documentation for ToolJet 2.22.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.22.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nQuickstart Guide​\n\nIn this quickstart guide, we'll cover the fundamentals of ToolJet by building a Time Tracking Application that will allow end-users to record their daily working hours with supporting details.\n\nIf you don't already have a ToolJet account, head over to tooljet.com to sign up for free. Existing users can simply log in.\n\nCreate Database Table​\n\nWe'll first create a table in ToolJet's built-in database.\n\nNavigate to the Database tab from the left sidebar. Click on the Create new table button on the top-left. A dialog box will slide from the right to configure the database table properties.\n\nIn the Table name field, enter timeTracker.\n\nThe id field will be present by default to create a unique identifier for each record in our database table.\n\nClick on the Add more columns button and enter employee in the Name field and select varchar as the Type.\n\nSimilarly, add four more columns:\n\n- Name: taskname | Type: varchar\n\n- Name: duration | Type: integer\n\n- Name: dateoftask | Type: varchar\n\n- Name: description | Type: varchar\n\nClick on the Create button on the bottom right to create the table.\n\n\n\n\nFor every column, you can choose from four data types - varchar for text, integer for numbers, float for decimal or fractional numbers and boolean for true or false values. The Default field allows you to enter a default value that will be used if no value is received from the frontend.\n\nAdd three rows of dummy data by clicking on the Add New Row button and entering the required values. We are entering email IDs for the employee column. Later, we'll use this employee column to display data specific to the logged-in user.\n\nCreate UI For Home Page Using ToolJet App-Builder​\n\nWe'll now go ahead and build the Home page of our application using the ToolJet App-Builder.\n\nClick on the Dashboard button on the sidebar and click on the Create new app button. A new application will be created with an empty canvas.\n\nWe can see the Component Library on the right, we can drag and drop pre-built components from the Component Library on the canvas to create the UI. The Query Panel at the bottom can be used to create and manage queries to interact with the database.\n\nRename the application to Time Tracker. Minimize the Query Panel by clicking on the Hide Query Panel button on its top-left.\n\nClick and drag a Container component to the canvas. Adjust the borders of the Container and expand it till it covers the visible portion of the canvas.\n\nEach time you click and select the Container or any other component on the canvas, configuration related to the component will appear on the right.\n\nEach component will show a different configuration based on its overall functionality.\n\nRight at the top is an input field that lets us name the component. We'll click on it and rename the container to home.\n\nBelow we have the Properties and Styles tab.\n\nProperties tab lets us configure the functional behaviour of a component.\n\nStyle tab allows us to add custom styling to the components.\n\n\n\n\nWe'll give each component in this application a name that reflects its function. This naming strategy will become increasingly beneficial as the application expands and we need to identify specific components.\n\nLet's build the header of our application. Click and drag an Image component to the canvas from the library and rename it to Logo. Select the Image component, you'll see its configuration on the right. Enter the below value as URL:\n\nhttps://static-00.iconduck.com/assets.00/tooljet-icon-1024x908-0mi0u3op.png\n\nFeel free to add any other URL that you might wish to use as the logo.\n\n\n\nPlace a Text component next to it and rename the component to headerText. Paste following value under Text property:\n\nTime Tracker Application⏳\n\n\nUnder Styles, change the Text Size to 25. We are now ready with the Header of the application.\n\nNext we'll use a Table component to display all the time tracker logs. The Table component offers a simple and intuitive way to display and interact with data.\n\nDrag and drop a table component on the canvas. Adjust the width and make it slightly wider than the header. The default name of the table will be table1, rename it to trackerTable. We already have some dummy data in the Table component. We'll replace it with actual data later on.\n\nCreate Your First Query In ToolJet​\n\nIt's time to add some real data to our application.\n\nClick on the Show Query Panel button on the top-left of the Query Panel to expand it. Click on the +Add and select ToolJet Database - a new query will be created. Rename the query to getTrackerSummary. Select timeTracker (the database table that we had created at the start) as the Table name and List Rows as Operations.\n\nEnable Run this query on load? toggle, this will ensure that the query runs every time the application loads. We'll generally use this setting for queries that are used to fetch data. Click on the Run button to run the query.\n\nTo see the preview of the returned data, press on the Preview button in the Query Panel.\n\nAdding Queried Data To The Table​\n\nWe need to use double curly braces {{}} to write custom JavaScript code or access values such as query results, component variables and other variables available in the ToolJet App-Builder.\n\nThe general format to access queries is:\n\n{{queries.queryName.data}}\n\n\nA quick way to look at available queries (and other accessible values) would be to click on the Inspector button in the left side-bar and expand the queries dropdown.\n\nWe can use the queried data in our components. Let's insert the data returned by the getTrackerSummary query in our table. Hide the query panel and click on the Table component. Under the Data property, paste the below code:\n\n{{queries.getTrackerSummary.data}}\n\n\nWe've now replaced the static data with dynamic data that we are fetching from the database. The table now displays data fetched using the getTrackerSummary query.\n\nLet's make some more changes in the Table configuration. Disable all the properties under Search sort and filter and Additional Actions. We don't need them for our use-case.\n\nCreating Form To Submit Data​\n\nThe Modal component can be used to create a pop-up form to submit data.\n\nDrag a Modal component from the components library and place it at the bottom-right of the table - you will notice that only a button with the label Launch Modal shows up on the canvas. We'll first change the name of the button to logTimeButton and Trigger Button label property to Log Time.\n\nTo edit the modal, click on the Log Time button(named Launch Modal earlier) - a modal will open up on your canvas. The modal will stay open till you click on the X button/close button on the top-right. You can edit the modal and place other components over it while it is open. We'll place components on our modal to create a form layout to submit the time tracker details.\n\nLet's change the Title property of the modal to Log Details. Click on the back button/← on the top-left of Modal component's configuration and go back to the components library.\n\nDrag four Text components on the modal and align them vertically. We'll rename the components and their labels according to the table below:\n\nComponent\tComponent Name\tText property\nText\ttaskName\tTask Name\nText\tduration\tDuration (In Hours)\nText\tdateOfTask\tDate Of Task\nText\ttaskDescription\tTask Description\n\nWe are ready with the labels, let's place the input components next to the labels. Drag Text Input, Number Input, Date Picker and Textarea components and arrange them next to the labels. You'll find all the input fields under the Form section of the component library. We'll also add a Submit button below the input fields. Refer to the below table to rename the component name and default values:\n\nComponent\tComponent Name\tDefault Value\nText Input\ttaskNameInput\tDevelopment\nNumber Input\ttaskDurationInput\t1\nDate Picker\ttaskDateInput\t{{moment().format(\"DD/MM/YYYY\")}}\nTextarea\ttaskDescriptionInput\tCreating a modal component\n\nFor the Date Picker field, we are using double curly braces to pass JavaScript code. Using the Moment.js library, we are getting today's date in the dd/mm/yyyy format. ToolJet comes with Moment.js, Lodash and Axios libraries to make it more convenient for you to work with custom JavaScript code.\n\nWe'll close the modal by clicking on the X/close button on the top-right.\n\nCreating Query To Write Data​\n\nWe are ready with the form. Now we need to create a query that will help us add new entries to the timeTracker table in the database. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources.\n\nRename the query to addLog, select Create row as Operations and use the below configuration for the columns. We'll see how we can use custom code and use different keys to access the data available in the app-builder in the below table.\n\nColumn Name\tKeys\nemployee\t{{globals.currentUser.email}}\ntaskname\t{{components.taskNameInput.value}}\nduration\t{{components.taskDurationInput.value}}\ndateoftask\t{{components.taskDateInput.value}}\ntaskdescription\t{{components.taskDescriptionInput.value}}\n\nClick on the Inspector on the left-sidebar to look at the available values under globals and components.\n\nThe currentUser object holds all the values related to logged-in user.\n\nYou can refer to the logged-in user's firstName, lastName, email and groups using the currentUser object.\n\nSimilarly, the components object holds all the values related to the components in our application.\n\nNow every time the addLog query runs, the values present in the referred keys will be written to the database.\n\n\n\n\nLater, we'll plug this query to the Submit button on logTimeModal.\n\nUsing Events​\n\nEvents allow us to run queries and other application functions based on button clicks, query completion and an array of other triggers.\n\nThe addLog query will add data to the the timeTracker table in the database when it runs. But we would want our Table component to be reloaded with the new data every time we add or delete the entries. Since the data in the Table component is coming from the getTrackerSummary query, we'll trigger the getTrackerSummary query after running the addLog query.\n\nClick on the + New Event Handler button in the addLog query - a new event will be added. Click on the event and select Run Query as Action and getTrackerSummary as Query.\n\nNow the getTrackerSummary will run every time the addLog query is successfully executed, the Table component will also get updated with the new data since it displays the data returned by the getTrackerSummary.\n\nIt's time to add the addLog query to the modal and see it in action. Open the modal by clicking on logTimeButton and select the submit button that we've placed inside the modal.\n\nUnder Events configuration of the submit button, click on + Add Handler, leave the Event as On Click, select the Action as Run Query and select addLog as the query.\n\nNow whenever we click on the submit button, the addLog query will run and values present in the input fields will be written to the database.\n\nWe also need to show a prompt to indicate that the data has been added. Click on + Add Handler, leave the Event as On Click, select the Action as Show Alert and enter Log Added as the Message and leave Alert Type as Info.\n\nFinally, we would want our modal to close once we click on Submit and the required query and alert is triggered. Add one more Event, select Close Modal as the action type and logTimeModal as Modal.\n\nNow every time we click on the Submit button on the modal, the addLog query will run, followed by an alert and the modal being closed.\n\nAdding Actions To Tables​\n\nLet's create a way to delete entries from the Table component using Actions.\n\nWe'll first create the required query to perform the action. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources. Rename the query to deleteLog, select Delete rows as Operations.\n\nFor the Filter, select id as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{components.trackerTable.selectedRow.id}}\n\n\nWhen you click on a table row, its values get stored under the selectedRow key. To remove that row from the database, we match selectedRow.id with the database's id field.\n\nWe also need to run the getTrackerSummary query once the deleteLog query is completed to ensure that the Table component gets reloaded with the updated data. Click on the + New Event Handler button in the deleteLog query - a new event will be added. Click on the newly created event, leave Event as Query Success, select Run Query as Action and getTrackerSummary as Query.\n\nNow let's use this query with Actions in the Table component.\n\nGo to the Action Buttons section of the trackerTable properties. Click on + New action button and change Button Text to Delete, Background color to Red(first color in the palette) and Text color to White(last color in the palette.)\n\nClick on + New event handler and leave the Event as On click and select Run Query as the Action. Select deleteLog for the Query dropdown.\n\nNow every time we click on the Delete action button, the deleteLog query will run and delete the related row.\n\nFilter Data Based On The Logged-In User​\n\nIn a typical time-tracking application, we only need to show the data related to the logged-in user. To achieve that, we need to add a filter to our getTrackerSummary query.\n\nOpen the getTrackerSummary query in the Query Panel, click on the + Add Condition button associated with Filter.\n\nFor the Filter, select employee as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{globals.currentUser.email}}\n\n\nAdd some new entries to the Time Tracker. Earlier, we had put some test entries with test@gmail.com as the value for the employee column. Now, those entries will not appear and only the entries you have added with your current email(or logged in account) will appear on the table.\n\nCongratulations! You've successfully built a time tracker application and, in the process, covered the essential fundamentals of ToolJet. Now you're well-equipped to take on more complex projects. Happy building!\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nQuickstart Guide\nCreate Database Table\nCreate UI For Home Page Using ToolJet App-Builder\nCreate Your First Query In ToolJet\nAdding Queried Data To The Table\nCreating Form To Submit Data\nCreating Query To Write Data\nUsing Events\nAdding Actions To Tables\nFilter Data Based On The Logged-In User\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.23.0/",
    "html": "This is documentation for ToolJet 2.23.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.23.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nQuickstart Guide​\n\nIn this quickstart guide, we'll cover the fundamentals of ToolJet by building a Time Tracking Application that will allow end-users to record their daily working hours with supporting details.\n\nIf you don't already have a ToolJet account, head over to tooljet.com to sign up for free. Existing users can simply log in.\n\nCreate Database Table​\n\nWe'll first create a table in ToolJet's built-in database.\n\nNavigate to the Database tab from the left sidebar. Click on the Create new table button on the top-left. A dialog box will slide from the right to configure the database table properties.\n\nIn the Table name field, enter timeTracker.\n\nThe id field will be present by default to create a unique identifier for each record in our database table.\n\nClick on the Add more columns button and enter employee in the Name field and select varchar as the Type.\n\nSimilarly, add four more columns:\n\n- Name: taskname | Type: varchar\n\n- Name: duration | Type: integer\n\n- Name: dateoftask | Type: varchar\n\n- Name: description | Type: varchar\n\nClick on the Create button on the bottom right to create the table.\n\n\n\n\nFor every column, you can choose from four data types - varchar for text, integer for numbers, float for decimal or fractional numbers and boolean for true or false values. The Default field allows you to enter a default value that will be used if no value is received from the frontend.\n\nAdd three rows of dummy data by clicking on the Add New Row button and entering the required values. We are entering email IDs for the employee column. Later, we'll use this employee column to display data specific to the logged-in user.\n\nCreate UI For Home Page Using ToolJet App-Builder​\n\nWe'll now go ahead and build the Home page of our application using the ToolJet App-Builder.\n\nClick on the Dashboard button on the sidebar and click on the Create new app button. A new application will be created with an empty canvas.\n\nWe can see the Component Library on the right, we can drag and drop pre-built components from the Component Library on the canvas to create the UI. The Query Panel at the bottom can be used to create and manage queries to interact with the database.\n\nRename the application to Time Tracker. Minimize the Query Panel by clicking on the Hide Query Panel button on its top-left.\n\nClick and drag a Container component to the canvas. Adjust the borders of the Container and expand it till it covers the visible portion of the canvas.\n\nEach time you click and select the Container or any other component on the canvas, configuration related to the component will appear on the right.\n\nEach component will show a different configuration based on its overall functionality.\n\nRight at the top is an input field that lets us name the component. We'll click on it and rename the container to home.\n\nBelow we have the Properties and Styles tab.\n\nProperties tab lets us configure the functional behaviour of a component.\n\nStyle tab allows us to add custom styling to the components.\n\n\n\n\nWe'll give each component in this application a name that reflects its function. This naming strategy will become increasingly beneficial as the application expands and we need to identify specific components.\n\nLet's build the header of our application. Click and drag an Image component to the canvas from the library and rename it to Logo. Select the Image component, you'll see its configuration on the right. Enter the below value as URL:\n\nhttps://static-00.iconduck.com/assets.00/tooljet-icon-1024x908-0mi0u3op.png\n\nFeel free to add any other URL that you might wish to use as the logo.\n\n\n\nPlace a Text component next to it and rename the component to headerText. Paste following value under Text property:\n\nTime Tracker Application⏳\n\n\nUnder Styles, change the Text Size to 25. We are now ready with the Header of the application.\n\nNext we'll use a Table component to display all the time tracker logs. The Table component offers a simple and intuitive way to display and interact with data.\n\nDrag and drop a table component on the canvas. Adjust the width and make it slightly wider than the header. The default name of the table will be table1, rename it to trackerTable. We already have some dummy data in the Table component. We'll replace it with actual data later on.\n\nCreate Your First Query In ToolJet​\n\nIt's time to add some real data to our application.\n\nClick on the Show Query Panel button on the top-left of the Query Panel to expand it. Click on the +Add and select ToolJet Database - a new query will be created. Rename the query to getTrackerSummary. Select timeTracker (the database table that we had created at the start) as the Table name and List Rows as Operations.\n\nEnable Run this query on load? toggle, this will ensure that the query runs every time the application loads. We'll generally use this setting for queries that are used to fetch data. Click on the Run button to run the query.\n\nTo see the preview of the returned data, press on the Preview button in the Query Panel.\n\nAdding Queried Data To The Table​\n\nWe need to use double curly braces {{}} to write custom JavaScript code or access values such as query results, component variables and other variables available in the ToolJet App-Builder.\n\nThe general format to access queries is:\n\n{{queries.queryName.data}}\n\n\nA quick way to look at available queries (and other accessible values) would be to click on the Inspector button in the left side-bar and expand the queries dropdown.\n\nWe can use the queried data in our components. Let's insert the data returned by the getTrackerSummary query in our table. Hide the query panel and click on the Table component. Under the Data property, paste the below code:\n\n{{queries.getTrackerSummary.data}}\n\n\nWe've now replaced the static data with dynamic data that we are fetching from the database. The table now displays data fetched using the getTrackerSummary query.\n\nLet's make some more changes in the Table configuration. Disable all the properties under Search sort and filter and Additional Actions. We don't need them for our use-case.\n\nCreating Form To Submit Data​\n\nThe Modal component can be used to create a pop-up form to submit data.\n\nDrag a Modal component from the components library and place it at the bottom-right of the table - you will notice that only a button with the label Launch Modal shows up on the canvas. We'll first change the name of the button to logTimeButton and Trigger Button label property to Log Time.\n\nTo edit the modal, click on the Log Time button(named Launch Modal earlier) - a modal will open up on your canvas. The modal will stay open till you click on the X button/close button on the top-right. You can edit the modal and place other components over it while it is open. We'll place components on our modal to create a form layout to submit the time tracker details.\n\nLet's change the Title property of the modal to Log Details. Click on the back button/← on the top-left of Modal component's configuration and go back to the components library.\n\nDrag four Text components on the modal and align them vertically. We'll rename the components and their labels according to the table below:\n\nComponent\tComponent Name\tText property\nText\ttaskName\tTask Name\nText\tduration\tDuration (In Hours)\nText\tdateOfTask\tDate Of Task\nText\ttaskDescription\tTask Description\n\nWe are ready with the labels, let's place the input components next to the labels. Drag Text Input, Number Input, Date Picker and Textarea components and arrange them next to the labels. You'll find all the input fields under the Form section of the component library. We'll also add a Submit button below the input fields. Refer to the below table to rename the component name and default values:\n\nComponent\tComponent Name\tDefault Value\nText Input\ttaskNameInput\tDevelopment\nNumber Input\ttaskDurationInput\t1\nDate Picker\ttaskDateInput\t{{moment().format(\"DD/MM/YYYY\")}}\nTextarea\ttaskDescriptionInput\tCreating a modal component\n\nFor the Date Picker field, we are using double curly braces to pass JavaScript code. Using the Moment.js library, we are getting today's date in the dd/mm/yyyy format. ToolJet comes with Moment.js, Lodash and Axios libraries to make it more convenient for you to work with custom JavaScript code.\n\nWe'll close the modal by clicking on the X/close button on the top-right.\n\nCreating Query To Write Data​\n\nWe are ready with the form. Now we need to create a query that will help us add new entries to the timeTracker table in the database. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources.\n\nRename the query to addLog, select Create row as Operations and use the below configuration for the columns. We'll see how we can use custom code and use different keys to access the data available in the app-builder in the below table.\n\nColumn Name\tKeys\nemployee\t{{globals.currentUser.email}}\ntaskname\t{{components.taskNameInput.value}}\nduration\t{{components.taskDurationInput.value}}\ndateoftask\t{{components.taskDateInput.value}}\ntaskdescription\t{{components.taskDescriptionInput.value}}\n\nClick on the Inspector on the left-sidebar to look at the available values under globals and components.\n\nThe currentUser object holds all the values related to logged-in user.\n\nYou can refer to the logged-in user's firstName, lastName, email and groups using the currentUser object.\n\nSimilarly, the components object holds all the values related to the components in our application.\n\nNow every time the addLog query runs, the values present in the referred keys will be written to the database.\n\n\n\n\nLater, we'll plug this query to the Submit button on logTimeModal.\n\nUsing Events​\n\nEvents allow us to run queries and other application functions based on button clicks, query completion and an array of other triggers.\n\nThe addLog query will add data to the the timeTracker table in the database when it runs. But we would want our Table component to be reloaded with the new data every time we add or delete the entries. Since the data in the Table component is coming from the getTrackerSummary query, we'll trigger the getTrackerSummary query after running the addLog query.\n\nClick on the + New Event Handler button in the addLog query - a new event will be added. Click on the event and select Run Query as Action and getTrackerSummary as Query.\n\nNow the getTrackerSummary will run every time the addLog query is successfully executed, the Table component will also get updated with the new data since it displays the data returned by the getTrackerSummary.\n\nIt's time to add the addLog query to the modal and see it in action. Open the modal by clicking on logTimeButton and select the submit button that we've placed inside the modal.\n\nUnder Events configuration of the submit button, click on + Add Handler, leave the Event as On Click, select the Action as Run Query and select addLog as the query.\n\nNow whenever we click on the submit button, the addLog query will run and values present in the input fields will be written to the database.\n\nWe also need to show a prompt to indicate that the data has been added. Click on + Add Handler, leave the Event as On Click, select the Action as Show Alert and enter Log Added as the Message and leave Alert Type as Info.\n\nFinally, we would want our modal to close once we click on Submit and the required query and alert is triggered. Add one more Event, select Close Modal as the action type and logTimeModal as Modal.\n\nNow every time we click on the Submit button on the modal, the addLog query will run, followed by an alert and the modal being closed.\n\nAdding Actions To Tables​\n\nLet's create a way to delete entries from the Table component using Actions.\n\nWe'll first create the required query to perform the action. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources. Rename the query to deleteLog, select Delete rows as Operations.\n\nFor the Filter, select id as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{components.trackerTable.selectedRow.id}}\n\n\nWhen you click on a table row, its values get stored under the selectedRow key. To remove that row from the database, we match selectedRow.id with the database's id field.\n\nWe also need to run the getTrackerSummary query once the deleteLog query is completed to ensure that the Table component gets reloaded with the updated data. Click on the + New Event Handler button in the deleteLog query - a new event will be added. Click on the newly created event, leave Event as Query Success, select Run Query as Action and getTrackerSummary as Query.\n\nNow let's use this query with Actions in the Table component.\n\nGo to the Action Buttons section of the trackerTable properties. Click on + New action button and change Button Text to Delete, Background color to Red(first color in the palette) and Text color to White(last color in the palette.)\n\nClick on + New event handler and leave the Event as On click and select Run Query as the Action. Select deleteLog for the Query dropdown.\n\nNow every time we click on the Delete action button, the deleteLog query will run and delete the related row.\n\nFilter Data Based On The Logged-In User​\n\nIn a typical time-tracking application, we only need to show the data related to the logged-in user. To achieve that, we need to add a filter to our getTrackerSummary query.\n\nOpen the getTrackerSummary query in the Query Panel, click on the + Add Condition button associated with Filter.\n\nFor the Filter, select employee as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{globals.currentUser.email}}\n\n\nAdd some new entries to the Time Tracker. Earlier, we had put some test entries with test@gmail.com as the value for the employee column. Now, those entries will not appear and only the entries you have added with your current email(or logged in account) will appear on the table.\n\nCongratulations! You've successfully built a time tracker application and, in the process, covered the essential fundamentals of ToolJet. Now you're well-equipped to take on more complex projects. Happy building!\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nQuickstart Guide\nCreate Database Table\nCreate UI For Home Page Using ToolJet App-Builder\nCreate Your First Query In ToolJet\nAdding Queried Data To The Table\nCreating Form To Submit Data\nCreating Query To Write Data\nUsing Events\nAdding Actions To Tables\nFilter Data Based On The Logged-In User\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Getting Started | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.24.0/",
    "html": "This is documentation for ToolJet 2.24.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting Started\nVersion: 2.24.0\nWelcome to ToolJet Docs\nWhat is ToolJet​\n\nToolJet is an open-source low-code framework to build and deploy custom internal tools.\n\nToolJet ships with its built-in database called ToolJet DB (built on top of PostgreSQL). You can also connect to the external data sources such as databases ( PostgreSQL, MongoDB, MS SQL Server, Snowflake, , BigQuery, etc ), API/GraphQL endpoints, SaaS tools ( Airtable, Stripe, Google Sheets, etc ) and cloud object storage services ( AWS S3, Google Cloud Storage and Minio ).\n\nOnce the data sources are connected, ToolJet can run queries on these data sources to fetch and update data. The data fetched from data sources can be visualised and modified using the UI widgets such as tables, charts, forms, etc. You can also use Javascript or Python queries for writing business logic or interacting with the user interface of the application.\n\nHow ToolJet works​\n\nWith ToolJet, you can build apps in 3 simple steps:\n\nConnect to datasources: Connect to the ToolJet's built-in database ToolJet DB (built on top of PostgreSQL) or your existing data sources such as PostgreSQL, MySQL, Firestore, Stripe, Google Sheets, API endpoints, etc.\n\nBuild queries: ToolJet comes with query builders for all supported data sources. You can also write Javascript or Python queries or use Transformations to transform the query response.\n\nBuild User Interface: ToolJet's visual App Builder allows you to drag and drop components ( Eg: tables, charts, forms, etc ) to quickly build the user-interface of the apps. Components have events such as on click, on row selected, on page changed, etc. ToolJet apps can be used in light and dark mode.\n\nTIP\n\nToolJet binds together the datasources, queries and components to convert business logic into custom applications. You can also secure your ToolJet apps with Group & Permissions and Audit Logging.\n\nChoose your ToolJet​\n\nThere are a few different ways to set up ToolJet depending on how you intend to use it:\n\nToolJet Cloud: hosted solution, just sign-up for free and start building apps in seconds.\nDeploy on premise: recommended method for production or customized use cases. You'll find Server setup guides for popular platforms (AWS, GCP, Kubernetes etc) and one-click deployment guides (Heroku, DigitalOcean etc).\nTry ToolJet on local machine: the fastest way to try out ToolJet on your computer using docker.\nINFO\nData security is top priority at ToolJet, read about our data security here.\nQuickstart Guide​\n\nIn this quickstart guide, we'll cover the fundamentals of ToolJet by building a Time Tracking Application that will allow end-users to record their daily working hours with supporting details.\n\nIf you don't already have a ToolJet account, head over to tooljet.com to sign up for free. Existing users can simply log in.\n\nCreate Database Table​\n\nWe'll first create a table in ToolJet's built-in database.\n\nNavigate to the Database tab from the left sidebar. Click on the Create new table button on the top-left. A dialog box will slide from the right to configure the database table properties.\n\nIn the Table name field, enter timeTracker.\n\nThe id field will be present by default to create a unique identifier for each record in our database table.\n\nClick on the Add more columns button and enter employee in the Name field and select varchar as the Type.\n\nSimilarly, add four more columns:\n\n- Name: taskname | Type: varchar\n\n- Name: duration | Type: integer\n\n- Name: dateoftask | Type: varchar\n\n- Name: description | Type: varchar\n\nClick on the Create button on the bottom right to create the table.\n\n\n\n\nFor every column, you can choose from four data types - varchar for text, integer for numbers, float for decimal or fractional numbers and boolean for true or false values. The Default field allows you to enter a default value that will be used if no value is received from the frontend.\n\nAdd three rows of dummy data by clicking on the Add New Row button and entering the required values. We are entering email IDs for the employee column. Later, we'll use this employee column to display data specific to the logged-in user.\n\nCreate UI For Home Page Using ToolJet App-Builder​\n\nWe'll now go ahead and build the Home page of our application using the ToolJet App-Builder.\n\nClick on the Dashboard button on the sidebar and click on the Create new app button. A new application will be created with an empty canvas.\n\nWe can see the Component Library on the right, we can drag and drop pre-built components from the Component Library on the canvas to create the UI. The Query Panel at the bottom can be used to create and manage queries to interact with the database.\n\nRename the application to Time Tracker. Minimize the Query Panel by clicking on the Hide Query Panel button on its top-left.\n\nClick and drag a Container component to the canvas. Adjust the borders of the Container and expand it till it covers the visible portion of the canvas.\n\nEach time you click and select the Container or any other component on the canvas, configuration related to the component will appear on the right.\n\nEach component will show a different configuration based on its overall functionality.\n\nRight at the top is an input field that lets us name the component. We'll click on it and rename the container to home.\n\nBelow we have the Properties and Styles tab.\n\nProperties tab lets us configure the functional behaviour of a component.\n\nStyle tab allows us to add custom styling to the components.\n\n\n\n\nWe'll give each component in this application a name that reflects its function. This naming strategy will become increasingly beneficial as the application expands and we need to identify specific components.\n\nLet's build the header of our application. Click and drag an Image component to the canvas from the library and rename it to Logo. Select the Image component, you'll see its configuration on the right. Enter the below value as URL:\n\nhttps://static-00.iconduck.com/assets.00/tooljet-icon-1024x908-0mi0u3op.png\n\nFeel free to add any other URL that you might wish to use as the logo.\n\n\n\nPlace a Text component next to it and rename the component to headerText. Paste following value under Text property:\n\nTime Tracker Application⏳\n\n\nUnder Styles, change the Text Size to 25. We are now ready with the Header of the application.\n\nNext we'll use a Table component to display all the time tracker logs. The Table component offers a simple and intuitive way to display and interact with data.\n\nDrag and drop a table component on the canvas. Adjust the width and make it slightly wider than the header. The default name of the table will be table1, rename it to trackerTable. We already have some dummy data in the Table component. We'll replace it with actual data later on.\n\nCreate Your First Query In ToolJet​\n\nIt's time to add some real data to our application.\n\nClick on the Show Query Panel button on the top-left of the Query Panel to expand it. Click on the +Add and select ToolJet Database - a new query will be created. Rename the query to getTrackerSummary. Select timeTracker (the database table that we had created at the start) as the Table name and List Rows as Operations.\n\nEnable Run this query on load? toggle, this will ensure that the query runs every time the application loads. We'll generally use this setting for queries that are used to fetch data. Click on the Run button to run the query.\n\nTo see the preview of the returned data, press on the Preview button in the Query Panel.\n\nAdding Queried Data To The Table​\n\nWe need to use double curly braces {{}} to write custom JavaScript code or access values such as query results, component variables and other variables available in the ToolJet App-Builder.\n\nThe general format to access queries is:\n\n{{queries.queryName.data}}\n\n\nA quick way to look at available queries (and other accessible values) would be to click on the Inspector button in the left side-bar and expand the queries dropdown.\n\nWe can use the queried data in our components. Let's insert the data returned by the getTrackerSummary query in our table. Hide the query panel and click on the Table component. Under the Data property, paste the below code:\n\n{{queries.getTrackerSummary.data}}\n\n\nWe've now replaced the static data with dynamic data that we are fetching from the database. The table now displays data fetched using the getTrackerSummary query.\n\nLet's make some more changes in the Table configuration. Disable all the properties under Search sort and filter and Additional Actions. We don't need them for our use-case.\n\nCreating Form To Submit Data​\n\nThe Modal component can be used to create a pop-up form to submit data.\n\nDrag a Modal component from the components library and place it at the bottom-right of the table - you will notice that only a button with the label Launch Modal shows up on the canvas. We'll first change the name of the button to logTimeButton and Trigger Button label property to Log Time.\n\nTo edit the modal, click on the Log Time button(named Launch Modal earlier) - a modal will open up on your canvas. The modal will stay open till you click on the X button/close button on the top-right. You can edit the modal and place other components over it while it is open. We'll place components on our modal to create a form layout to submit the time tracker details.\n\nLet's change the Title property of the modal to Log Details. Click on the back button/← on the top-left of Modal component's configuration and go back to the components library.\n\nDrag four Text components on the modal and align them vertically. We'll rename the components and their labels according to the table below:\n\nComponent\tComponent Name\tText property\nText\ttaskName\tTask Name\nText\tduration\tDuration (In Hours)\nText\tdateOfTask\tDate Of Task\nText\ttaskDescription\tTask Description\n\nWe are ready with the labels, let's place the input components next to the labels. Drag Text Input, Number Input, Date Picker and Textarea components and arrange them next to the labels. You'll find all the input fields under the Form section of the component library. We'll also add a Submit button below the input fields. Refer to the below table to rename the component name and default values:\n\nComponent\tComponent Name\tDefault Value\nText Input\ttaskNameInput\tDevelopment\nNumber Input\ttaskDurationInput\t1\nDate Picker\ttaskDateInput\t{{moment().format(\"DD/MM/YYYY\")}}\nTextarea\ttaskDescriptionInput\tCreating a modal component\n\nFor the Date Picker field, we are using double curly braces to pass JavaScript code. Using the Moment.js library, we are getting today's date in the dd/mm/yyyy format. ToolJet comes with Moment.js, Lodash and Axios libraries to make it more convenient for you to work with custom JavaScript code.\n\nWe'll close the modal by clicking on the X/close button on the top-right.\n\nCreating Query To Write Data​\n\nWe are ready with the form. Now we need to create a query that will help us add new entries to the timeTracker table in the database. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources.\n\nRename the query to addLog, select Create row as Operations and use the below configuration for the columns. We'll see how we can use custom code and use different keys to access the data available in the app-builder in the below table.\n\nColumn Name\tKeys\nemployee\t{{globals.currentUser.email}}\ntaskname\t{{components.taskNameInput.value}}\nduration\t{{components.taskDurationInput.value}}\ndateoftask\t{{components.taskDateInput.value}}\ntaskdescription\t{{components.taskDescriptionInput.value}}\n\nClick on the Inspector on the left-sidebar to look at the available values under globals and components.\n\nThe currentUser object holds all the values related to logged-in user.\n\nYou can refer to the logged-in user's firstName, lastName, email and groups using the currentUser object.\n\nSimilarly, the components object holds all the values related to the components in our application.\n\nNow every time the addLog query runs, the values present in the referred keys will be written to the database.\n\n\n\n\nLater, we'll plug this query to the Submit button on logTimeModal.\n\nUsing Events​\n\nEvents allow us to run queries and other application functions based on button clicks, query completion and an array of other triggers.\n\nThe addLog query will add data to the the timeTracker table in the database when it runs. But we would want our Table component to be reloaded with the new data every time we add or delete the entries. Since the data in the Table component is coming from the getTrackerSummary query, we'll trigger the getTrackerSummary query after running the addLog query.\n\nClick on the + New Event Handler button in the addLog query - a new event will be added. Click on the event and select Run Query as Action and getTrackerSummary as Query.\n\nNow the getTrackerSummary will run every time the addLog query is successfully executed, the Table component will also get updated with the new data since it displays the data returned by the getTrackerSummary.\n\nIt's time to add the addLog query to the modal and see it in action. Open the modal by clicking on logTimeButton and select the submit button that we've placed inside the modal.\n\nUnder Events configuration of the submit button, click on + Add Handler, leave the Event as On Click, select the Action as Run Query and select addLog as the query.\n\nNow whenever we click on the submit button, the addLog query will run and values present in the input fields will be written to the database.\n\nWe also need to show a prompt to indicate that the data has been added. Click on + Add Handler, leave the Event as On Click, select the Action as Show Alert and enter Log Added as the Message and leave Alert Type as Info.\n\nFinally, we would want our modal to close once we click on Submit and the required query and alert is triggered. Add one more Event, select Close Modal as the action type and logTimeModal as Modal.\n\nNow every time we click on the Submit button on the modal, the addLog query will run, followed by an alert and the modal being closed.\n\nAdding Actions To Tables​\n\nLet's create a way to delete entries from the Table component using Actions.\n\nWe'll first create the required query to perform the action. Click on the + Add button in the Query Panel. Select ToolJet Database from the list of available sources. Rename the query to deleteLog, select Delete rows as Operations.\n\nFor the Filter, select id as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{components.trackerTable.selectedRow.id}}\n\n\nWhen you click on a table row, its values get stored under the selectedRow key. To remove that row from the database, we match selectedRow.id with the database's id field.\n\nWe also need to run the getTrackerSummary query once the deleteLog query is completed to ensure that the Table component gets reloaded with the updated data. Click on the + New Event Handler button in the deleteLog query - a new event will be added. Click on the newly created event, leave Event as Query Success, select Run Query as Action and getTrackerSummary as Query.\n\nNow let's use this query with Actions in the Table component.\n\nGo to the Action Buttons section of the trackerTable properties. Click on + New action button and change Button Text to Delete, Background color to Red(first color in the palette) and Text color to White(last color in the palette.)\n\nClick on + New event handler and leave the Event as On click and select Run Query as the Action. Select deleteLog for the Query dropdown.\n\nNow every time we click on the Delete action button, the deleteLog query will run and delete the related row.\n\nFilter Data Based On The Logged-In User​\n\nIn a typical time-tracking application, we only need to show the data related to the logged-in user. To achieve that, we need to add a filter to our getTrackerSummary query.\n\nOpen the getTrackerSummary query in the Query Panel, click on the + Add Condition button associated with Filter.\n\nFor the Filter, select employee as the column(first field), equals as the operation(second field) and paste the below code in the key input(third field):\n\n{{globals.currentUser.email}}\n\n\nAdd some new entries to the Time Tracker. Earlier, we had put some test entries with test@gmail.com as the value for the employee column. Now, those entries will not appear and only the entries you have added with your current email(or logged in account) will appear on the table.\n\nCongratulations! You've successfully built a time tracker application and, in the process, covered the essential fundamentals of ToolJet. Now you're well-equipped to take on more complex projects. Happy building!\n\nWhat Can I Do With ToolJet​\n\nIf you are building internal tool for your organization, here are few tutorials of sample use-cases for you to get started:\n\nBuild a Feature Request Management App\nBuild a Ticket Triaging App with Baserow and ToolJet\nBuilding a MinIO file explorer app\nBuilding a Google Cloud Storage (GCS) file explorer app\nBuild an AWS S3 file explorer app\nBuild Stripe Refund App\nBuild a WhatsApp CRM\nBuild a cryptocurrency dashboard\nBuild a Redis GUI\n\nFind more Tutorials on our Blog.\n\nFor ToolJet Contributors​\n\nTo contribute to ToolJet code, plugins, and documentation, refer to our Contributing Guide.\n\n   \n\nHelp and Support​\nWe have extensively documented the features of ToolJet, but in case you are stuck, please feel free to e-mail us at hello@tooljet.com\nIf you are using ToolJet cloud, click on the chat icon at the bottom-left corner for instant help.\nIf you have found a bug, please create a GitHub issue for the same.\nFeel free to join our highly active Slack Community.\nEdit this page\nNext\nSetup ToolJet\nWhat is ToolJet\nHow ToolJet works\nChoose your ToolJet\nQuickstart Guide\nCreate Database Table\nCreate UI For Home Page Using ToolJet App-Builder\nCreate Your First Query In ToolJet\nAdding Queried Data To The Table\nCreating Form To Submit Data\nCreating Query To Write Data\nUsing Events\nAdding Actions To Tables\nFilter Data Based On The Logged-In User\nWhat Can I Do With ToolJet\nFor ToolJet Contributors\nHelp and Support"
  },
  {
    "title": "Platform Overview | ToolJet",
    "url": "https://docs.tooljet.com/docs/2.25.0/",
    "html": "This is documentation for ToolJet 2.25.0, which is no longer actively maintained.\nFor up-to-date documentation, see the latest version (2.27.0).\nGetting StartedPlatform Overview\nVersion: 2.25.0\nPlatform Overview\nWhat is ToolJet?​\n\nToolJet is a low-code platform that enables developers to rapidly build and deploy custom internal tools. It has a drag-and-drop app builder with 45 pre-built components, so developers can create complex applications in minutes. ToolJet also connects to most popular data sources and APIs out of the box, and it has a group-based permission system for easy user access management. ToolJet also comes with a lot of other features, but for now, let’s build a basic ToolJet app.\n\nHow ToolJet Works:​\n\nWith ToolJet, you can streamline app development with 4 core steps:\n\n\nConnect Data Sources: Leverage ToolJet's robust integration features to connect with any data source. The platform supports seamless data integration across over 50 different applications, databases, and APIs.\n\nDesign Stunning Interfaces: Drag and drop UI components like Tables, Charts, Forms, and more build custom applications in minutes. Integrate these components with data sources and incorporate business logic through JavaScript or Python.\n\nAutomate Complex Workflows: Develop multi-step workflows in ToolJet to automate business processes. In addition to building and automating workflows, ToolJet allows for easy integration of these workflows within your applications.\n\nSecure and Manage: Secure your internal tools with detailed permissions settings and audit logs. Maintain quality and consistency with version control, and keep track of performance with comprehensive observability tools.\n\nBelow is a detailed overview of ToolJet's key functionalities, demonstrating how ToolJet helps teams to build more with less effort and greater efficiency.\n\nVisual App Builder​\n\nEnables the creation of visually appealing front-ends with a drag-and-drop interface and pre-built components.\n\nIntegrations​\n\nOffers seamless integration with a wide range of data sources, including over 50 applications, databases, and APIs.\n\nToolJet Database​\n\nA robust, scalable database solution built atop PostgreSQL. It allows for no-code database management, enabling users to build, manage, and scale databases effortlessly.\n\nWorkflow Automation​\n\nSimplifies the automation of complex manual business processes, reducing the engineering effort required.\n\nEnterprise-Grade Security​\n\nDesigned with advanced security features and a scalable infrastructure to meet the needs of enterprise teams.\n\nSSO Support​\n\nSingle Sign-On (SSO) capabilities, supporting a variety of providers including Okta, Google, Azure AD, and OpenID Connect.\n\nMultiple Environments​\n\nCreation and management of multiple environments for efficient application lifecycle management, allowing different stages like development, testing, and production to be handled seamlessly.\n\nMultiplayer Editing​\n\nMultiple users can collaboratively work on app development in real-time. Simultaneous edits and contributions from different team members streamlines the development process and fosters a more dynamic and interactive workspace\n\nWhether you're a seasoned developer or a business professional, ToolJet stands out as a comprehensive solution to fast-track your internal tool development process.\n\nEdit this page\nNext\nQuickstart Guide\nWhat is ToolJet?\nHow ToolJet Works:\nVisual App Builder\nIntegrations\nToolJet Database\nWorkflow Automation\nEnterprise-Grade Security\nSSO Support\nMultiple Environments\nMultiplayer Editing"
  },
  {
    "title": "Platform Overview | ToolJet",
    "url": "https://docs.tooljet.com/docs/",
    "html": "Getting StartedPlatform Overview\nVersion: 2.27.0\nPlatform Overview\nWhat is ToolJet?​\n\nToolJet is a low-code platform that enables developers to rapidly build and deploy custom internal tools. It has a drag-and-drop app builder with 45 pre-built components, so developers can create complex applications in minutes. ToolJet also connects to most popular data sources and APIs out of the box, and it has a group-based permission system for easy user access management. ToolJet also comes with a lot of other features, but for now, let’s build a basic ToolJet app.\n\nHow ToolJet Works:​\n\nWith ToolJet, you can streamline app development with 4 core steps:\n\n\nConnect Data Sources: Leverage ToolJet's robust integration features to connect with any data source. The platform supports seamless data integration across over 50 different applications, databases, and APIs.\n\nDesign Stunning Interfaces: Drag and drop UI components like Tables, Charts, Forms, and more build custom applications in minutes. Integrate these components with data sources and incorporate business logic through JavaScript or Python.\n\nAutomate Complex Workflows: Develop multi-step workflows in ToolJet to automate business processes. In addition to building and automating workflows, ToolJet allows for easy integration of these workflows within your applications.\n\nSecure and Manage: Secure your internal tools with detailed permissions settings and audit logs. Maintain quality and consistency with version control, and keep track of performance with comprehensive observability tools.\n\nBelow is a detailed overview of ToolJet's key functionalities, demonstrating how ToolJet helps teams to build more with less effort and greater efficiency.\n\nVisual App Builder​\n\nEnables the creation of visually appealing front-ends with a drag-and-drop interface and pre-built components.\n\nIntegrations​\n\nOffers seamless integration with a wide range of data sources, including over 50 applications, databases, and APIs.\n\nToolJet Database​\n\nA robust, scalable database solution built atop PostgreSQL. It allows for no-code database management, enabling users to build, manage, and scale databases effortlessly.\n\nWorkflow Automation​\n\nSimplifies the automation of complex manual business processes, reducing the engineering effort required.\n\nEnterprise-Grade Security​\n\nDesigned with advanced security features and a scalable infrastructure to meet the needs of enterprise teams.\n\nSSO Support​\n\nSingle Sign-On (SSO) capabilities, supporting a variety of providers including Okta, Google, Azure AD, and OpenID Connect.\n\nMultiple Environments​\n\nCreation and management of multiple environments for efficient application lifecycle management, allowing different stages like development, testing, and production to be handled seamlessly.\n\nMultiplayer Editing​\n\nMultiple users can collaboratively work on app development in real-time. Simultaneous edits and contributions from different team members streamlines the development process and fosters a more dynamic and interactive workspace\n\nWhether you're a seasoned developer or a business professional, ToolJet stands out as a comprehensive solution to fast-track your internal tool development process.\n\nEdit this page\nNext\nQuickstart Guide\nWhat is ToolJet?\nHow ToolJet Works:\nVisual App Builder\nIntegrations\nToolJet Database\nWorkflow Automation\nEnterprise-Grade Security\nSSO Support\nMultiple Environments\nMultiplayer Editing"
  }
]